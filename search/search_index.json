{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"fpdf2 fpdf2 is a library for simple & fast PDF document generation in Python. It is a fork and the successor of PyFPDF ( cf. history ). Latest Released Version: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( 'helvetica' , size = 12 ) pdf . cell ( txt = \"hello world\" ) pdf . output ( \"hello_world.pdf\" ) Main features Easy to use, with a user-friendly API , and easy to extend Python 3.7+ support Unicode (UTF-8) TrueType font subset embedding (Central European, Cyrillic, Greek, Baltic, Thai, Chinese, Japanese, Korean, Hindi and almost any other language in the world) Internal / external links Embedding images, including transparency and alpha channel, using Pillow (Python Imaging Library) Arbitrary path drawing and basic SVG import Embedding barcodes , charts & graphs , emojis, symbols & dingbats Cell / multi-cell / plaintext writing , with automatic page breaks , line break and text justification Choice of measurement unit, page format & margins. Optional page header and footer Basic conversion from HTML to PDF A templating system to render PDFs in batchs Images & links alternative descriptions, for accessibility Table of contents & document outline Document signing Annotations , including text highlights, and file attachments Presentation mode with control over page display duration & transitions Optional basic Markdown-like styling: **bold**, __italics__ It has very few dependencies: Pillow , defusedxml , svg.path & fonttools Can render mathematical equations & charts Many example scripts available throughout this documentation, including usage examples with Django , Flask , streamlit , AWS lambdas... : Usage in web APIs Unit tests with qpdf -based PDF diffing, and PDF samples validation using 3 different checkers: Tutorials English Deutsch Italian espa\u00f1ol fran\u00e7ais \u0939\u093f\u0902\u0926\u0940 portugu\u00eas \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Installation From PyPI : pip install fpdf2 To get the latest, unreleased, development version straight from the development branch of this repository: pip install git+https://github.com/PyFPDF/fpdf2.git@master fpdf2 can be installed without any dependency, but it needs Pillow to render images: pip install --no-dependencies fpdf2 Developement : check the dedicated documentation page . Displaying deprecation warnings DeprecationWarning s are not displayed by Python by default. Hence, every time you use a newer version of fpdf2 , we strongly encourage you to execute your scripts with the -Wd option ( cf. documentation ) in order to get warned about deprecated features used in your code. This can also be enabled programmatically with warnings.simplefilter('default', DeprecationWarning) . Community Support For community support, please feel free to file an issue or open a discussion . They use fpdf2 Undying Dusk : a video game in PDF format , with a gameplay based on exploration and logic puzzles, in the tradition of dungeon crawlers OpenDroneMap : a command line toolkit for processing aerial drone imagery OpenSfM : a Structure from Motion library, serving as a processing pipeline for reconstructing camera poses and 3D scenes from multiple images RPA Framework : libraries and tools for Robotic Process Automation (RPA), designed to be used with both Robot Framework Concordia : a platform developed by the US Library of Congress for crowdsourcing transcription and tagging of text in digitized images wudududu/extract-video-ppt : create a one-page-per-frame PDF from a video or PPT file. fpdf2 also has a demo script to convert a GIF into a one-page-per-frame PDF: gif2pdf.py csv2pdf : convert CSV files to PDF files easily Related Looking for alternative libraries? Check out this detailed list of PDF-related Python libs by Patrick Maupin ( pdfrw author) . There is also borb , pikepdf , WeasyPrint & pydyf . We have some documentations about combining fpdf2 with borb & pdfrw . Create PDFs with Python : a series of tutorial videos by bvalgard digidigital/Extensions-and-Scripts-for-pyFPDF-fpdf2 : scripts ported from PHP to add transpareny to elements of the page or part of an image, allow to write circular text, draw pie charts and bar diagrams, embed JavaScript, draw rectangles with rounded corners, draw a star shape, restrict the rendering of some elements to screen or printout, paint linear / radial / multi-color gradients gradients, add stamps & watermarks, write sheared text... Misc Release notes: CHANGELOG.md This library could only exist thanks to the dedication of many volunteers around the world: list & map of contributors You can download an offline PDF version of this manual: fpdf2-manual.pdf","title":"Project Home"},{"location":"index.html#fpdf2","text":"fpdf2 is a library for simple & fast PDF document generation in Python. It is a fork and the successor of PyFPDF ( cf. history ). Latest Released Version: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( 'helvetica' , size = 12 ) pdf . cell ( txt = \"hello world\" ) pdf . output ( \"hello_world.pdf\" )","title":"fpdf2"},{"location":"index.html#main-features","text":"Easy to use, with a user-friendly API , and easy to extend Python 3.7+ support Unicode (UTF-8) TrueType font subset embedding (Central European, Cyrillic, Greek, Baltic, Thai, Chinese, Japanese, Korean, Hindi and almost any other language in the world) Internal / external links Embedding images, including transparency and alpha channel, using Pillow (Python Imaging Library) Arbitrary path drawing and basic SVG import Embedding barcodes , charts & graphs , emojis, symbols & dingbats Cell / multi-cell / plaintext writing , with automatic page breaks , line break and text justification Choice of measurement unit, page format & margins. Optional page header and footer Basic conversion from HTML to PDF A templating system to render PDFs in batchs Images & links alternative descriptions, for accessibility Table of contents & document outline Document signing Annotations , including text highlights, and file attachments Presentation mode with control over page display duration & transitions Optional basic Markdown-like styling: **bold**, __italics__ It has very few dependencies: Pillow , defusedxml , svg.path & fonttools Can render mathematical equations & charts Many example scripts available throughout this documentation, including usage examples with Django , Flask , streamlit , AWS lambdas... : Usage in web APIs Unit tests with qpdf -based PDF diffing, and PDF samples validation using 3 different checkers:","title":"Main features"},{"location":"index.html#tutorials","text":"English Deutsch Italian espa\u00f1ol fran\u00e7ais \u0939\u093f\u0902\u0926\u0940 portugu\u00eas \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac","title":"Tutorials"},{"location":"index.html#installation","text":"From PyPI : pip install fpdf2 To get the latest, unreleased, development version straight from the development branch of this repository: pip install git+https://github.com/PyFPDF/fpdf2.git@master fpdf2 can be installed without any dependency, but it needs Pillow to render images: pip install --no-dependencies fpdf2 Developement : check the dedicated documentation page .","title":"Installation"},{"location":"index.html#displaying-deprecation-warnings","text":"DeprecationWarning s are not displayed by Python by default. Hence, every time you use a newer version of fpdf2 , we strongly encourage you to execute your scripts with the -Wd option ( cf. documentation ) in order to get warned about deprecated features used in your code. This can also be enabled programmatically with warnings.simplefilter('default', DeprecationWarning) .","title":"Displaying deprecation warnings"},{"location":"index.html#community","text":"","title":"Community"},{"location":"index.html#support","text":"For community support, please feel free to file an issue or open a discussion .","title":"Support"},{"location":"index.html#they-use-fpdf2","text":"Undying Dusk : a video game in PDF format , with a gameplay based on exploration and logic puzzles, in the tradition of dungeon crawlers OpenDroneMap : a command line toolkit for processing aerial drone imagery OpenSfM : a Structure from Motion library, serving as a processing pipeline for reconstructing camera poses and 3D scenes from multiple images RPA Framework : libraries and tools for Robotic Process Automation (RPA), designed to be used with both Robot Framework Concordia : a platform developed by the US Library of Congress for crowdsourcing transcription and tagging of text in digitized images wudududu/extract-video-ppt : create a one-page-per-frame PDF from a video or PPT file. fpdf2 also has a demo script to convert a GIF into a one-page-per-frame PDF: gif2pdf.py csv2pdf : convert CSV files to PDF files easily","title":"They use fpdf2"},{"location":"index.html#related","text":"Looking for alternative libraries? Check out this detailed list of PDF-related Python libs by Patrick Maupin ( pdfrw author) . There is also borb , pikepdf , WeasyPrint & pydyf . We have some documentations about combining fpdf2 with borb & pdfrw . Create PDFs with Python : a series of tutorial videos by bvalgard digidigital/Extensions-and-Scripts-for-pyFPDF-fpdf2 : scripts ported from PHP to add transpareny to elements of the page or part of an image, allow to write circular text, draw pie charts and bar diagrams, embed JavaScript, draw rectangles with rounded corners, draw a star shape, restrict the rendering of some elements to screen or printout, paint linear / radial / multi-color gradients gradients, add stamps & watermarks, write sheared text...","title":"Related"},{"location":"index.html#misc","text":"Release notes: CHANGELOG.md This library could only exist thanks to the dedication of many volunteers around the world: list & map of contributors You can download an offline PDF version of this manual: fpdf2-manual.pdf","title":"Misc"},{"location":"Annotations.html","text":"Annotations The PDF format allows to add various annotations to a document. Text annotations They are rendered this way by Sumatra PDF reader: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . text ( x = 60 , y = 140 , txt = \"Some text.\" ) pdf . text_annotation ( x = 100 , y = 130 , text = \"This is a text annotation.\" , ) pdf . output ( \"text_annotation.pdf\" ) Method documentation: FPDF.text_annotation Highlights from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) with pdf . highlight ( \"Highlight comment\" ): pdf . text ( 50 , 50 , \"Line 1\" ) pdf . set_y ( 50 ) pdf . multi_cell ( w = 30 , txt = \"Line 2\" ) pdf . cell ( w = 60 , txt = \"Not highlighted\" , border = 1 ) pdf . output ( \"highlighted.pdf\" ) Rendering by Sumatra PDF reader: Method documentation: FPDF.highlight The appearance of the \"highlight effect\" can be controlled through the type argument: it can be Highlight (default), Underline , Squiggly or StrikeOut . Ink annotations Those annotations allow to draw paths around parts of a document to highlight them: from fpdf import FPDF pdf = FPDF () pdf . ink_annotation ([( 100 , 200 ), ( 200 , 100 ), ( 300 , 200 ), ( 200 , 300 ), ( 100 , 200 )], title = \"Lucas\" , contents = \"Hello world!\" ) pdf . output ( \"ink_annotation_demo.pdf\" ) Rendering by Firefox internal PDF viewer: Method documentation: FPDF.ink_annotation Named actions The four standard PDF named actions provide some basic navigation relative to the current page: NextPage , PrevPage , FirstPage and LastPage . from fpdf import FPDF from fpdf.actions import NamedAction pdf = FPDF () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . add_page () pdf . text ( x = 80 , y = 140 , txt = \"First page\" ) pdf . add_page () pdf . underline = True for x , y , named_action in (( 40 , 80 , \"NextPage\" ), ( 120 , 80 , \"PrevPage\" ), ( 40 , 200 , \"FirstPage\" ), ( 120 , 200 , \"LastPage\" )): pdf . text ( x = x , y = y , txt = named_action ) pdf . add_action ( NamedAction ( named_action ), x = x , y = y - pdf . font_size , w = pdf . get_string_width ( named_action ), h = pdf . font_size , ) pdf . underline = False pdf . add_page () pdf . text ( x = 80 , y = 140 , txt = \"Last page\" ) pdf . output ( \"named_actions.pdf\" ) Launch actions Used to launch an application or open or print a document: from fpdf import FPDF from fpdf.actions import LaunchAction pdf = FPDF () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . add_page () x , y , text = 80 , 140 , \"Launch action\" pdf . text ( x = x , y = y , txt = text ) pdf . add_action ( LaunchAction ( \"another_file_in_same_directory.pdf\" ), x = x , y = y - pdf . font_size , w = pdf . get_string_width ( text ), h = pdf . font_size , ) pdf . output ( \"launch_action.pdf\" )","title":"Annotations"},{"location":"Annotations.html#annotations","text":"The PDF format allows to add various annotations to a document.","title":"Annotations"},{"location":"Annotations.html#text-annotations","text":"They are rendered this way by Sumatra PDF reader: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . text ( x = 60 , y = 140 , txt = \"Some text.\" ) pdf . text_annotation ( x = 100 , y = 130 , text = \"This is a text annotation.\" , ) pdf . output ( \"text_annotation.pdf\" ) Method documentation: FPDF.text_annotation","title":"Text annotations"},{"location":"Annotations.html#highlights","text":"from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) with pdf . highlight ( \"Highlight comment\" ): pdf . text ( 50 , 50 , \"Line 1\" ) pdf . set_y ( 50 ) pdf . multi_cell ( w = 30 , txt = \"Line 2\" ) pdf . cell ( w = 60 , txt = \"Not highlighted\" , border = 1 ) pdf . output ( \"highlighted.pdf\" ) Rendering by Sumatra PDF reader: Method documentation: FPDF.highlight The appearance of the \"highlight effect\" can be controlled through the type argument: it can be Highlight (default), Underline , Squiggly or StrikeOut .","title":"Highlights"},{"location":"Annotations.html#ink-annotations","text":"Those annotations allow to draw paths around parts of a document to highlight them: from fpdf import FPDF pdf = FPDF () pdf . ink_annotation ([( 100 , 200 ), ( 200 , 100 ), ( 300 , 200 ), ( 200 , 300 ), ( 100 , 200 )], title = \"Lucas\" , contents = \"Hello world!\" ) pdf . output ( \"ink_annotation_demo.pdf\" ) Rendering by Firefox internal PDF viewer: Method documentation: FPDF.ink_annotation","title":"Ink annotations"},{"location":"Annotations.html#named-actions","text":"The four standard PDF named actions provide some basic navigation relative to the current page: NextPage , PrevPage , FirstPage and LastPage . from fpdf import FPDF from fpdf.actions import NamedAction pdf = FPDF () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . add_page () pdf . text ( x = 80 , y = 140 , txt = \"First page\" ) pdf . add_page () pdf . underline = True for x , y , named_action in (( 40 , 80 , \"NextPage\" ), ( 120 , 80 , \"PrevPage\" ), ( 40 , 200 , \"FirstPage\" ), ( 120 , 200 , \"LastPage\" )): pdf . text ( x = x , y = y , txt = named_action ) pdf . add_action ( NamedAction ( named_action ), x = x , y = y - pdf . font_size , w = pdf . get_string_width ( named_action ), h = pdf . font_size , ) pdf . underline = False pdf . add_page () pdf . text ( x = 80 , y = 140 , txt = \"Last page\" ) pdf . output ( \"named_actions.pdf\" )","title":"Named actions"},{"location":"Annotations.html#launch-actions","text":"Used to launch an application or open or print a document: from fpdf import FPDF from fpdf.actions import LaunchAction pdf = FPDF () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . add_page () x , y , text = 80 , 140 , \"Launch action\" pdf . text ( x = x , y = y , txt = text ) pdf . add_action ( LaunchAction ( \"another_file_in_same_directory.pdf\" ), x = x , y = y - pdf . font_size , w = pdf . get_string_width ( text ), h = pdf . font_size , ) pdf . output ( \"launch_action.pdf\" )","title":"Launch actions"},{"location":"Barcodes.html","text":"Barcodes Code 39 Here is an example on how to generate a Code 39 barcode: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . code39 ( \"*fpdf2*\" , x = 30 , y = 50 , w = 4 , h = 20 ) pdf . output ( \"code39.pdf\" ) Output preview: Interleaved 2 of 5 Here is an example on how to generate an Interleaved 2 of 5 barcode: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . interleaved2of5 ( \"1337\" , x = 50 , y = 50 , w = 4 , h = 20 ) pdf . output ( \"interleaved2of5.pdf\" ) Output preview: PDF-417 Here is an example on how to generate a PDF-417 barcode using the pdf417 lib: from fpdf import FPDF from pdf417 import encode , render_image pdf = FPDF () pdf . add_page () img = render_image ( encode ( \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam.\" )) pdf . image ( img , x = 10 , y = 50 ) pdf . output ( \"pdf417.pdf\" ) Output preview: QRCode Here is an example on how to generate a QR Code using the python-qrcode lib: from fpdf import FPDF import qrcode pdf = FPDF () pdf . add_page () img = qrcode . make ( \"fpdf2\" ) pdf . image ( img . get_image (), x = 50 , y = 50 ) pdf . output ( \"qrcode.pdf\" ) Output preview: DataMatrix fpdf2 can be combined with the pystrich library to generate DataMatrix barcodes : pystrich generates pilimages, which can then be inserted into the PDF file via the FPDF.image() method. from fpdf import FPDF from pystrich.datamatrix import DataMatrixEncoder , DataMatrixRenderer # Define the properties of the barcode positionX = 10 positionY = 10 width = 57 height = 57 cellsize = 5 # Prepare the datamatrix renderer that will be used to generate the pilimage encoder = DataMatrixEncoder ( \"[Text to be converted to a datamatrix barcode]\" ) encoder . width = width encoder . height = height renderer = DataMatrixRenderer ( encoder . matrix , encoder . regions ) # Generate a pilimage and move it into the memory stream img = renderer . get_pilimage ( cellsize ) # Draw the barcode image into a PDF file pdf = FPDF () pdf . add_page () pdf . image ( img , positionX , positionY , width , height ) Extend FPDF with a datamatrix() method The code above could be added to the FPDF class as an extension method in the following way: from fpdf import FPDF from pystrich.datamatrix import DataMatrixEncoder , DataMatrixRenderer class PDF ( FPDF ): def datamatrix ( self , text , w , h = None , x = None , y = None , cellsize = 5 ): if x is None : x = self . x if y is None : y = self . y if h is None : h = w encoder = DataMatrixEncoder ( text ) encoder . width = w encoder . height = h renderer = DataMatrixRenderer ( encoder . matrix , encoder . regions ) img = renderer . get_pilimage ( cellsize ) self . image ( img , x , y , w , h ) # Usage example: pdf = PDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . datamatrix ( \"Hello world!\" , w = 100 ) pdf . output ( \"datamatrix.pdf\" )","title":"Barcodes"},{"location":"Barcodes.html#barcodes","text":"","title":"Barcodes"},{"location":"Barcodes.html#code-39","text":"Here is an example on how to generate a Code 39 barcode: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . code39 ( \"*fpdf2*\" , x = 30 , y = 50 , w = 4 , h = 20 ) pdf . output ( \"code39.pdf\" ) Output preview:","title":"Code 39"},{"location":"Barcodes.html#interleaved-2-of-5","text":"Here is an example on how to generate an Interleaved 2 of 5 barcode: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . interleaved2of5 ( \"1337\" , x = 50 , y = 50 , w = 4 , h = 20 ) pdf . output ( \"interleaved2of5.pdf\" ) Output preview:","title":"Interleaved 2 of 5"},{"location":"Barcodes.html#pdf-417","text":"Here is an example on how to generate a PDF-417 barcode using the pdf417 lib: from fpdf import FPDF from pdf417 import encode , render_image pdf = FPDF () pdf . add_page () img = render_image ( encode ( \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam.\" )) pdf . image ( img , x = 10 , y = 50 ) pdf . output ( \"pdf417.pdf\" ) Output preview:","title":"PDF-417"},{"location":"Barcodes.html#qrcode","text":"Here is an example on how to generate a QR Code using the python-qrcode lib: from fpdf import FPDF import qrcode pdf = FPDF () pdf . add_page () img = qrcode . make ( \"fpdf2\" ) pdf . image ( img . get_image (), x = 50 , y = 50 ) pdf . output ( \"qrcode.pdf\" ) Output preview:","title":"QRCode"},{"location":"Barcodes.html#datamatrix","text":"fpdf2 can be combined with the pystrich library to generate DataMatrix barcodes : pystrich generates pilimages, which can then be inserted into the PDF file via the FPDF.image() method. from fpdf import FPDF from pystrich.datamatrix import DataMatrixEncoder , DataMatrixRenderer # Define the properties of the barcode positionX = 10 positionY = 10 width = 57 height = 57 cellsize = 5 # Prepare the datamatrix renderer that will be used to generate the pilimage encoder = DataMatrixEncoder ( \"[Text to be converted to a datamatrix barcode]\" ) encoder . width = width encoder . height = height renderer = DataMatrixRenderer ( encoder . matrix , encoder . regions ) # Generate a pilimage and move it into the memory stream img = renderer . get_pilimage ( cellsize ) # Draw the barcode image into a PDF file pdf = FPDF () pdf . add_page () pdf . image ( img , positionX , positionY , width , height )","title":"DataMatrix"},{"location":"Barcodes.html#extend-fpdf-with-a-datamatrix-method","text":"The code above could be added to the FPDF class as an extension method in the following way: from fpdf import FPDF from pystrich.datamatrix import DataMatrixEncoder , DataMatrixRenderer class PDF ( FPDF ): def datamatrix ( self , text , w , h = None , x = None , y = None , cellsize = 5 ): if x is None : x = self . x if y is None : y = self . y if h is None : h = w encoder = DataMatrixEncoder ( text ) encoder . width = w encoder . height = h renderer = DataMatrixRenderer ( encoder . matrix , encoder . regions ) img = renderer . get_pilimage ( cellsize ) self . image ( img , x , y , w , h ) # Usage example: pdf = PDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . datamatrix ( \"Hello world!\" , w = 100 ) pdf . output ( \"datamatrix.pdf\" )","title":"Extend FPDF with a datamatrix() method"},{"location":"DatabaseStorage.html","text":"Database storage SQLAlchemy The following snippet demonstrates how to store PDFs built with fpdf2 in a database, an then retrieve them, using SQLAlchemy : from fpdf import FPDF from sqlalchemy import create_engine , Column , Integer , LargeBinary , String from sqlalchemy.orm import declarative_base , sessionmaker Base = declarative_base () class User ( Base ): __tablename__ = 'users' id = Column ( Integer , primary_key = True ) name = Column ( String ( 50 )) pdf = Column ( LargeBinary ) engine = create_engine ( 'sqlite:///:memory:' , echo = True ) Base . metadata . create_all ( engine ) pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"My name is Bobby\" ) new_user = User ( name = \"Bobby\" , pdf = pdf . output ()) Session = sessionmaker ( bind = engine ) session = Session () session . add ( new_user ) user = session . query ( User ) . filter_by ( name = \"Bobby\" ) . first () with open ( \"user.pdf\" , \"wb\" ) as pdf_file : pdf_file . write ( user . pdf ) Note that storing large binary data in a database is usually not recommended... You might be better off dynamically generating your PDFs from structured data in your database.","title":"Database storage"},{"location":"DatabaseStorage.html#database-storage","text":"","title":"Database storage"},{"location":"DatabaseStorage.html#sqlalchemy","text":"The following snippet demonstrates how to store PDFs built with fpdf2 in a database, an then retrieve them, using SQLAlchemy : from fpdf import FPDF from sqlalchemy import create_engine , Column , Integer , LargeBinary , String from sqlalchemy.orm import declarative_base , sessionmaker Base = declarative_base () class User ( Base ): __tablename__ = 'users' id = Column ( Integer , primary_key = True ) name = Column ( String ( 50 )) pdf = Column ( LargeBinary ) engine = create_engine ( 'sqlite:///:memory:' , echo = True ) Base . metadata . create_all ( engine ) pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"My name is Bobby\" ) new_user = User ( name = \"Bobby\" , pdf = pdf . output ()) Session = sessionmaker ( bind = engine ) session = Session () session . add ( new_user ) user = session . query ( User ) . filter_by ( name = \"Bobby\" ) . first () with open ( \"user.pdf\" , \"wb\" ) as pdf_file : pdf_file . write ( user . pdf ) Note that storing large binary data in a database is usually not recommended... You might be better off dynamically generating your PDFs from structured data in your database.","title":"SQLAlchemy"},{"location":"Development.html","text":"Development This page has summary information about developing the PyPDF library. Development History Usage Repository structure Installing fpdf2 from a local git repository Code auto-formatting Linting Pre-commit hook Testing Running tests Why is a test failing? assert_pdf_equal & writing new tests GitHub pipeline Release checklist Documentation PDF spec & new features History This project, fpdf2 is a fork of the PyFPDF project, which can be found on GitHub at reingart/pyfpdf but has been inactive since January of 2018. About the original PyFPDF lib: This project started as a Python fork of the FPDF PHP library, ported to Python by Max Pat in 2006: http://www.fpdf.org/dl.php?id=94 . Later, code for native reading TTF fonts was added. The project aim is to keep the library up to date, to fulfill the goals of its original roadmap and provide a general overhaul of the codebase to address technical debt keeping features from being added and bugs to be eradicated. Until 2015 the code was developed at Google Code : you can still access the old issues , and old wiki . As of version 2.5.4 , fpdf2 is fully backward compatible with PyFPDF, with the exception of one minor point: for the cell() method , the default value of h has changed. It used to be 0 and is now set to the current value of FPDF.font_size . Usage PyPI download stats - Downloads per release on Pepy packages using fpdf2 can be listed using GitHub Dependency graph: Dependents , Wheelodex or Watchman Pypi . Some are also listed on its libraries.io page . Repository structure .github/ - GitHub Actions configuration docs/ - documentation folder fpdf/ - library sources scripts/ - utilities to validate PDF files & publish the package on Pypi test/ - non-regression tests tutorial/ - tutorials (see also Tutorial ) README.md - Github and PyPI ReadMe CHANGELOG.md - details of each release content LICENSE - code license information CODEOWNERS - define individuals or teams responsible for code in this repository CONTRIBUTORS.md - the people who helped build this library \u2764\ufe0f setup.cfg , setup.py , MANIFEST.in - packaging configuration to publish a package on Pypi mkdocs.yml - configuration for MkDocs tox.ini - configuration for Tox .banditrc.yml - configuration for bandit .pylintrc - configuration for Pylint Installing fpdf2 from a local git repository pip install --editable $path/to/fpdf/repo This will link the installed Python package to the repository location, basically meaning any changes to the code package will get reflected directly in your environment. Code auto-formatting We use black as a code prettifier. This \"uncomprimising Python code formatter\" must be installed in your development environment in order to auto-format source code before any commit: pip install black black . # inside fpdf2 root directory Linting We use pylint as a static code analyzer to detect potential issues in the code. In case of special \"false positive\" cases, checks can be disabled locally with #pylint disable=XXX code comments, or globally through the .pylintrc file. Pre-commit hook If you use a UNIX system, you can place the following shell code in .git/hooks/pre-commit in order to always invoke black & pylint before every commit: #!/bin/bash git_cached_names () { git diff --cached --name-only --diff-filter = ACM ; } if git_cached_names | grep -q 'test.*\\.py$' && grep -IRF generate = True $( git_cached_names | grep 'test.*\\.py$' ) ; then echo '`generate=True` left remaining in a call to assert_pdf_equal' exit 1 fi modified_py_files = $( git_cached_names | grep '\\.py$' ) modified_fpdf_files = $( git_cached_names | grep '^fpdf.*\\.py$' ) # If any Python files were modified, format them: if [ -n \" $modified_py_files \" ] ; then if ! black --check $modified_py_files ; then black $modified_py_files exit 1 fi # If fpdf/ files were modified, lint them: [[ $modified_fpdf_files == \"\" ]] || pylint $modified_fpdf_files fi It will abort the commit if pylint found issues or black detect non-properly formatted code. In the later case though, it will auto-format your code and you will just have to run git commit -a again. Testing Running tests To run tests, cd into fpdf2 repository, install the dependencies using pip install -r test/requirements.txt , and run pytest . You can run a single test by executing: pytest -k function_name . Alternatively, you can use Tox . It is self-documented in the tox.ini file in the repository. To run tests for all versions of Python, simply run tox . If you do not want to run tests for all versions of python, run tox -e py39 (or your version of Python). Why is a test failing? If there are some failing tests after you made a code change, it is usually because there are difference between an expected PDF generated and the actual one produced . Calling pytest -vv will display the difference of PDF source code between the expected & actual files, but that may be difficult to understand, You can also have a look at the PDF files involved by navigating to the temporary test directory that is printed out during the test failure: =================================== FAILURES =================================== ____________________________ test_html_simple_table ____________________________ tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_html_simple_table0') This directory contains the actual & expected files, that you can vsualize to spot differences: $ ls /tmp/pytest-of-runner/pytest-0/test_html_simple_table0 actual.pdf actual_qpdf.pdf expected_qpdf.pdf assert_pdf_equal & writing new tests When a unit test generates a PDF, it is recommended to use the assert_pdf_equal utility function in order to validate the output. It relies on the very handy qpdf CLI program to generate a PDF that is easy to compare: annotated, strictly formatted, with uncompressed internal streams. You will need to have its binary in your $PATH , otherwise assert_pdf_equal will fall back to hash-based comparison. All generated PDF files (including those processed by qpdf ) will be stored in /tmp/pytest-of-USERNAME/pytest-current/NAME_OF_TEST/ . By default, three last test runs will be saved and then automatically deleted, so you can check the output in case of a failed test. In order to generate a \"reference\" PDF file, simply call assert_pdf_equal once with generate=True . GitHub pipeline A GitHub Actions pipeline is executed on every commit on the master branch, and for every Pull Request . It performs all validation steps detailed above: code checking with black , static code analysis with pylint , unit tests... Pull Requests submitted must pass all those checks in order to be approved. Ask maintainers through comments if some errors in the pipeline seem obscure to you. Release checklist complete CHANGELOG.md and add the version & date of the new release bump FPDF_VERSION in fpdf/fpdf.py git commit & git push check that the GitHub Actions succeed , and that a new release appears on Pypi perform a GitHub release , taking the description from the CHANGELOG.md . It will create a new git tag. Announce the release on r/pythonnews Documentation The standalone documentation is in the docs subfolder, written in Markdown . Building instructions are contained in the configuration file mkdocs.yml and also in .github/workflows/continuous-integration-workflow.yml . Additional documentation is generated from inline comments, and is available in the project home page . After being committed to the master branch, code documentation is automatically uploaded to GitHub Pages . There is a useful one-page example Python module with docstrings illustrating how to document code: pdoc3 example_pkg . To preview the Markdown documentation, launch a local rendering server with: mkdocs serve To preview the API documentation, launch a local rendering server with: pdoc --html -o public/ fpdf --http : PDF spec & new features The PDF 1.7 spec is available on Adobe website: PDF32000_2008.pdf . It may be intimidating at first, but while technical, it is usually quite clear and understandable. It is also a great place to look for new features for fpdf2 : there are still many PDF features that this library does not support.","title":"Development Guidelines"},{"location":"Development.html#development","text":"This page has summary information about developing the PyPDF library. Development History Usage Repository structure Installing fpdf2 from a local git repository Code auto-formatting Linting Pre-commit hook Testing Running tests Why is a test failing? assert_pdf_equal & writing new tests GitHub pipeline Release checklist Documentation PDF spec & new features","title":"Development"},{"location":"Development.html#history","text":"This project, fpdf2 is a fork of the PyFPDF project, which can be found on GitHub at reingart/pyfpdf but has been inactive since January of 2018. About the original PyFPDF lib: This project started as a Python fork of the FPDF PHP library, ported to Python by Max Pat in 2006: http://www.fpdf.org/dl.php?id=94 . Later, code for native reading TTF fonts was added. The project aim is to keep the library up to date, to fulfill the goals of its original roadmap and provide a general overhaul of the codebase to address technical debt keeping features from being added and bugs to be eradicated. Until 2015 the code was developed at Google Code : you can still access the old issues , and old wiki . As of version 2.5.4 , fpdf2 is fully backward compatible with PyFPDF, with the exception of one minor point: for the cell() method , the default value of h has changed. It used to be 0 and is now set to the current value of FPDF.font_size .","title":"History"},{"location":"Development.html#usage","text":"PyPI download stats - Downloads per release on Pepy packages using fpdf2 can be listed using GitHub Dependency graph: Dependents , Wheelodex or Watchman Pypi . Some are also listed on its libraries.io page .","title":"Usage"},{"location":"Development.html#repository-structure","text":".github/ - GitHub Actions configuration docs/ - documentation folder fpdf/ - library sources scripts/ - utilities to validate PDF files & publish the package on Pypi test/ - non-regression tests tutorial/ - tutorials (see also Tutorial ) README.md - Github and PyPI ReadMe CHANGELOG.md - details of each release content LICENSE - code license information CODEOWNERS - define individuals or teams responsible for code in this repository CONTRIBUTORS.md - the people who helped build this library \u2764\ufe0f setup.cfg , setup.py , MANIFEST.in - packaging configuration to publish a package on Pypi mkdocs.yml - configuration for MkDocs tox.ini - configuration for Tox .banditrc.yml - configuration for bandit .pylintrc - configuration for Pylint","title":"Repository structure"},{"location":"Development.html#installing-fpdf2-from-a-local-git-repository","text":"pip install --editable $path/to/fpdf/repo This will link the installed Python package to the repository location, basically meaning any changes to the code package will get reflected directly in your environment.","title":"Installing fpdf2 from a local git repository"},{"location":"Development.html#code-auto-formatting","text":"We use black as a code prettifier. This \"uncomprimising Python code formatter\" must be installed in your development environment in order to auto-format source code before any commit: pip install black black . # inside fpdf2 root directory","title":"Code auto-formatting"},{"location":"Development.html#linting","text":"We use pylint as a static code analyzer to detect potential issues in the code. In case of special \"false positive\" cases, checks can be disabled locally with #pylint disable=XXX code comments, or globally through the .pylintrc file.","title":"Linting"},{"location":"Development.html#pre-commit-hook","text":"If you use a UNIX system, you can place the following shell code in .git/hooks/pre-commit in order to always invoke black & pylint before every commit: #!/bin/bash git_cached_names () { git diff --cached --name-only --diff-filter = ACM ; } if git_cached_names | grep -q 'test.*\\.py$' && grep -IRF generate = True $( git_cached_names | grep 'test.*\\.py$' ) ; then echo '`generate=True` left remaining in a call to assert_pdf_equal' exit 1 fi modified_py_files = $( git_cached_names | grep '\\.py$' ) modified_fpdf_files = $( git_cached_names | grep '^fpdf.*\\.py$' ) # If any Python files were modified, format them: if [ -n \" $modified_py_files \" ] ; then if ! black --check $modified_py_files ; then black $modified_py_files exit 1 fi # If fpdf/ files were modified, lint them: [[ $modified_fpdf_files == \"\" ]] || pylint $modified_fpdf_files fi It will abort the commit if pylint found issues or black detect non-properly formatted code. In the later case though, it will auto-format your code and you will just have to run git commit -a again.","title":"Pre-commit hook"},{"location":"Development.html#testing","text":"","title":"Testing"},{"location":"Development.html#running-tests","text":"To run tests, cd into fpdf2 repository, install the dependencies using pip install -r test/requirements.txt , and run pytest . You can run a single test by executing: pytest -k function_name . Alternatively, you can use Tox . It is self-documented in the tox.ini file in the repository. To run tests for all versions of Python, simply run tox . If you do not want to run tests for all versions of python, run tox -e py39 (or your version of Python).","title":"Running tests"},{"location":"Development.html#why-is-a-test-failing","text":"If there are some failing tests after you made a code change, it is usually because there are difference between an expected PDF generated and the actual one produced . Calling pytest -vv will display the difference of PDF source code between the expected & actual files, but that may be difficult to understand, You can also have a look at the PDF files involved by navigating to the temporary test directory that is printed out during the test failure: =================================== FAILURES =================================== ____________________________ test_html_simple_table ____________________________ tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_html_simple_table0') This directory contains the actual & expected files, that you can vsualize to spot differences: $ ls /tmp/pytest-of-runner/pytest-0/test_html_simple_table0 actual.pdf actual_qpdf.pdf expected_qpdf.pdf","title":"Why is a test failing?"},{"location":"Development.html#assert_pdf_equal-writing-new-tests","text":"When a unit test generates a PDF, it is recommended to use the assert_pdf_equal utility function in order to validate the output. It relies on the very handy qpdf CLI program to generate a PDF that is easy to compare: annotated, strictly formatted, with uncompressed internal streams. You will need to have its binary in your $PATH , otherwise assert_pdf_equal will fall back to hash-based comparison. All generated PDF files (including those processed by qpdf ) will be stored in /tmp/pytest-of-USERNAME/pytest-current/NAME_OF_TEST/ . By default, three last test runs will be saved and then automatically deleted, so you can check the output in case of a failed test. In order to generate a \"reference\" PDF file, simply call assert_pdf_equal once with generate=True .","title":"assert_pdf_equal &amp; writing new tests"},{"location":"Development.html#github-pipeline","text":"A GitHub Actions pipeline is executed on every commit on the master branch, and for every Pull Request . It performs all validation steps detailed above: code checking with black , static code analysis with pylint , unit tests... Pull Requests submitted must pass all those checks in order to be approved. Ask maintainers through comments if some errors in the pipeline seem obscure to you.","title":"GitHub pipeline"},{"location":"Development.html#release-checklist","text":"complete CHANGELOG.md and add the version & date of the new release bump FPDF_VERSION in fpdf/fpdf.py git commit & git push check that the GitHub Actions succeed , and that a new release appears on Pypi perform a GitHub release , taking the description from the CHANGELOG.md . It will create a new git tag. Announce the release on r/pythonnews","title":"Release checklist"},{"location":"Development.html#documentation","text":"The standalone documentation is in the docs subfolder, written in Markdown . Building instructions are contained in the configuration file mkdocs.yml and also in .github/workflows/continuous-integration-workflow.yml . Additional documentation is generated from inline comments, and is available in the project home page . After being committed to the master branch, code documentation is automatically uploaded to GitHub Pages . There is a useful one-page example Python module with docstrings illustrating how to document code: pdoc3 example_pkg . To preview the Markdown documentation, launch a local rendering server with: mkdocs serve To preview the API documentation, launch a local rendering server with: pdoc --html -o public/ fpdf --http :","title":"Documentation"},{"location":"Development.html#pdf-spec-new-features","text":"The PDF 1.7 spec is available on Adobe website: PDF32000_2008.pdf . It may be intimidating at first, but while technical, it is usually quite clear and understandable. It is also a great place to look for new features for fpdf2 : there are still many PDF features that this library does not support.","title":"PDF spec &amp; new features"},{"location":"DocumentOutlineAndTableOfContents.html","text":"Document outline & table of contents Quoting Wikipedia , a table of contents is: a list, usually found on a page before the start of a written work, of its chapter or section titles or brief descriptions with their commencing page numbers. Now quoting the 6th edition of the PDF format reference (v1.7 - 2006) : A PDF document may optionally display a document outline on the screen, allowing the user to navigate interactively from one part of the document to another. The outline consists of a tree-structured hierarchy of outline items (sometimes called bookmarks), which serve as a visual table of contents to display the document\u2019s structure to the user. For example, there is how a document outline looks like in Sumatra PDF Reader : Since fpdf2.3.3 , both features are supported through the use of the start_section method, that adds an entry in the internal \"outline\" table used to render both features. Note that by default, calling start_section only records the current position in the PDF and renders nothing. However, you can configure global title styles by calling set_section_title_styles , after which call to start_section will render titles visually using the styles defined. To provide a document outline to the PDF you generate, you just have to call the start_section method for every hierarchical section you want to define. If you also want to insert a table of contents somewhere, call insert_toc_placeholder wherever you want to put it. Note that a page break will always be triggered after inserting the table of contents. With HTML When using fpdf.HTMLMixin , a document outline is automatically built. You can insert a table of content with the special <toc> tag. Custom styling of the table of contents can be achieved by overriding the render_toc method in a subclass of fpdf.html.HTML2FPDF : from fpdf import FPDF , HTMLMixin , HTML2FPDF class CustomHTML2FPDF ( HTML2FPDF ): def render_toc ( self , pdf , outline ): pdf . cell ( txt = 'Table of contents:' , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) for section in outline : pdf . cell ( txt = f '* { section . name } (page { section . page_number } )' , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) class PDF ( FPDF , HTMLMixin ): HTML2FPDF_CLASS = CustomHTML2FPDF pdf = PDF () pdf . add_page () pdf . write_html ( \"\"\"<toc></toc> <h1>Level 1</h1> <h2>Level 2</h2> <h3>Level 3</h3> <h4>Level 4</h4> <h5>Level 5</h5> <h6>Level 6</h6> <p>paragraph<p>\"\"\" ) pdf . output ( \"html_toc.pdf\" ) Code samples The regression tests are a good place to find code samples. For example, the test_simple_outline test function generates the PDF document test_simple_outline.pdf . Similarly, test_html_toc generates test_html_toc.pdf .","title":"Document outline & table of contents"},{"location":"DocumentOutlineAndTableOfContents.html#document-outline-table-of-contents","text":"Quoting Wikipedia , a table of contents is: a list, usually found on a page before the start of a written work, of its chapter or section titles or brief descriptions with their commencing page numbers. Now quoting the 6th edition of the PDF format reference (v1.7 - 2006) : A PDF document may optionally display a document outline on the screen, allowing the user to navigate interactively from one part of the document to another. The outline consists of a tree-structured hierarchy of outline items (sometimes called bookmarks), which serve as a visual table of contents to display the document\u2019s structure to the user. For example, there is how a document outline looks like in Sumatra PDF Reader : Since fpdf2.3.3 , both features are supported through the use of the start_section method, that adds an entry in the internal \"outline\" table used to render both features. Note that by default, calling start_section only records the current position in the PDF and renders nothing. However, you can configure global title styles by calling set_section_title_styles , after which call to start_section will render titles visually using the styles defined. To provide a document outline to the PDF you generate, you just have to call the start_section method for every hierarchical section you want to define. If you also want to insert a table of contents somewhere, call insert_toc_placeholder wherever you want to put it. Note that a page break will always be triggered after inserting the table of contents.","title":"Document outline &amp; table of contents"},{"location":"DocumentOutlineAndTableOfContents.html#with-html","text":"When using fpdf.HTMLMixin , a document outline is automatically built. You can insert a table of content with the special <toc> tag. Custom styling of the table of contents can be achieved by overriding the render_toc method in a subclass of fpdf.html.HTML2FPDF : from fpdf import FPDF , HTMLMixin , HTML2FPDF class CustomHTML2FPDF ( HTML2FPDF ): def render_toc ( self , pdf , outline ): pdf . cell ( txt = 'Table of contents:' , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) for section in outline : pdf . cell ( txt = f '* { section . name } (page { section . page_number } )' , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) class PDF ( FPDF , HTMLMixin ): HTML2FPDF_CLASS = CustomHTML2FPDF pdf = PDF () pdf . add_page () pdf . write_html ( \"\"\"<toc></toc> <h1>Level 1</h1> <h2>Level 2</h2> <h3>Level 3</h3> <h4>Level 4</h4> <h5>Level 5</h5> <h6>Level 6</h6> <p>paragraph<p>\"\"\" ) pdf . output ( \"html_toc.pdf\" )","title":"With HTML"},{"location":"DocumentOutlineAndTableOfContents.html#code-samples","text":"The regression tests are a good place to find code samples. For example, the test_simple_outline test function generates the PDF document test_simple_outline.pdf . Similarly, test_html_toc generates test_html_toc.pdf .","title":"Code samples"},{"location":"Drawing.html","text":"Drawing The fpdf.drawing module provides an API for composing paths out of an arbitrary sequence of straight lines and curves. This allows fairly low-level control over the graphics primitives that PDF provides, giving the user the ability to draw pretty much any vector shape on the page. The drawing API makes use of features (notably transparency and blending modes) that were introduced in PDF 1.4. Therefore, use of the features of this module will automatically set the output version to 1.4 (fpdf normally defaults to version 1.3. Because the PDF 1.4 specification was originally published in 2001, this version should be compatible with all viewers currently in general use). Getting Started The easiest way to add a drawing to the document is via fpdf.FPDF.new_path . This is a context manager that takes care of serializing the path to the document once the context is exited. Drawings follow the fpdf convention that the origin (that is, coordinate(0, 0)), is at the top-left corner of the page. The numbers specified to the various path commands are interpreted in the document units. import fpdf pdf = fpdf . FPDF ( unit = 'mm' , format = ( 10 , 10 )) pdf . add_page () with pdf . new_path () as path : path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) This example draws an hourglass shape centered on the page: view as PDF Adding Some Style Drawings can be styled, changing how they look and blend with other drawings. Styling can change the color, opacity, stroke shape, and other attributes of a drawing. Let's add some color to the above example: import fpdf pdf = fpdf . FPDF ( unit = 'mm' , format = ( 10 , 10 )) pdf . add_page () with pdf . new_path () as path : path . style . fill_color = '#A070D0' path . style . stroke_color = fpdf . drawing . gray8 ( 210 ) path . style . stroke_width = 1 path . style . stroke_opacity = 0.75 path . style . stroke_join_style = 'round' path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) If you make color choices like these, it's probably not a good idea to quit your day job to become a graphic designer. Here's what the output should look like: view as PDF Transforms And You Transforms provide the ability to manipulate the placement of points within a path without having to do any pesky math yourself. Transforms are composable using python's matrix multiplication operator ( @ ), so, for example, a transform that both rotates and scales an object can be create by matrix multiplying a rotation transform with a scaling transform. An important thing to note about transforms is that the result is order dependent, which is to say that something like performing a rotation followed by scaling will not, in the general case, result in the same output as performing the same scaling followed by the same rotation. Additionally, it's not generally possible to deconstruct a composed transformation (representing an ordered sequence of translations, scaling, rotations, shearing) back into the sequence of individual transformation functions that produced it. That's okay, because this isn't important unless you're trying to do something like animate transforms after they've been composed, which you can't do in a PDF anyway. All that said, let's take the example we've been working with for a spin (the pun is intended, you see, because we're going to rotate the drawing). Explaining the joke does make it better. An easy way to apply a transform to a path is through the path.transform property. import fpdf pdf = fpdf . FPDF ( unit = \"mm\" , format = ( 10 , 10 )) pdf . add_page () with pdf . new_path () as path : path . style . fill_color = \"#A070D0\" path . style . stroke_color = fpdf . drawing . gray8 ( 210 ) path . style . stroke_width = 1 path . style . stroke_opacity = 0.75 path . style . stroke_join_style = \"round\" path . transform = fpdf . drawing . Transform . rotation_d ( 45 ) . scale ( 0.707 ) . about ( 5 , 5 ) path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) view as PDF The transform in the above example rotates the path 45 degrees clockwise and scales it by 1/sqrt(2) around its center point. This transform could be equivalently written as: import fpdf T = fpdf . drawing . Transform T . translation ( - 5 , - 5 ) @ T . rotation_d ( 45 ) @ T . scaling ( 0.707 ) @ T . translation ( 5 , 5 ) Because all transforms operate on points relative to the origin, if we had rotated the path without first centering it on the origin, we would have rotated it partway off of the page. Similarly, the size-reduction from the scaling would have moved it closer to the origin. By bracketing the transforms with the two translations, the placement of the drawing on the page is preserved. Clipping Paths The clipping path is used to define the region that the normal path is actually painted. This can be used to create drawings that would otherwise be difficult to produce. import fpdf pdf = fpdf . FPDF ( unit = \"mm\" , format = ( 10 , 10 )) pdf . add_page () clipping_path = fpdf . drawing . ClippingPath () clipping_path . rectangle ( x = 2.5 , y = 2.5 , w = 5 , h = 5 , rx = 1 , ry = 1 ) with pdf . new_path () as path : path . style . fill_color = \"#A070D0\" path . style . stroke_color = fpdf . drawing . gray8 ( 210 ) path . style . stroke_width = 1 path . style . stroke_opacity = 0.75 path . style . stroke_join_style = \"round\" path . clipping_path = clipping_path path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) view as PDF Next Steps The presented API style is designed to make it simple to produce shapes declaratively in your Python scripts. However, paths can just as easily be created programmatically by creating instances of the fpdf.drawing.PaintedPath for paths and fpdf.drawing.GraphicsContext for groups of paths. Storing paths in intermediate objects allows reusing them and can open up more advanced use-cases. The fpdf.svg SVG converter, for example, is implemented using the fpdf.drawing interface.","title":"Drawing"},{"location":"Drawing.html#drawing","text":"The fpdf.drawing module provides an API for composing paths out of an arbitrary sequence of straight lines and curves. This allows fairly low-level control over the graphics primitives that PDF provides, giving the user the ability to draw pretty much any vector shape on the page. The drawing API makes use of features (notably transparency and blending modes) that were introduced in PDF 1.4. Therefore, use of the features of this module will automatically set the output version to 1.4 (fpdf normally defaults to version 1.3. Because the PDF 1.4 specification was originally published in 2001, this version should be compatible with all viewers currently in general use).","title":"Drawing"},{"location":"Drawing.html#getting-started","text":"The easiest way to add a drawing to the document is via fpdf.FPDF.new_path . This is a context manager that takes care of serializing the path to the document once the context is exited. Drawings follow the fpdf convention that the origin (that is, coordinate(0, 0)), is at the top-left corner of the page. The numbers specified to the various path commands are interpreted in the document units. import fpdf pdf = fpdf . FPDF ( unit = 'mm' , format = ( 10 , 10 )) pdf . add_page () with pdf . new_path () as path : path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) This example draws an hourglass shape centered on the page: view as PDF","title":"Getting Started"},{"location":"Drawing.html#adding-some-style","text":"Drawings can be styled, changing how they look and blend with other drawings. Styling can change the color, opacity, stroke shape, and other attributes of a drawing. Let's add some color to the above example: import fpdf pdf = fpdf . FPDF ( unit = 'mm' , format = ( 10 , 10 )) pdf . add_page () with pdf . new_path () as path : path . style . fill_color = '#A070D0' path . style . stroke_color = fpdf . drawing . gray8 ( 210 ) path . style . stroke_width = 1 path . style . stroke_opacity = 0.75 path . style . stroke_join_style = 'round' path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) If you make color choices like these, it's probably not a good idea to quit your day job to become a graphic designer. Here's what the output should look like: view as PDF","title":"Adding Some Style"},{"location":"Drawing.html#transforms-and-you","text":"Transforms provide the ability to manipulate the placement of points within a path without having to do any pesky math yourself. Transforms are composable using python's matrix multiplication operator ( @ ), so, for example, a transform that both rotates and scales an object can be create by matrix multiplying a rotation transform with a scaling transform. An important thing to note about transforms is that the result is order dependent, which is to say that something like performing a rotation followed by scaling will not, in the general case, result in the same output as performing the same scaling followed by the same rotation. Additionally, it's not generally possible to deconstruct a composed transformation (representing an ordered sequence of translations, scaling, rotations, shearing) back into the sequence of individual transformation functions that produced it. That's okay, because this isn't important unless you're trying to do something like animate transforms after they've been composed, which you can't do in a PDF anyway. All that said, let's take the example we've been working with for a spin (the pun is intended, you see, because we're going to rotate the drawing). Explaining the joke does make it better. An easy way to apply a transform to a path is through the path.transform property. import fpdf pdf = fpdf . FPDF ( unit = \"mm\" , format = ( 10 , 10 )) pdf . add_page () with pdf . new_path () as path : path . style . fill_color = \"#A070D0\" path . style . stroke_color = fpdf . drawing . gray8 ( 210 ) path . style . stroke_width = 1 path . style . stroke_opacity = 0.75 path . style . stroke_join_style = \"round\" path . transform = fpdf . drawing . Transform . rotation_d ( 45 ) . scale ( 0.707 ) . about ( 5 , 5 ) path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) view as PDF The transform in the above example rotates the path 45 degrees clockwise and scales it by 1/sqrt(2) around its center point. This transform could be equivalently written as: import fpdf T = fpdf . drawing . Transform T . translation ( - 5 , - 5 ) @ T . rotation_d ( 45 ) @ T . scaling ( 0.707 ) @ T . translation ( 5 , 5 ) Because all transforms operate on points relative to the origin, if we had rotated the path without first centering it on the origin, we would have rotated it partway off of the page. Similarly, the size-reduction from the scaling would have moved it closer to the origin. By bracketing the transforms with the two translations, the placement of the drawing on the page is preserved.","title":"Transforms And You"},{"location":"Drawing.html#clipping-paths","text":"The clipping path is used to define the region that the normal path is actually painted. This can be used to create drawings that would otherwise be difficult to produce. import fpdf pdf = fpdf . FPDF ( unit = \"mm\" , format = ( 10 , 10 )) pdf . add_page () clipping_path = fpdf . drawing . ClippingPath () clipping_path . rectangle ( x = 2.5 , y = 2.5 , w = 5 , h = 5 , rx = 1 , ry = 1 ) with pdf . new_path () as path : path . style . fill_color = \"#A070D0\" path . style . stroke_color = fpdf . drawing . gray8 ( 210 ) path . style . stroke_width = 1 path . style . stroke_opacity = 0.75 path . style . stroke_join_style = \"round\" path . clipping_path = clipping_path path . move_to ( 2 , 2 ) path . line_to ( 8 , 8 ) path . horizontal_line_relative ( - 6 ) path . line_relative ( 6 , - 6 ) path . close () pdf . output ( \"drawing-demo.pdf\" ) view as PDF","title":"Clipping Paths"},{"location":"Drawing.html#next-steps","text":"The presented API style is designed to make it simple to produce shapes declaratively in your Python scripts. However, paths can just as easily be created programmatically by creating instances of the fpdf.drawing.PaintedPath for paths and fpdf.drawing.GraphicsContext for groups of paths. Storing paths in intermediate objects allows reusing them and can open up more advanced use-cases. The fpdf.svg SVG converter, for example, is implemented using the fpdf.drawing interface.","title":"Next Steps"},{"location":"EmojisSymbolsDingbats.html","text":"Emojis, Symbols & Dingbats Emojis, Symbols & Dingbats Emojis Symbols Dingbats Emojis Displaying emojis requires the use of a Unicode font file. Here is an example using the DejaVu font: import fpdf pdf = fpdf . FPDF () pdf . add_font ( \"DejaVuSans\" , fname = \"DejaVuSans.ttf\" ) pdf . set_font ( \"DejaVuSans\" , size = 64 ) pdf . add_page () pdf . multi_cell ( 0 , txt = \"\" . join ([ chr ( 0x1F600 + x ) for x in range ( 68 )])) pdf . set_font_size ( 32 ) pdf . text ( 10 , 270 , \"\" . join ([ chr ( 0x1F0A0 + x ) for x in range ( 15 )])) pdf . output ( \"fonts_emoji_glyph.pdf\" ) This code produces this PDF file: fonts_emoji_glyph.pdf Symbols The Symbol font is one of the built-in fonts in the PDF format. Hence you can include its symbols very easily: import fpdf pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"symbol\" , size = 36 ) pdf . cell ( h = 16 , txt = \" \\u0022 \\u0068 \\u0024 \\u0065 \\u00ce \\u00c2 , \\u0068 / \\u0065 \\u0040 \\u00a5 \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . cell ( h = 16 , txt = \" \\u0044 \\u0046 \\u0053 \\u0057 \\u0059 \\u0061 \\u0062 \\u0063 \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . cell ( h = 16 , txt = \" \\u00a0 \\u00a7 \\u00a8 \\u00a9 \\u00aa \\u00ab \\u00ac \\u00ad \\u00ae \\u00af \\u00db \\u00dc \\u00de \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"symbol.pdf\" ) This results in: The following table will help you find which characters map to which symbol: symbol.pdf . For reference, it was built using this script: symbol.py . Dingbats The ZapfDingbats font is one of the built-in fonts in the PDF format. Hence you can include its dingbats very easily: import fpdf pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"zapfdingbats\" , size = 36 ) pdf . cell ( txt = \"+ 3 8 A r \\u00a6 } \\u00a8 \\u00a9 \\u00aa \\u00ab ~\" ) pdf . output ( \"zapfdingbat.pdf\" ) This results in: The following table will help you find which characters map to which dingbats: zapfdingbats.pdf . For reference, it was built using this script: zapfdingbats.py .","title":"Emojis, Symbols & Dingbats"},{"location":"EmojisSymbolsDingbats.html#emojis-symbols-dingbats","text":"Emojis, Symbols & Dingbats Emojis Symbols Dingbats","title":"Emojis, Symbols &amp; Dingbats"},{"location":"EmojisSymbolsDingbats.html#emojis","text":"Displaying emojis requires the use of a Unicode font file. Here is an example using the DejaVu font: import fpdf pdf = fpdf . FPDF () pdf . add_font ( \"DejaVuSans\" , fname = \"DejaVuSans.ttf\" ) pdf . set_font ( \"DejaVuSans\" , size = 64 ) pdf . add_page () pdf . multi_cell ( 0 , txt = \"\" . join ([ chr ( 0x1F600 + x ) for x in range ( 68 )])) pdf . set_font_size ( 32 ) pdf . text ( 10 , 270 , \"\" . join ([ chr ( 0x1F0A0 + x ) for x in range ( 15 )])) pdf . output ( \"fonts_emoji_glyph.pdf\" ) This code produces this PDF file: fonts_emoji_glyph.pdf","title":"Emojis"},{"location":"EmojisSymbolsDingbats.html#symbols","text":"The Symbol font is one of the built-in fonts in the PDF format. Hence you can include its symbols very easily: import fpdf pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"symbol\" , size = 36 ) pdf . cell ( h = 16 , txt = \" \\u0022 \\u0068 \\u0024 \\u0065 \\u00ce \\u00c2 , \\u0068 / \\u0065 \\u0040 \\u00a5 \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . cell ( h = 16 , txt = \" \\u0044 \\u0046 \\u0053 \\u0057 \\u0059 \\u0061 \\u0062 \\u0063 \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . cell ( h = 16 , txt = \" \\u00a0 \\u00a7 \\u00a8 \\u00a9 \\u00aa \\u00ab \\u00ac \\u00ad \\u00ae \\u00af \\u00db \\u00dc \\u00de \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"symbol.pdf\" ) This results in: The following table will help you find which characters map to which symbol: symbol.pdf . For reference, it was built using this script: symbol.py .","title":"Symbols"},{"location":"EmojisSymbolsDingbats.html#dingbats","text":"The ZapfDingbats font is one of the built-in fonts in the PDF format. Hence you can include its dingbats very easily: import fpdf pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"zapfdingbats\" , size = 36 ) pdf . cell ( txt = \"+ 3 8 A r \\u00a6 } \\u00a8 \\u00a9 \\u00aa \\u00ab ~\" ) pdf . output ( \"zapfdingbat.pdf\" ) This results in: The following table will help you find which characters map to which dingbats: zapfdingbats.pdf . For reference, it was built using this script: zapfdingbats.py .","title":"Dingbats"},{"location":"ExistingPDFs.html","text":"Existing PDFs fpdf2 cannot parse existing PDF files. However, other Python libraries can be combined with fpdf2 in order to add new content to existing PDF files. This page provides several examples of doing so using pdfrw , a great zero-dependency pure Python library dedicated to reading & writing PDFs, with numerous examples and a very clean set of classes modelling the PDF internal syntax. Adding content onto an existing PDF page import sys from fpdf import FPDF from pdfrw import PageMerge , PdfReader , PdfWriter IN_FILEPATH = sys . argv [ 1 ] OUT_FILEPATH = sys . argv [ 2 ] ON_PAGE_INDEX = 1 UNDERNEATH = False # if True, new content will be placed underneath page (painted first) def new_content (): fpdf = FPDF () fpdf . add_page () fpdf . set_font ( \"helvetica\" , size = 36 ) fpdf . text ( 50 , 50 , \"Hello!\" ) reader = PdfReader ( fdata = bytes ( fpdf . output ())) return reader . pages [ 0 ] reader = PdfReader ( IN_FILEPATH ) writer = PdfWriter () writer . pagearray = reader . Root . Pages . Kids PageMerge ( writer . pagearray [ ON_PAGE_INDEX ]) . add ( new_content (), prepend = UNDERNEATH ) . render () writer . write ( OUT_FILEPATH ) Adding a page to an existing PDF import sys from fpdf import FPDF from pdfrw import PdfReader , PdfWriter IN_FILEPATH = sys . argv [ 1 ] OUT_FILEPATH = sys . argv [ 2 ] NEW_PAGE_INDEX = 1 # set to None to append at the end def new_page (): fpdf = FPDF () fpdf . add_page () fpdf . set_font ( \"helvetica\" , size = 36 ) fpdf . text ( 50 , 50 , \"Hello!\" ) reader = PdfReader ( fdata = bytes ( fpdf . output ())) return reader . pages [ 0 ] writer = PdfWriter ( trailer = PdfReader ( IN_FILEPATH )) writer . addpage ( new_page (), at_index = NEW_PAGE_INDEX ) writer . write ( OUT_FILEPATH ) This example relies on pdfrw Pull Request #216 . Until it is merged, you can install a forked version of pdfrw including the required patch: pip install git+https://github.com/PyFPDF/pdfrw.git@addpage_at_index","title":"Existing PDFs"},{"location":"ExistingPDFs.html#existing-pdfs","text":"fpdf2 cannot parse existing PDF files. However, other Python libraries can be combined with fpdf2 in order to add new content to existing PDF files. This page provides several examples of doing so using pdfrw , a great zero-dependency pure Python library dedicated to reading & writing PDFs, with numerous examples and a very clean set of classes modelling the PDF internal syntax.","title":"Existing PDFs"},{"location":"ExistingPDFs.html#adding-content-onto-an-existing-pdf-page","text":"import sys from fpdf import FPDF from pdfrw import PageMerge , PdfReader , PdfWriter IN_FILEPATH = sys . argv [ 1 ] OUT_FILEPATH = sys . argv [ 2 ] ON_PAGE_INDEX = 1 UNDERNEATH = False # if True, new content will be placed underneath page (painted first) def new_content (): fpdf = FPDF () fpdf . add_page () fpdf . set_font ( \"helvetica\" , size = 36 ) fpdf . text ( 50 , 50 , \"Hello!\" ) reader = PdfReader ( fdata = bytes ( fpdf . output ())) return reader . pages [ 0 ] reader = PdfReader ( IN_FILEPATH ) writer = PdfWriter () writer . pagearray = reader . Root . Pages . Kids PageMerge ( writer . pagearray [ ON_PAGE_INDEX ]) . add ( new_content (), prepend = UNDERNEATH ) . render () writer . write ( OUT_FILEPATH )","title":"Adding content onto an existing PDF page"},{"location":"ExistingPDFs.html#adding-a-page-to-an-existing-pdf","text":"import sys from fpdf import FPDF from pdfrw import PdfReader , PdfWriter IN_FILEPATH = sys . argv [ 1 ] OUT_FILEPATH = sys . argv [ 2 ] NEW_PAGE_INDEX = 1 # set to None to append at the end def new_page (): fpdf = FPDF () fpdf . add_page () fpdf . set_font ( \"helvetica\" , size = 36 ) fpdf . text ( 50 , 50 , \"Hello!\" ) reader = PdfReader ( fdata = bytes ( fpdf . output ())) return reader . pages [ 0 ] writer = PdfWriter ( trailer = PdfReader ( IN_FILEPATH )) writer . addpage ( new_page (), at_index = NEW_PAGE_INDEX ) writer . write ( OUT_FILEPATH ) This example relies on pdfrw Pull Request #216 . Until it is merged, you can install a forked version of pdfrw including the required patch: pip install git+https://github.com/PyFPDF/pdfrw.git@addpage_at_index","title":"Adding a page to an existing PDF"},{"location":"FAQ.html","text":"FAQ See Project Home for an overall introduction. FAQ What is fpdf2? What is this library not? How does this library compare to ...? What does the code look like? Does this library have any framework integration? What is the development status of this library? What is the license of this library (fpdf2)? What is fpdf2? fpdf2 is a library with low-level primitives to easily generate PDF documents. This is similar to ReportLab 's graphics canvas, but with some methods to output \"fluid\" cells (\"flowables\" that can span multiple rows, pages, tables, columns, etc). It has methods (\"hooks\") that can be implemented in a subclass: headers and footers . Originally developed in PHP several years ago (as a free alternative to proprietary C libraries), it has been ported to many programming languages, including ASP, C++, Java, Pl/SQL, Ruby, Visual Basic, and of course, Python. For more information see: http://www.fpdf.org/en/links.php What is this library not ? This library is not a: charts or widgets library. But you can import PNG or JPG images, use PIL or any other library, or draw the figures yourself. \"flexible page layout engine\" like Reportlab PLATYPUS. But it can do columns, chapters, etc.; see the Tutorial . XML or object definition language like Geraldo Reports , Jasper Reports, or similar. But look at write_html for simple HTML reports and Templates for fill-in-the-blank documents. PDF text extractor, converter, splitter or similar. How does this library compare to ...? The API is geared toward giving the user access to features of the Portable Document Format as they are described in the Adobe PDF Reference Manual, this bypasses needless complexities for simpler use cases. It is small: $ du -sh fpdf 1,6M fpdf $ scc fpdf \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Language Files Lines Blanks Comments Code Complexity Python 21 16879 480 571 15828 462 It includes cell() and multi_cell() primitives to draw fluid document like invoices, listings and reports, and includes basic support for HTML rendering. Compared to other solutions, this library should be easier to use and adapt for most common documents (no need to use a page layout engine, style sheets, templates, or stories...), with full control over the generated PDF document (including advanced features and extensions). Check also the list of features on the home page . What does the code look like? Following is an example similar to the Reportlab one in the book of web2py. Note the simplified import and usage: ( http://www.web2py.com/book/default/chapter/09?search=pdf#ReportLab-and-PDF ) from fpdf import FPDF def get_me_a_pdf (): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 pdf = FPDF () pdf . add_page () pdf . set_font ( 'Times' , 'B' , 15 ) pdf . cell ( w = 210 , h = 9 , txt = title , border = 0 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' , fill = False ) pdf . set_font ( 'Times' , 'B' , 15 ) pdf . cell ( w = 0 , h = 6 , txt = heading , border = 0 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'L' , fill = False ) pdf . set_font ( 'Times' , '' , 12 ) pdf . multi_cell ( w = 0 , h = 5 , txt = text ) response . headers [ 'Content-Type' ] = 'application/pdf' return pdf . output () With Reportlab: from reportlab.platypus import * from reportlab.lib.styles import getSampleStyleSheet from reportlab.rl_config import defaultPageSize from reportlab.lib.units import inch , mm from reportlab.lib.enums import TA_LEFT , TA_RIGHT , TA_CENTER , TA_JUSTIFY from reportlab.lib import colors from uuid import uuid4 from cgi import escape import os def get_me_a_pdf (): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 styles = getSampleStyleSheet () tmpfilename = os . path . join ( request . folder , 'private' , str ( uuid4 ())) doc = SimpleDocTemplate ( tmpfilename ) story = [] story . append ( Paragraph ( escape ( title ), styles [ \"Title\" ])) story . append ( Paragraph ( escape ( heading ), styles [ \"Heading2\" ])) story . append ( Paragraph ( escape ( text ), styles [ \"Normal\" ])) story . append ( Spacer ( 1 , 2 * inch )) doc . build ( story ) data = open ( tmpfilename , \"rb\" ) . read () os . unlink ( tmpfilename ) response . headers [ 'Content-Type' ] = 'application/pdf' return data Does this library have any framework integration? Yes, if you use web2py, you can make simple HTML reports that can be viewed in a browser, or downloaded as PDF. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. Look at Web2Py for examples. What is the development status of this library? This library was improved over the years since the initial port from PHP. As of 2021, it is stable and actively maintained, with bug fixes and new features developped regularly. In contrast, write_html support is not complete, so it must be considered in beta state. What is the license of this library (fpdf2)? LGPL v3.0. Original FPDF uses a permissive license: http://www.fpdf.org/en/FAQ.php#q1 \"FPDF is released under a permissive license: there is no usage restriction. You may embed it freely in your application (commercial or not), with or without modifications.\" FPDF version 1.6's license.txt says: http://www.fpdf.org/es/dl.php?v=16&f=zip Permission is hereby granted, free of charge, to any person obtaining a copy of this software to use, copy, modify, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. The original fpdf.py library was a revision of a port by Max Pat. The original source uses the same licence: http://www.fpdf.org/dl.php?id=94 # * Software: FPDF # * Version: 1.53 # * Date: 2004-12-31 # * Author: Olivier PLATHEY # * License: Freeware # * # * You may use and modify this software as you wish. # * Ported to Python 2.4 by Max (maxpat78@yahoo.it) on 2006-05 To avoid ambiguity (and to be compatible with other free software, open source licenses), LGPL was chosen for the Google Code project (as freeware isn't listed). Some FPDF ports had chosen similar licences (wxWindows Licence for C++ port, MIT licence for Java port, etc.): http://www.fpdf.org/en/links.php Other FPDF derivatives also choose LGPL, such as sFPDF by Ian Back .","title":"FAQ"},{"location":"FAQ.html#faq","text":"See Project Home for an overall introduction. FAQ What is fpdf2? What is this library not? How does this library compare to ...? What does the code look like? Does this library have any framework integration? What is the development status of this library? What is the license of this library (fpdf2)?","title":"FAQ"},{"location":"FAQ.html#what-is-fpdf2","text":"fpdf2 is a library with low-level primitives to easily generate PDF documents. This is similar to ReportLab 's graphics canvas, but with some methods to output \"fluid\" cells (\"flowables\" that can span multiple rows, pages, tables, columns, etc). It has methods (\"hooks\") that can be implemented in a subclass: headers and footers . Originally developed in PHP several years ago (as a free alternative to proprietary C libraries), it has been ported to many programming languages, including ASP, C++, Java, Pl/SQL, Ruby, Visual Basic, and of course, Python. For more information see: http://www.fpdf.org/en/links.php","title":"What is fpdf2?"},{"location":"FAQ.html#what-is-this-library-not","text":"This library is not a: charts or widgets library. But you can import PNG or JPG images, use PIL or any other library, or draw the figures yourself. \"flexible page layout engine\" like Reportlab PLATYPUS. But it can do columns, chapters, etc.; see the Tutorial . XML or object definition language like Geraldo Reports , Jasper Reports, or similar. But look at write_html for simple HTML reports and Templates for fill-in-the-blank documents. PDF text extractor, converter, splitter or similar.","title":"What is this library not?"},{"location":"FAQ.html#how-does-this-library-compare-to","text":"The API is geared toward giving the user access to features of the Portable Document Format as they are described in the Adobe PDF Reference Manual, this bypasses needless complexities for simpler use cases. It is small: $ du -sh fpdf 1,6M fpdf $ scc fpdf \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Language Files Lines Blanks Comments Code Complexity Python 21 16879 480 571 15828 462 It includes cell() and multi_cell() primitives to draw fluid document like invoices, listings and reports, and includes basic support for HTML rendering. Compared to other solutions, this library should be easier to use and adapt for most common documents (no need to use a page layout engine, style sheets, templates, or stories...), with full control over the generated PDF document (including advanced features and extensions). Check also the list of features on the home page .","title":"How does this library compare to ...?"},{"location":"FAQ.html#what-does-the-code-look-like","text":"Following is an example similar to the Reportlab one in the book of web2py. Note the simplified import and usage: ( http://www.web2py.com/book/default/chapter/09?search=pdf#ReportLab-and-PDF ) from fpdf import FPDF def get_me_a_pdf (): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 pdf = FPDF () pdf . add_page () pdf . set_font ( 'Times' , 'B' , 15 ) pdf . cell ( w = 210 , h = 9 , txt = title , border = 0 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' , fill = False ) pdf . set_font ( 'Times' , 'B' , 15 ) pdf . cell ( w = 0 , h = 6 , txt = heading , border = 0 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'L' , fill = False ) pdf . set_font ( 'Times' , '' , 12 ) pdf . multi_cell ( w = 0 , h = 5 , txt = text ) response . headers [ 'Content-Type' ] = 'application/pdf' return pdf . output () With Reportlab: from reportlab.platypus import * from reportlab.lib.styles import getSampleStyleSheet from reportlab.rl_config import defaultPageSize from reportlab.lib.units import inch , mm from reportlab.lib.enums import TA_LEFT , TA_RIGHT , TA_CENTER , TA_JUSTIFY from reportlab.lib import colors from uuid import uuid4 from cgi import escape import os def get_me_a_pdf (): title = \"This The Doc Title\" heading = \"First Paragraph\" text = 'bla ' * 10000 styles = getSampleStyleSheet () tmpfilename = os . path . join ( request . folder , 'private' , str ( uuid4 ())) doc = SimpleDocTemplate ( tmpfilename ) story = [] story . append ( Paragraph ( escape ( title ), styles [ \"Title\" ])) story . append ( Paragraph ( escape ( heading ), styles [ \"Heading2\" ])) story . append ( Paragraph ( escape ( text ), styles [ \"Normal\" ])) story . append ( Spacer ( 1 , 2 * inch )) doc . build ( story ) data = open ( tmpfilename , \"rb\" ) . read () os . unlink ( tmpfilename ) response . headers [ 'Content-Type' ] = 'application/pdf' return data","title":"What does the code look like?"},{"location":"FAQ.html#does-this-library-have-any-framework-integration","text":"Yes, if you use web2py, you can make simple HTML reports that can be viewed in a browser, or downloaded as PDF. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. Look at Web2Py for examples.","title":"Does this library have any framework integration?"},{"location":"FAQ.html#what-is-the-development-status-of-this-library","text":"This library was improved over the years since the initial port from PHP. As of 2021, it is stable and actively maintained, with bug fixes and new features developped regularly. In contrast, write_html support is not complete, so it must be considered in beta state.","title":"What is the development status of this library?"},{"location":"FAQ.html#what-is-the-license-of-this-library-fpdf2","text":"LGPL v3.0. Original FPDF uses a permissive license: http://www.fpdf.org/en/FAQ.php#q1 \"FPDF is released under a permissive license: there is no usage restriction. You may embed it freely in your application (commercial or not), with or without modifications.\" FPDF version 1.6's license.txt says: http://www.fpdf.org/es/dl.php?v=16&f=zip Permission is hereby granted, free of charge, to any person obtaining a copy of this software to use, copy, modify, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. The original fpdf.py library was a revision of a port by Max Pat. The original source uses the same licence: http://www.fpdf.org/dl.php?id=94 # * Software: FPDF # * Version: 1.53 # * Date: 2004-12-31 # * Author: Olivier PLATHEY # * License: Freeware # * # * You may use and modify this software as you wish. # * Ported to Python 2.4 by Max (maxpat78@yahoo.it) on 2006-05 To avoid ambiguity (and to be compatible with other free software, open source licenses), LGPL was chosen for the Google Code project (as freeware isn't listed). Some FPDF ports had chosen similar licences (wxWindows Licence for C++ port, MIT licence for Java port, etc.): http://www.fpdf.org/en/links.php Other FPDF derivatives also choose LGPL, such as sFPDF by Ian Back .","title":"What is the license of this library (fpdf2)?"},{"location":"FileAttachments.html","text":"File attachments Embedded file streams Embedded file streams [allow] the contents of referenced files to be embedded directly within the body of the PDF file. This makes the PDF file a self-contained unit that can be stored or transmitted as a single entity. fpdf2 gives access to this feature through the method embed_file() : pdf = FPDF () pdf . add_page () pdf . embed_file ( __file__ , desc = \"Source Python code\" , compress = True ) pdf . output ( \"embedded_file.pdf\" ) Annotations A file attachment annotation contains a reference to a file, which typically shall be embedded in the PDF file. fpdf2 gives access to this feature through the method file_attachment_annotation() : pdf = FPDF () pdf . add_page () pdf . file_attachment_annotation ( __file__ , x = 50 , y = 50 ) pdf . output ( \"file_attachment_annotation.pdf\" ) Resulting PDF: file_attachment_annotation.pdf Browser PDF viewers do not usually display embedded files & file attachment annotations, so you may want to download this file and open it with your desktop PDF viewer in order to visualize the file attachments.","title":"File attachments"},{"location":"FileAttachments.html#file-attachments","text":"","title":"File attachments"},{"location":"FileAttachments.html#embedded-file-streams","text":"Embedded file streams [allow] the contents of referenced files to be embedded directly within the body of the PDF file. This makes the PDF file a self-contained unit that can be stored or transmitted as a single entity. fpdf2 gives access to this feature through the method embed_file() : pdf = FPDF () pdf . add_page () pdf . embed_file ( __file__ , desc = \"Source Python code\" , compress = True ) pdf . output ( \"embedded_file.pdf\" )","title":"Embedded file streams"},{"location":"FileAttachments.html#annotations","text":"A file attachment annotation contains a reference to a file, which typically shall be embedded in the PDF file. fpdf2 gives access to this feature through the method file_attachment_annotation() : pdf = FPDF () pdf . add_page () pdf . file_attachment_annotation ( __file__ , x = 50 , y = 50 ) pdf . output ( \"file_attachment_annotation.pdf\" ) Resulting PDF: file_attachment_annotation.pdf Browser PDF viewers do not usually display embedded files & file attachment annotations, so you may want to download this file and open it with your desktop PDF viewer in order to visualize the file attachments.","title":"Annotations"},{"location":"HTML.html","text":"HTML fpdf2 supports basic rendering from HTML. This is implemented by using html.parser.HTMLParser from the Python standard library. The whole HTML 5 specification is not supported, and neither is CSS, but bug reports & contributions are very welcome to improve this. cf. Supported HTML features below for details on its current limitations. For a more robust & feature-full HTML-to-PDF converter in Python, you may want to check Reportlab , WeasyPrint or borb . write_html usage example HTML rendering require the use of fpdf.HTMLMixin , that provides a new write_html method: from fpdf import FPDF , HTMLMixin class PDF ( FPDF , HTMLMixin ): pass pdf = PDF () pdf . add_page () pdf . write_html ( \"\"\" <h1>Big title</h1> <section> <h2>Section title</h2> <p><b>Hello</b> world. <u>I am</u> <i>tired</i>.</p> <p><a href=\"https://github.com/PyFPDF/fpdf2\">PyFPDF/fpdf2 GitHub repo</a></p> <p align=\"right\">right aligned text</p> <p>i am a paragraph <br />in two parts.</p> <font color=\"#00ff00\"><p>hello in green</p></font> <font size=\"7\"><p>hello small</p></font> <font face=\"helvetica\"><p>hello helvetica</p></font> <font face=\"times\"><p>hello times</p></font> </section> <section> <h2>Other section title</h2> <ul><li>unordered</li><li>list</li><li>items</li></ul> <ol><li>ordered</li><li>list</li><li>items</li></ol> <br> <br> <pre>i am preformatted text.</pre> <br> <blockquote>hello blockquote</blockquote> <table width=\"50%\"> <thead> <tr> <th width=\"30%\">ID</th> <th width=\"70%\">Name</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>Alice</td> </tr> <tr> <td>2</td> <td>Bob</td> </tr> </tbody> </table> </section> \"\"\" ) pdf . output ( \"html.pdf\" ) Supported HTML features <h1> to <h8> : headings (and align attribute) <p> : paragraphs (and align attribute) <b> , <i> , <u> : bold, italic, underline <font> : (and face , size , color attributes) <center> for aligning <a> : links (and href attribute) <img> : images (and src , width , height attributes) <ol> , <ul> , <li> : ordered, unordered and list items (can be nested) <sup> , <sub> : superscript and subscript text <table> : (and border , width attributes) <thead> : header (opens each page) <tfoot> : footer (closes each page) <tbody> : actual rows <tr> : rows (with bgcolor attribute) <th> : heading cells (with align , bgcolor , width attributes) <td> : cells (with align , bgcolor , width attributes) Notes : tables should have at least a first <th> row with a width attribute. currently table cells can only contain a single line , cf. issue 91 . Contributions are welcome to add support for multi-line text in them! \ud83d\ude0a","title":"HTML"},{"location":"HTML.html#html","text":"fpdf2 supports basic rendering from HTML. This is implemented by using html.parser.HTMLParser from the Python standard library. The whole HTML 5 specification is not supported, and neither is CSS, but bug reports & contributions are very welcome to improve this. cf. Supported HTML features below for details on its current limitations. For a more robust & feature-full HTML-to-PDF converter in Python, you may want to check Reportlab , WeasyPrint or borb .","title":"HTML"},{"location":"HTML.html#write_html-usage-example","text":"HTML rendering require the use of fpdf.HTMLMixin , that provides a new write_html method: from fpdf import FPDF , HTMLMixin class PDF ( FPDF , HTMLMixin ): pass pdf = PDF () pdf . add_page () pdf . write_html ( \"\"\" <h1>Big title</h1> <section> <h2>Section title</h2> <p><b>Hello</b> world. <u>I am</u> <i>tired</i>.</p> <p><a href=\"https://github.com/PyFPDF/fpdf2\">PyFPDF/fpdf2 GitHub repo</a></p> <p align=\"right\">right aligned text</p> <p>i am a paragraph <br />in two parts.</p> <font color=\"#00ff00\"><p>hello in green</p></font> <font size=\"7\"><p>hello small</p></font> <font face=\"helvetica\"><p>hello helvetica</p></font> <font face=\"times\"><p>hello times</p></font> </section> <section> <h2>Other section title</h2> <ul><li>unordered</li><li>list</li><li>items</li></ul> <ol><li>ordered</li><li>list</li><li>items</li></ol> <br> <br> <pre>i am preformatted text.</pre> <br> <blockquote>hello blockquote</blockquote> <table width=\"50%\"> <thead> <tr> <th width=\"30%\">ID</th> <th width=\"70%\">Name</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>Alice</td> </tr> <tr> <td>2</td> <td>Bob</td> </tr> </tbody> </table> </section> \"\"\" ) pdf . output ( \"html.pdf\" )","title":"write_html usage example"},{"location":"HTML.html#supported-html-features","text":"<h1> to <h8> : headings (and align attribute) <p> : paragraphs (and align attribute) <b> , <i> , <u> : bold, italic, underline <font> : (and face , size , color attributes) <center> for aligning <a> : links (and href attribute) <img> : images (and src , width , height attributes) <ol> , <ul> , <li> : ordered, unordered and list items (can be nested) <sup> , <sub> : superscript and subscript text <table> : (and border , width attributes) <thead> : header (opens each page) <tfoot> : footer (closes each page) <tbody> : actual rows <tr> : rows (with bgcolor attribute) <th> : heading cells (with align , bgcolor , width attributes) <td> : cells (with align , bgcolor , width attributes) Notes : tables should have at least a first <th> row with a width attribute. currently table cells can only contain a single line , cf. issue 91 . Contributions are welcome to add support for multi-line text in them! \ud83d\ude0a","title":"Supported HTML features"},{"location":"Images.html","text":"Images When rendering an image, its size on the page can be specified in several ways: explicit width and height (expressed in user units) one explicit dimension, the other being calculated automatically in order to keep the original proportions no explicit dimension, in which case the image is put at 72 dpi Note that if an image is displayed several times, only one copy is embedded in the file. Simple example from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"docs/fpdf2-logo.png\" , x = 20 , y = 60 ) pdf . output ( \"pdf-with-image.pdf\" ) By default an image is rendered with a resolution of 72 dpi, but you can control its dimension on the page using the w= & h= parameters of the image() method. Assembling images The following code snippets provide examples of some basic layouts for assembling images into PDF files. Side by side images, full height, landscape page from fpdf import FPDF pdf = FPDF ( orientation = \"landscape\" ) pdf . set_margin ( 0 ) pdf . add_page () pdf . image ( \"imgA.png\" , h = pdf . eph , w = pdf . epw / 2 ) # full page height, half page width pdf . set_y ( 0 ) pdf . image ( \"imgB.jpg\" , h = pdf . eph , w = pdf . epw / 2 , x = pdf . epw / 2 ) # full page height, half page width, right half of the page pdf . output ( \"side-by-side.pdf\" ) Blending images You can control the color blending mode of overlapping images. Valid values for blend_mode are Normal , Multiply , Screen , Overlay , Darken , Lighten , ColorDodge , ColorBurn , HardLight , SoftLight , Difference , Exclusion , Hue , Saturation , Color and Luminosity . from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"imgA.png\" , ... ) with pdf . local_context ( blend_mode = \"ColorBurn\" ): pdf . image ( \"imgB.jpg\" , ... ) pdf . output ( \"blended-images.pdf\" ) Demo of all color blend modes: blending_images.pdf Image clipping You can select only a portion of the image to render using clipping methods: rect_clip() : example code resulting PDF round_clip() : example code resulting PDF elliptic_clip() : example code resulting PDF Alternative description A textual description of the image can be provided, for accessibility purposes: pdf . image ( \"docs/fpdf2-logo.png\" , x = 20 , y = 60 , alt_text = \"Snake logo of the fpdf2 library\" ) Usage with Pillow You can perform image manipulations using the Pillow library, and easily embed the result: from fpdf import FPDF from PIL import Image pdf = FPDF () pdf . add_page () img = Image . open ( \"docs/fpdf2-logo.png\" ) img = img . crop (( 10 , 10 , 490 , 490 )) . resize (( 96 , 96 ), resample = Image . NEAREST ) pdf . image ( img , x = 80 , y = 100 ) pdf . output ( \"pdf-with-image.pdf\" ) SVG images SVG images passed to the image() method will be embedded as PDF paths : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"SVG_logo.svg\" , w = 100 ) pdf . output ( \"pdf-with-vector-image.pdf\" ) Retrieve images from URLs URLs to images can be directly passed to the image() method: pdf . image ( \"https://upload.wikimedia.org/wikipedia/commons/7/70/Example.png\" ) Image compression By default, fpdf2 will avoid altering your images : no image conversion from / to PNG / JPEG is performed. However, you can easily tell fpdf2 to convert and embed all images as JPEGs in order to reduce your PDF size: from fpdf import FPDF pdf = FPDF () pdf . set_image_filter ( \"DCTDecode\" ) pdf . add_page () pdf . image ( \"docs/fpdf2-logo.png\" , x = 20 , y = 60 ) pdf . output ( \"pdf-with-image.pdf\" ) Beware that \"flattening\" images this way will fill transparent areas of your images with color (usually black). Oversized images detection & downscaling If the resulting PDF size is a concern, you may want to check if some inserted images are oversized , meaning their resolution is unnecessarily high given the size they are displayed. There is how to enable this detection mechanism with fpdf2 : pdf . oversized_images = \"WARN\" After setting this property, a WARNING log will be displayed whenever an oversized image is inserted. fpdf2 is also able to automatically downscale such oversized images: pdf . oversized_images = \"DOWNSCALE\" After this, oversized images will be automatically resized, generating DEBUG logs like this: OVERSIZED: Generated new low-res image with name=lowres-test.png dims=(319, 451) id=2 For finer control, you can set pdf.oversized_images_ratio to set the threshold determining if an image is oversized. If the concepts of \"image compression\" or \"image resolution\" are a bit obscure for you, this article is a recommended reading: The 5 minute guide to image quality Disabling transparency By default images transparency is preserved: alpha channels are extracted and converted to an embedded SMask . This can be disabled by setting .allow_images_transparency , e.g. to allow compliance with PDF/A-1 : from fpdf import FPDF pdf = FPDF () pdf . allow_images_transparency = False pdf . set_font ( \"Helvetica\" , size = 15 ) pdf . cell ( w = pdf . epw , h = 30 , txt = \"Text behind. \" * 6 ) pdf . image ( \"docs/fpdf2-logo.png\" , x = 0 ) pdf . output ( \"pdf-including-image-without-transparency.pdf\" ) This will fill transparent areas of your images with color (usually black). cf. also documentation on controlling transparency . Sharing the image cache among FPDF instances Image parsing is often the most CPU & memory intensive step when inserting pictures in a PDF. If you create several PDF files that use the same illustrations, you can share the images cache among FPDF instances: images_cache = {} for ... # loop pdf = FPDF () pdf . images = images_cache ... # build the PDF pdf . output ( ... ) # Reset the \"usages\" count, to avoid ALL images to be inserted in subsequent PDFs: for img in images_cache . values (): img [ \"usages\" ] = 0 This recipe is valid for fpdf2 v2.5.7+. For previous versions of fpdf2 , a deepcopy of .images must be made, ( cf. issue #501 ).","title":"Images"},{"location":"Images.html#images","text":"When rendering an image, its size on the page can be specified in several ways: explicit width and height (expressed in user units) one explicit dimension, the other being calculated automatically in order to keep the original proportions no explicit dimension, in which case the image is put at 72 dpi Note that if an image is displayed several times, only one copy is embedded in the file.","title":"Images"},{"location":"Images.html#simple-example","text":"from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"docs/fpdf2-logo.png\" , x = 20 , y = 60 ) pdf . output ( \"pdf-with-image.pdf\" ) By default an image is rendered with a resolution of 72 dpi, but you can control its dimension on the page using the w= & h= parameters of the image() method.","title":"Simple example"},{"location":"Images.html#assembling-images","text":"The following code snippets provide examples of some basic layouts for assembling images into PDF files.","title":"Assembling images"},{"location":"Images.html#side-by-side-images-full-height-landscape-page","text":"from fpdf import FPDF pdf = FPDF ( orientation = \"landscape\" ) pdf . set_margin ( 0 ) pdf . add_page () pdf . image ( \"imgA.png\" , h = pdf . eph , w = pdf . epw / 2 ) # full page height, half page width pdf . set_y ( 0 ) pdf . image ( \"imgB.jpg\" , h = pdf . eph , w = pdf . epw / 2 , x = pdf . epw / 2 ) # full page height, half page width, right half of the page pdf . output ( \"side-by-side.pdf\" )","title":"Side by side images, full height, landscape page"},{"location":"Images.html#blending-images","text":"You can control the color blending mode of overlapping images. Valid values for blend_mode are Normal , Multiply , Screen , Overlay , Darken , Lighten , ColorDodge , ColorBurn , HardLight , SoftLight , Difference , Exclusion , Hue , Saturation , Color and Luminosity . from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"imgA.png\" , ... ) with pdf . local_context ( blend_mode = \"ColorBurn\" ): pdf . image ( \"imgB.jpg\" , ... ) pdf . output ( \"blended-images.pdf\" ) Demo of all color blend modes: blending_images.pdf","title":"Blending images"},{"location":"Images.html#image-clipping","text":"You can select only a portion of the image to render using clipping methods: rect_clip() : example code resulting PDF round_clip() : example code resulting PDF elliptic_clip() : example code resulting PDF","title":"Image clipping"},{"location":"Images.html#alternative-description","text":"A textual description of the image can be provided, for accessibility purposes: pdf . image ( \"docs/fpdf2-logo.png\" , x = 20 , y = 60 , alt_text = \"Snake logo of the fpdf2 library\" )","title":"Alternative description"},{"location":"Images.html#usage-with-pillow","text":"You can perform image manipulations using the Pillow library, and easily embed the result: from fpdf import FPDF from PIL import Image pdf = FPDF () pdf . add_page () img = Image . open ( \"docs/fpdf2-logo.png\" ) img = img . crop (( 10 , 10 , 490 , 490 )) . resize (( 96 , 96 ), resample = Image . NEAREST ) pdf . image ( img , x = 80 , y = 100 ) pdf . output ( \"pdf-with-image.pdf\" )","title":"Usage with Pillow"},{"location":"Images.html#svg-images","text":"SVG images passed to the image() method will be embedded as PDF paths : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"SVG_logo.svg\" , w = 100 ) pdf . output ( \"pdf-with-vector-image.pdf\" )","title":"SVG images"},{"location":"Images.html#retrieve-images-from-urls","text":"URLs to images can be directly passed to the image() method: pdf . image ( \"https://upload.wikimedia.org/wikipedia/commons/7/70/Example.png\" )","title":"Retrieve images from URLs"},{"location":"Images.html#image-compression","text":"By default, fpdf2 will avoid altering your images : no image conversion from / to PNG / JPEG is performed. However, you can easily tell fpdf2 to convert and embed all images as JPEGs in order to reduce your PDF size: from fpdf import FPDF pdf = FPDF () pdf . set_image_filter ( \"DCTDecode\" ) pdf . add_page () pdf . image ( \"docs/fpdf2-logo.png\" , x = 20 , y = 60 ) pdf . output ( \"pdf-with-image.pdf\" ) Beware that \"flattening\" images this way will fill transparent areas of your images with color (usually black).","title":"Image compression"},{"location":"Images.html#oversized-images-detection-downscaling","text":"If the resulting PDF size is a concern, you may want to check if some inserted images are oversized , meaning their resolution is unnecessarily high given the size they are displayed. There is how to enable this detection mechanism with fpdf2 : pdf . oversized_images = \"WARN\" After setting this property, a WARNING log will be displayed whenever an oversized image is inserted. fpdf2 is also able to automatically downscale such oversized images: pdf . oversized_images = \"DOWNSCALE\" After this, oversized images will be automatically resized, generating DEBUG logs like this: OVERSIZED: Generated new low-res image with name=lowres-test.png dims=(319, 451) id=2 For finer control, you can set pdf.oversized_images_ratio to set the threshold determining if an image is oversized. If the concepts of \"image compression\" or \"image resolution\" are a bit obscure for you, this article is a recommended reading: The 5 minute guide to image quality","title":"Oversized images detection &amp; downscaling"},{"location":"Images.html#disabling-transparency","text":"By default images transparency is preserved: alpha channels are extracted and converted to an embedded SMask . This can be disabled by setting .allow_images_transparency , e.g. to allow compliance with PDF/A-1 : from fpdf import FPDF pdf = FPDF () pdf . allow_images_transparency = False pdf . set_font ( \"Helvetica\" , size = 15 ) pdf . cell ( w = pdf . epw , h = 30 , txt = \"Text behind. \" * 6 ) pdf . image ( \"docs/fpdf2-logo.png\" , x = 0 ) pdf . output ( \"pdf-including-image-without-transparency.pdf\" ) This will fill transparent areas of your images with color (usually black). cf. also documentation on controlling transparency .","title":"Disabling transparency"},{"location":"Images.html#sharing-the-image-cache-among-fpdf-instances","text":"Image parsing is often the most CPU & memory intensive step when inserting pictures in a PDF. If you create several PDF files that use the same illustrations, you can share the images cache among FPDF instances: images_cache = {} for ... # loop pdf = FPDF () pdf . images = images_cache ... # build the PDF pdf . output ( ... ) # Reset the \"usages\" count, to avoid ALL images to be inserted in subsequent PDFs: for img in images_cache . values (): img [ \"usages\" ] = 0 This recipe is valid for fpdf2 v2.5.7+. For previous versions of fpdf2 , a deepcopy of .images must be made, ( cf. issue #501 ).","title":"Sharing the image cache among FPDF instances"},{"location":"LineBreaks.html","text":"Line breaks When using multi_cell() or write() , each time a line reaches the right extremity of the cell or a carriage return character ( \\n ) is met, a line break is issued and a new line automatically created under the current one. An automatic break is performed at the location of the nearest space or soft-hyphen ( \\u00ad ) character before the right limit. A soft-hyphen will be replaced by a normal hyphen when triggering a line break, and ignored otherwise. If the parameter print_sh=False in multi_cell() or write() is set to True , then they will print the soft-hyphen character to the document (as a normal hyphen with most fonts) instead of using it as a line break opportunity.","title":"Line breaks"},{"location":"LineBreaks.html#line-breaks","text":"When using multi_cell() or write() , each time a line reaches the right extremity of the cell or a carriage return character ( \\n ) is met, a line break is issued and a new line automatically created under the current one. An automatic break is performed at the location of the nearest space or soft-hyphen ( \\u00ad ) character before the right limit. A soft-hyphen will be replaced by a normal hyphen when triggering a line break, and ignored otherwise. If the parameter print_sh=False in multi_cell() or write() is set to True , then they will print the soft-hyphen character to the document (as a normal hyphen with most fonts) instead of using it as a line break opportunity.","title":"Line breaks"},{"location":"Links.html","text":"Links fpdf2 can generate both internal links (to other pages in the document) & hyperlinks (links to external URLs that will be opened in a browser). Hyperlink with FPDF.cell This method makes the whole cell clickable (not only the text): from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , size = 24 ) pdf . cell ( w = 40 , h = 10 , txt = \"Cell link\" , border = 1 , align = \"C\" , link = \"https://github.com/PyFPDF/fpdf2\" ) pdf . output ( \"hyperlink.pdf\" ) Hyperlink with FPDF.link The FPDF.link is a low-level method that defines a rectangular clickable area. There is an example showing how to place such rectangular link over some text: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , size = 36 ) line_height = 10 text = \"Text link\" pdf . text ( x = 0 , y = line_height , txt = text ) width = pdf . get_string_width ( text ) pdf . link ( x = 0 , y = 0 , w = width , h = line_height , link = \"https://github.com/PyFPDF/fpdf2\" ) pdf . output ( \"hyperlink.pdf\" ) Hyperlink with write_html An alternative method using fpdf.HTMLMixin : from fpdf import FPDF , HTMLMixin class PDF ( FPDF , HTMLMixin ): pass pdf = PDF () pdf . set_font_size ( 16 ) pdf . add_page () pdf . write_html ( '<a href=\"https://github.com/PyFPDF/fpdf2\">Link defined as HTML</a>' ) pdf . output ( \"hyperlink.pdf\" ) The hyperlinks defined this way will be rendered in blue with underline. Internal links Using FPDF.cell : from fpdf import FPDF pdf = FPDF () pdf . set_font ( \"helvetica\" , size = 24 ) pdf . add_page () # Displaying a full-width cell with centered text: pdf . cell ( w = pdf . epw , txt = \"Welcome on first page!\" , align = \"C\" ) pdf . add_page () link = pdf . add_link () pdf . set_link ( link , page = 1 ) pdf . cell ( txt = \"Internal link to first page\" , border = 1 , link = link ) pdf . output ( \"internal_link.pdf\" ) Similarly, FPDF.link can be used instead of FPDF.cell , however write_html does not allow to define internal links. Alternative description An optional textual description of the link can be provided, for accessibility purposes: pdf . link ( x = 0 , y = 0 , w = width , h = line_height , link = \"https://github.com/PyFPDF/fpdf2\" , alt_text = \"GitHub page for fpdf2\" )","title":"Links"},{"location":"Links.html#links","text":"fpdf2 can generate both internal links (to other pages in the document) & hyperlinks (links to external URLs that will be opened in a browser).","title":"Links"},{"location":"Links.html#hyperlink-with-fpdfcell","text":"This method makes the whole cell clickable (not only the text): from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , size = 24 ) pdf . cell ( w = 40 , h = 10 , txt = \"Cell link\" , border = 1 , align = \"C\" , link = \"https://github.com/PyFPDF/fpdf2\" ) pdf . output ( \"hyperlink.pdf\" )","title":"Hyperlink with FPDF.cell"},{"location":"Links.html#hyperlink-with-fpdflink","text":"The FPDF.link is a low-level method that defines a rectangular clickable area. There is an example showing how to place such rectangular link over some text: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , size = 36 ) line_height = 10 text = \"Text link\" pdf . text ( x = 0 , y = line_height , txt = text ) width = pdf . get_string_width ( text ) pdf . link ( x = 0 , y = 0 , w = width , h = line_height , link = \"https://github.com/PyFPDF/fpdf2\" ) pdf . output ( \"hyperlink.pdf\" )","title":"Hyperlink with FPDF.link"},{"location":"Links.html#hyperlink-with-write_html","text":"An alternative method using fpdf.HTMLMixin : from fpdf import FPDF , HTMLMixin class PDF ( FPDF , HTMLMixin ): pass pdf = PDF () pdf . set_font_size ( 16 ) pdf . add_page () pdf . write_html ( '<a href=\"https://github.com/PyFPDF/fpdf2\">Link defined as HTML</a>' ) pdf . output ( \"hyperlink.pdf\" ) The hyperlinks defined this way will be rendered in blue with underline.","title":"Hyperlink with write_html"},{"location":"Links.html#internal-links","text":"Using FPDF.cell : from fpdf import FPDF pdf = FPDF () pdf . set_font ( \"helvetica\" , size = 24 ) pdf . add_page () # Displaying a full-width cell with centered text: pdf . cell ( w = pdf . epw , txt = \"Welcome on first page!\" , align = \"C\" ) pdf . add_page () link = pdf . add_link () pdf . set_link ( link , page = 1 ) pdf . cell ( txt = \"Internal link to first page\" , border = 1 , link = link ) pdf . output ( \"internal_link.pdf\" ) Similarly, FPDF.link can be used instead of FPDF.cell , however write_html does not allow to define internal links.","title":"Internal links"},{"location":"Links.html#alternative-description","text":"An optional textual description of the link can be provided, for accessibility purposes: pdf . link ( x = 0 , y = 0 , w = width , h = line_height , link = \"https://github.com/PyFPDF/fpdf2\" , alt_text = \"GitHub page for fpdf2\" )","title":"Alternative description"},{"location":"Logging.html","text":"Logging fpdf.FPDF generates useful DEBUG logs on generated sections sizes when calling the output() method., that can help to identify what part of a PDF takes most space (fonts, images, pages...). Here is an example of setup code to display them: import logging logging . basicConfig ( format = \" %(asctime)s %(filename)s [ %(levelname)s ] %(message)s \" , datefmt = \"%H:%M:%S\" , level = logging . DEBUG ) Example output using the Tutorial first code snippet: 14:09:56 fpdf.py [DEBUG] Final doc sections size summary: 14:09:56 fpdf.py [DEBUG] - header.size: 9.0B 14:09:56 fpdf.py [DEBUG] - pages.size: 306.0B 14:09:56 fpdf.py [DEBUG] - resources.fonts.size: 101.0B 14:09:56 fpdf.py [DEBUG] - resources.images.size: 0.0B 14:09:56 fpdf.py [DEBUG] - resources.dict.size: 104.0B 14:09:56 fpdf.py [DEBUG] - info.size: 54.0B 14:09:56 fpdf.py [DEBUG] - catalog.size: 103.0B 14:09:56 fpdf.py [DEBUG] - xref.size: 169.0B 14:09:56 fpdf.py [DEBUG] - trailer.size: 60.0B","title":"Logging"},{"location":"Logging.html#logging","text":"fpdf.FPDF generates useful DEBUG logs on generated sections sizes when calling the output() method., that can help to identify what part of a PDF takes most space (fonts, images, pages...). Here is an example of setup code to display them: import logging logging . basicConfig ( format = \" %(asctime)s %(filename)s [ %(levelname)s ] %(message)s \" , datefmt = \"%H:%M:%S\" , level = logging . DEBUG ) Example output using the Tutorial first code snippet: 14:09:56 fpdf.py [DEBUG] Final doc sections size summary: 14:09:56 fpdf.py [DEBUG] - header.size: 9.0B 14:09:56 fpdf.py [DEBUG] - pages.size: 306.0B 14:09:56 fpdf.py [DEBUG] - resources.fonts.size: 101.0B 14:09:56 fpdf.py [DEBUG] - resources.images.size: 0.0B 14:09:56 fpdf.py [DEBUG] - resources.dict.size: 104.0B 14:09:56 fpdf.py [DEBUG] - info.size: 54.0B 14:09:56 fpdf.py [DEBUG] - catalog.size: 103.0B 14:09:56 fpdf.py [DEBUG] - xref.size: 169.0B 14:09:56 fpdf.py [DEBUG] - trailer.size: 60.0B","title":"Logging"},{"location":"Margins.html","text":"Margins By default a FPDF document has a 2cm margin at the bottom, and 1cm margin on the other sides. Those margins control the initial current X & Y position to render elements on a page, and also define the height limit that triggers automatic page breaks when they are enabled. Margins can be completely removed: pdf . set_margin ( 0 ) Several methods can be used to set margins: set_margin set_left_margin set_right_margin set_top_margin set_margins set_auto_page_break","title":"Margins"},{"location":"Margins.html#margins","text":"By default a FPDF document has a 2cm margin at the bottom, and 1cm margin on the other sides. Those margins control the initial current X & Y position to render elements on a page, and also define the height limit that triggers automatic page breaks when they are enabled. Margins can be completely removed: pdf . set_margin ( 0 ) Several methods can be used to set margins: set_margin set_left_margin set_right_margin set_top_margin set_margins set_auto_page_break","title":"Margins"},{"location":"Maths.html","text":"Charts & graphs Charts Using Matplotlib Before running this example, please install the required dependencies using the command below: pip install fpdf2 matplotlib Example taken from Matplotlib artist tutorial : from fpdf import FPDF from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas from matplotlib.figure import Figure import numpy as np from PIL import Image fig = Figure ( figsize = ( 6 , 4 ), dpi = 300 ) fig . subplots_adjust ( top = 0.8 ) ax1 = fig . add_subplot ( 211 ) ax1 . set_ylabel ( \"volts\" ) ax1 . set_title ( \"a sine wave\" ) t = np . arange ( 0.0 , 1.0 , 0.01 ) s = np . sin ( 2 * np . pi * t ) ( line ,) = ax1 . plot ( t , s , color = \"blue\" , lw = 2 ) # Fixing random state for reproducibility np . random . seed ( 19680801 ) ax2 = fig . add_axes ([ 0.15 , 0.1 , 0.7 , 0.3 ]) n , bins , patches = ax2 . hist ( np . random . randn ( 1000 ), 50 , facecolor = \"yellow\" , edgecolor = \"yellow\" ) ax2 . set_xlabel ( \"time (s)\" ) # Converting Figure to an image: canvas = FigureCanvas ( fig ) canvas . draw () img = Image . fromarray ( np . asarray ( canvas . buffer_rgba ())) pdf = FPDF () pdf . add_page () pdf . image ( img , w = pdf . epw ) # Make the image full width pdf . output ( \"matplotlib.pdf\" ) Result: You can also embed a figure as SVG : from fpdf import FPDF import matplotlib.pyplot as plt import numpy as np plt . figure ( figsize = [ 2 , 2 ]) x = np . arange ( 0 , 10 , 0.00001 ) y = x * np . sin ( 2 * np . pi * x ) plt . plot ( y ) plt . savefig ( \"figure.svg\" , format = \"svg\" ) pdf = FPDF () pdf . add_page () pdf . image ( \"figure.svg\" ) pdf . output ( \"doc-with-figure.pdf\" ) Using Pandas The dependencies required for the following examples can be installed using this command: pip install fpdf2 matplotlib pandas Create a plot using pandas.DataFrame.plot : from fpdf import FPDF import pandas as pd import matplotlib.pyplot as plt import io data = { \"Unemployment_Rate\" : [ 6.1 , 5.8 , 5.7 , 5.7 , 5.8 , 5.6 , 5.5 , 5.3 , 5.2 , 5.2 ], \"Stock_Index_Price\" : [ 1500 , 1520 , 1525 , 1523 , 1515 , 1540 , 1545 , 1560 , 1555 , 1565 ], } plt . figure () # Create a new figure object df = pd . DataFrame ( data , columns = [ \"Unemployment_Rate\" , \"Stock_Index_Price\" ]) df . plot ( x = \"Unemployment_Rate\" , y = \"Stock_Index_Price\" , kind = \"scatter\" ) # Converting Figure to an image: img_buf = io . BytesIO () # Create image object plt . savefig ( img_buf , dpi = 200 ) # Save the image pdf = FPDF () pdf . add_page () pdf . image ( img_buf , w = pdf . epw ) # Make the image full width pdf . output ( \"pandas.pdf\" ) img_buf . close () Result: Create a table with pandas DataFrame : from fpdf import FPDF import pandas as pd df = pd . DataFrame ( { \"First name\" : [ \"Jules\" , \"Mary\" , \"Carlson\" , \"Lucas\" ], \"Last name\" : [ \"Smith\" , \"Ramos\" , \"Banks\" , \"Cimon\" ], \"Age\" : [ 34 , 45 , 19 , 31 ], \"City\" : [ \"San Juan\" , \"Orlando\" , \"Los Angeles\" , \"Saint-Mahturin-sur-Loire\" ], } ) df = df . applymap ( str ) # Convert all data inside dataframe into string type columns = [ list ( df )] # Get list of dataframe columns rows = df . values . tolist () # Get list of dataframe rows data = columns + rows # Combine columns and rows in one list # Start pdf creating pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 10 ) line_height = pdf . font_size * 2.5 col_width = pdf . epw / 4 # distribute content evenly for row in data : for datum in row : pdf . multi_cell ( col_width , line_height , datum , border = 1 , new_y = \"TOP\" , max_line_height = pdf . font_size , ) pdf . ln ( line_height ) pdf . output ( \"table_with_cells.pdf\" ) Result: Mathematical formulas fpdf2 can only insert mathematical formula in the form of images . The following sections will explaing how to generate and embed such images. Using Google Charts API Official documentation: Google Charts Infographics - Mathematical Formulas . Example: from io import BytesIO from urllib.parse import quote from urllib.request import urlopen from fpdf import FPDF formula = \"x^n + y^n = a/b\" height = 170 url = f \"https://chart.googleapis.com/chart?cht=tx&chs= { height } &chl= { quote ( formula ) } \" with urlopen ( url ) as img_file : img = BytesIO ( img_file . read ()) pdf = FPDF () pdf . add_page () pdf . image ( img , w = 30 ) pdf . output ( \"equation-with-gcharts.pdf\" ) Result: Using Matplotlib Matplotlib can render LaTeX : Text rendering With LaTeX . Example: from fpdf import FPDF from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas from matplotlib.figure import Figure import numpy as np from PIL import Image fig = Figure ( figsize = ( 6 , 2 ), dpi = 300 ) axes = fig . gca () axes . text ( 0 , 0.5 , r \"$x^n + y^n = \\frac {a}{b} $\" , fontsize = 60 ) axes . axis ( \"off\" ) # Converting Figure to an image: canvas = FigureCanvas ( fig ) canvas . draw () img = Image . fromarray ( np . asarray ( canvas . buffer_rgba ())) pdf = FPDF () pdf . add_page () pdf . image ( img , w = 100 ) pdf . output ( \"equation-with-matplotlib.pdf\" ) Result:","title":"Charts & Graphs"},{"location":"Maths.html#charts-graphs","text":"","title":"Charts &amp; graphs"},{"location":"Maths.html#charts","text":"","title":"Charts"},{"location":"Maths.html#using-matplotlib","text":"Before running this example, please install the required dependencies using the command below: pip install fpdf2 matplotlib Example taken from Matplotlib artist tutorial : from fpdf import FPDF from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas from matplotlib.figure import Figure import numpy as np from PIL import Image fig = Figure ( figsize = ( 6 , 4 ), dpi = 300 ) fig . subplots_adjust ( top = 0.8 ) ax1 = fig . add_subplot ( 211 ) ax1 . set_ylabel ( \"volts\" ) ax1 . set_title ( \"a sine wave\" ) t = np . arange ( 0.0 , 1.0 , 0.01 ) s = np . sin ( 2 * np . pi * t ) ( line ,) = ax1 . plot ( t , s , color = \"blue\" , lw = 2 ) # Fixing random state for reproducibility np . random . seed ( 19680801 ) ax2 = fig . add_axes ([ 0.15 , 0.1 , 0.7 , 0.3 ]) n , bins , patches = ax2 . hist ( np . random . randn ( 1000 ), 50 , facecolor = \"yellow\" , edgecolor = \"yellow\" ) ax2 . set_xlabel ( \"time (s)\" ) # Converting Figure to an image: canvas = FigureCanvas ( fig ) canvas . draw () img = Image . fromarray ( np . asarray ( canvas . buffer_rgba ())) pdf = FPDF () pdf . add_page () pdf . image ( img , w = pdf . epw ) # Make the image full width pdf . output ( \"matplotlib.pdf\" ) Result: You can also embed a figure as SVG : from fpdf import FPDF import matplotlib.pyplot as plt import numpy as np plt . figure ( figsize = [ 2 , 2 ]) x = np . arange ( 0 , 10 , 0.00001 ) y = x * np . sin ( 2 * np . pi * x ) plt . plot ( y ) plt . savefig ( \"figure.svg\" , format = \"svg\" ) pdf = FPDF () pdf . add_page () pdf . image ( \"figure.svg\" ) pdf . output ( \"doc-with-figure.pdf\" )","title":"Using Matplotlib"},{"location":"Maths.html#using-pandas","text":"The dependencies required for the following examples can be installed using this command: pip install fpdf2 matplotlib pandas Create a plot using pandas.DataFrame.plot : from fpdf import FPDF import pandas as pd import matplotlib.pyplot as plt import io data = { \"Unemployment_Rate\" : [ 6.1 , 5.8 , 5.7 , 5.7 , 5.8 , 5.6 , 5.5 , 5.3 , 5.2 , 5.2 ], \"Stock_Index_Price\" : [ 1500 , 1520 , 1525 , 1523 , 1515 , 1540 , 1545 , 1560 , 1555 , 1565 ], } plt . figure () # Create a new figure object df = pd . DataFrame ( data , columns = [ \"Unemployment_Rate\" , \"Stock_Index_Price\" ]) df . plot ( x = \"Unemployment_Rate\" , y = \"Stock_Index_Price\" , kind = \"scatter\" ) # Converting Figure to an image: img_buf = io . BytesIO () # Create image object plt . savefig ( img_buf , dpi = 200 ) # Save the image pdf = FPDF () pdf . add_page () pdf . image ( img_buf , w = pdf . epw ) # Make the image full width pdf . output ( \"pandas.pdf\" ) img_buf . close () Result: Create a table with pandas DataFrame : from fpdf import FPDF import pandas as pd df = pd . DataFrame ( { \"First name\" : [ \"Jules\" , \"Mary\" , \"Carlson\" , \"Lucas\" ], \"Last name\" : [ \"Smith\" , \"Ramos\" , \"Banks\" , \"Cimon\" ], \"Age\" : [ 34 , 45 , 19 , 31 ], \"City\" : [ \"San Juan\" , \"Orlando\" , \"Los Angeles\" , \"Saint-Mahturin-sur-Loire\" ], } ) df = df . applymap ( str ) # Convert all data inside dataframe into string type columns = [ list ( df )] # Get list of dataframe columns rows = df . values . tolist () # Get list of dataframe rows data = columns + rows # Combine columns and rows in one list # Start pdf creating pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 10 ) line_height = pdf . font_size * 2.5 col_width = pdf . epw / 4 # distribute content evenly for row in data : for datum in row : pdf . multi_cell ( col_width , line_height , datum , border = 1 , new_y = \"TOP\" , max_line_height = pdf . font_size , ) pdf . ln ( line_height ) pdf . output ( \"table_with_cells.pdf\" ) Result:","title":"Using Pandas"},{"location":"Maths.html#mathematical-formulas","text":"fpdf2 can only insert mathematical formula in the form of images . The following sections will explaing how to generate and embed such images.","title":"Mathematical formulas"},{"location":"Maths.html#using-google-charts-api","text":"Official documentation: Google Charts Infographics - Mathematical Formulas . Example: from io import BytesIO from urllib.parse import quote from urllib.request import urlopen from fpdf import FPDF formula = \"x^n + y^n = a/b\" height = 170 url = f \"https://chart.googleapis.com/chart?cht=tx&chs= { height } &chl= { quote ( formula ) } \" with urlopen ( url ) as img_file : img = BytesIO ( img_file . read ()) pdf = FPDF () pdf . add_page () pdf . image ( img , w = 30 ) pdf . output ( \"equation-with-gcharts.pdf\" ) Result:","title":"Using Google Charts API"},{"location":"Maths.html#using-matplotlib_1","text":"Matplotlib can render LaTeX : Text rendering With LaTeX . Example: from fpdf import FPDF from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas from matplotlib.figure import Figure import numpy as np from PIL import Image fig = Figure ( figsize = ( 6 , 2 ), dpi = 300 ) axes = fig . gca () axes . text ( 0 , 0.5 , r \"$x^n + y^n = \\frac {a}{b} $\" , fontsize = 60 ) axes . axis ( \"off\" ) # Converting Figure to an image: canvas = FigureCanvas ( fig ) canvas . draw () img = Image . fromarray ( np . asarray ( canvas . buffer_rgba ())) pdf = FPDF () pdf . add_page () pdf . image ( img , w = 100 ) pdf . output ( \"equation-with-matplotlib.pdf\" ) Result:","title":"Using Matplotlib"},{"location":"Metadata.html","text":"Metadata The PDF specification contain two types of metadata, the newer XMP (Extensible Metadata Platform, XML-based) and older DocumentInformation dictionary. The PDF 2.0 specification removes the DocumentInformation dictionary. Currently, the following methods on fpdf.FPDF allow to set metadata information in the DocumentInformation dictionary: set_title set_lang set_subject set_author set_keywords set_producer set_creator set_creation_date set_xmp_metadata , that requires you to craft the necessary XML string For a more user-friendly API to set metadata, we recommend using pikepdf that will set both XMP & DocumentInformation metadata: import sys from datetime import datetime import pikepdf from fpdf import FPDF_VERSION with pikepdf . open ( sys . argv [ 1 ], allow_overwriting_input = True ) as pdf : with pdf . open_metadata ( set_pikepdf_as_editor = False ) as meta : meta [ \"dc:title\" ] = \"Title\" meta [ \"dc:description\" ] = \"Description\" meta [ \"dc:creator\" ] = [ \"Author1\" , \"Author2\" ] meta [ \"pdf:Keywords\" ] = \"keyword1 keyword2 keyword3\" meta [ \"pdf:Producer\" ] = f \"PyFPDF/fpdf { FPDF_VERSION } \" meta [ \"xmp:CreatorTool\" ] = __file__ meta [ \"xmp:MetadataDate\" ] = datetime . now ( datetime . utcnow () . astimezone () . tzinfo ) . isoformat () pdf . save ()","title":"Metadata"},{"location":"Metadata.html#metadata","text":"The PDF specification contain two types of metadata, the newer XMP (Extensible Metadata Platform, XML-based) and older DocumentInformation dictionary. The PDF 2.0 specification removes the DocumentInformation dictionary. Currently, the following methods on fpdf.FPDF allow to set metadata information in the DocumentInformation dictionary: set_title set_lang set_subject set_author set_keywords set_producer set_creator set_creation_date set_xmp_metadata , that requires you to craft the necessary XML string For a more user-friendly API to set metadata, we recommend using pikepdf that will set both XMP & DocumentInformation metadata: import sys from datetime import datetime import pikepdf from fpdf import FPDF_VERSION with pikepdf . open ( sys . argv [ 1 ], allow_overwriting_input = True ) as pdf : with pdf . open_metadata ( set_pikepdf_as_editor = False ) as meta : meta [ \"dc:title\" ] = \"Title\" meta [ \"dc:description\" ] = \"Description\" meta [ \"dc:creator\" ] = [ \"Author1\" , \"Author2\" ] meta [ \"pdf:Keywords\" ] = \"keyword1 keyword2 keyword3\" meta [ \"pdf:Producer\" ] = f \"PyFPDF/fpdf { FPDF_VERSION } \" meta [ \"xmp:CreatorTool\" ] = __file__ meta [ \"xmp:MetadataDate\" ] = datetime . now ( datetime . utcnow () . astimezone () . tzinfo ) . isoformat () pdf . save ()","title":"Metadata"},{"location":"PageBreaks.html","text":"Page breaks By default, fpdf2 will automatically perform page breaks whenever a cell or the text from a write() is rendered at the bottom of a page with a height greater than the page bottom margin. This behaviour can be controlled using the set_auto_page_break and accept_page_break methods. Manually trigger a page break Simply call .add_page() . Inserting the final number of pages of the document The special string {nb} will be substituted by the total number of pages on document closure. This special value can changed by calling alias_nb_pages() . will_page_break will_page_break(height) lets you know if adding an element will trigger a page break, based on its height and the current ordinate ( y position). Unbreakable sections In order to render content, like tables , with the insurance that no page break will be performed in it, on the can use the FPDF.unbreakable() context-manager: pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 16 ) line_height = pdf . font_size * 2 col_width = pdf . epw / 4 # distribute content evenly for i in range ( 4 ): # repeat table 4 times with pdf . unbreakable () as doc : for row in data : # data comes from snippets on the Tables documentation page for datum in row : doc . cell ( col_width , line_height , f \" { datum } ( { i } )\" , border = 1 ) doc . ln ( line_height ) print ( 'page_break_triggered:' , pdf . page_break_triggered ) pdf . ln ( line_height * 2 ) pdf . ( \"unbreakable_tables.pdf\" ) An alternative approach is offset_rendering() that allows to test the results of some operations on the global layout before performing them \"for real\": with pdf . offset_rendering () as dummy : # Dummy rendering: dummy . multi_cell ( ... ) if dummy . page_break_triggered : # We trigger a page break manually beforehand: pdf . add_page () # We duplicate the section header: pdf . cell ( txt = \"Appendix C\" ) # Now performing our rendering for real: pdf . multi_cell ( ... )","title":"Page breaks"},{"location":"PageBreaks.html#page-breaks","text":"By default, fpdf2 will automatically perform page breaks whenever a cell or the text from a write() is rendered at the bottom of a page with a height greater than the page bottom margin. This behaviour can be controlled using the set_auto_page_break and accept_page_break methods.","title":"Page breaks"},{"location":"PageBreaks.html#manually-trigger-a-page-break","text":"Simply call .add_page() .","title":"Manually trigger a page break"},{"location":"PageBreaks.html#inserting-the-final-number-of-pages-of-the-document","text":"The special string {nb} will be substituted by the total number of pages on document closure. This special value can changed by calling alias_nb_pages() .","title":"Inserting the final number of pages of the document"},{"location":"PageBreaks.html#will_page_break","text":"will_page_break(height) lets you know if adding an element will trigger a page break, based on its height and the current ordinate ( y position).","title":"will_page_break"},{"location":"PageBreaks.html#unbreakable-sections","text":"In order to render content, like tables , with the insurance that no page break will be performed in it, on the can use the FPDF.unbreakable() context-manager: pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 16 ) line_height = pdf . font_size * 2 col_width = pdf . epw / 4 # distribute content evenly for i in range ( 4 ): # repeat table 4 times with pdf . unbreakable () as doc : for row in data : # data comes from snippets on the Tables documentation page for datum in row : doc . cell ( col_width , line_height , f \" { datum } ( { i } )\" , border = 1 ) doc . ln ( line_height ) print ( 'page_break_triggered:' , pdf . page_break_triggered ) pdf . ln ( line_height * 2 ) pdf . ( \"unbreakable_tables.pdf\" ) An alternative approach is offset_rendering() that allows to test the results of some operations on the global layout before performing them \"for real\": with pdf . offset_rendering () as dummy : # Dummy rendering: dummy . multi_cell ( ... ) if dummy . page_break_triggered : # We trigger a page break manually beforehand: pdf . add_page () # We duplicate the section header: pdf . cell ( txt = \"Appendix C\" ) # Now performing our rendering for real: pdf . multi_cell ( ... )","title":"Unbreakable sections"},{"location":"PageFormatAndOrientation.html","text":"Page format and orientation By default, a FPDF document has a A4 format with portrait orientation. Other formats & orientation can be specified to FPDF constructor: pdf = fpdf . FPDF ( orientation = \"landscape\" , format = \"A5\" ) Currently supported formats are a3 , a4 , a5 , letter , legal or a tuple (width, height) . Additional standard formats are welcome and can be suggested through pull requests. Per-page format, orientation and background .set_page_background() lets you set a background for all pages following this call until the background is removed. The value must be of type str , io.BytesIO , PIL.Image.Image , drawing.DeviceRGB , tuple or None The following code snippet illustrates how to configure different page formats for specific pages as well as setting different backgrounds and then removing it: from fpdf import FPDF pdf = FPDF () pdf . set_font ( \"Helvetica\" ) pdf . set_page_background (( 252 , 212 , 255 )) for i in range ( 9 ): if i == 6 : pdf . set_page_background ( 'image_path.png' ) pdf . add_page ( format = ( 210 * ( 1 - i / 10 ), 297 * ( 1 - i / 10 ))) pdf . cell ( txt = str ( i )) pdf . set_page_background ( None ) pdf . add_page ( same = True ) pdf . cell ( txt = \"9\" ) pdf . output ( \"varying_format.pdf\" ) Similarly, an orientation parameter can be provided to the add_page method. Page layout & zoom level set_display_mode() allows to set the zoom level : pages can be displayed entirely on screen, occupy the full width of the window, use the real size, be scaled by a specific zooming factor or use the viewer default (configured in its Preferences menu). The page layout can also be specified: single page at a time, continuous display, two columns or viewer default. from fpdf import FPDF pdf = FPDF () pdf . set_display_mode ( zoom = \"default\" , layout = \"TWO_COLUMN_LEFT\" ) pdf . set_font ( \"helvetica\" , size = 30 ) pdf . add_page () pdf . cell ( txt = \"page 1\" ) pdf . add_page () pdf . cell ( txt = \"page 2\" ) pdf . output ( \"two-column.pdf\" ) Viewer preferences from fpdf import FPDF , ViewerPreferences pdf = FPDF () pdf . viewer_preferences = ViewerPreferences ( hide_toolbar = True , hide_menubar = True , hide_window_u_i = True , fit_window = True , center_window = True , display_doc_title = True , non_full_screen_page_mode = \"USE_OUTLINES\" , ) pdf . set_font ( \"helvetica\" , size = 30 ) pdf . add_page () pdf . cell ( txt = \"page 1\" ) pdf . add_page () pdf . cell ( txt = \"page 2\" ) pdf . output ( \"viewer-prefs.pdf\" ) Full screen from fpdf import FPDF pdf = FPDF () pdf . page_mode = \"FULL_SCREEN\" pdf . output ( \"full-screen.pdf\" )","title":"Page Format and Orientation"},{"location":"PageFormatAndOrientation.html#page-format-and-orientation","text":"By default, a FPDF document has a A4 format with portrait orientation. Other formats & orientation can be specified to FPDF constructor: pdf = fpdf . FPDF ( orientation = \"landscape\" , format = \"A5\" ) Currently supported formats are a3 , a4 , a5 , letter , legal or a tuple (width, height) . Additional standard formats are welcome and can be suggested through pull requests.","title":"Page format and orientation"},{"location":"PageFormatAndOrientation.html#per-page-format-orientation-and-background","text":".set_page_background() lets you set a background for all pages following this call until the background is removed. The value must be of type str , io.BytesIO , PIL.Image.Image , drawing.DeviceRGB , tuple or None The following code snippet illustrates how to configure different page formats for specific pages as well as setting different backgrounds and then removing it: from fpdf import FPDF pdf = FPDF () pdf . set_font ( \"Helvetica\" ) pdf . set_page_background (( 252 , 212 , 255 )) for i in range ( 9 ): if i == 6 : pdf . set_page_background ( 'image_path.png' ) pdf . add_page ( format = ( 210 * ( 1 - i / 10 ), 297 * ( 1 - i / 10 ))) pdf . cell ( txt = str ( i )) pdf . set_page_background ( None ) pdf . add_page ( same = True ) pdf . cell ( txt = \"9\" ) pdf . output ( \"varying_format.pdf\" ) Similarly, an orientation parameter can be provided to the add_page method.","title":"Per-page format, orientation and background"},{"location":"PageFormatAndOrientation.html#page-layout-zoom-level","text":"set_display_mode() allows to set the zoom level : pages can be displayed entirely on screen, occupy the full width of the window, use the real size, be scaled by a specific zooming factor or use the viewer default (configured in its Preferences menu). The page layout can also be specified: single page at a time, continuous display, two columns or viewer default. from fpdf import FPDF pdf = FPDF () pdf . set_display_mode ( zoom = \"default\" , layout = \"TWO_COLUMN_LEFT\" ) pdf . set_font ( \"helvetica\" , size = 30 ) pdf . add_page () pdf . cell ( txt = \"page 1\" ) pdf . add_page () pdf . cell ( txt = \"page 2\" ) pdf . output ( \"two-column.pdf\" )","title":"Page layout &amp; zoom level"},{"location":"PageFormatAndOrientation.html#viewer-preferences","text":"from fpdf import FPDF , ViewerPreferences pdf = FPDF () pdf . viewer_preferences = ViewerPreferences ( hide_toolbar = True , hide_menubar = True , hide_window_u_i = True , fit_window = True , center_window = True , display_doc_title = True , non_full_screen_page_mode = \"USE_OUTLINES\" , ) pdf . set_font ( \"helvetica\" , size = 30 ) pdf . add_page () pdf . cell ( txt = \"page 1\" ) pdf . add_page () pdf . cell ( txt = \"page 2\" ) pdf . output ( \"viewer-prefs.pdf\" )","title":"Viewer preferences"},{"location":"PageFormatAndOrientation.html#full-screen","text":"from fpdf import FPDF pdf = FPDF () pdf . page_mode = \"FULL_SCREEN\" pdf . output ( \"full-screen.pdf\" )","title":"Full screen"},{"location":"Presentations.html","text":"Presentations Presentation mode can usually be enabled with the CTRL + L shortcut. As of june 2021, the features described below are onored by Adobe Acrobat reader, but ignored by Sumatra PDF reader. Page display duration Pages can be associated with a \"display duration\" until when the viewer application automatically advances to the next page: from fpdf import FPDF pdf = fpdf . FPDF () pdf . set_font ( \"Helvetica\" , size = 120 ) pdf . add_page ( duration = 3 ) pdf . cell ( txt = \"Page 1\" ) pdf . page_duration = .5 pdf . add_page () pdf . cell ( txt = \"Page 2\" ) pdf . add_page () pdf . cell ( txt = \"Page 3\" ) pdf . output ( \"presentation.pdf\" ) It can also be configured globally through the page_duration FPDF property. Transitions Pages can be associated with visual transitions to use when moving from another page to the given page during a presentation: from fpdf import FPDF from fpdf.transitions import * pdf = fpdf . FPDF () pdf . set_font ( \"Helvetica\" , size = 120 ) pdf . add_page () pdf . text ( x = 40 , y = 150 , txt = \"Page 0\" ) pdf . add_page ( transition = SplitTransition ( \"V\" , \"O\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 1\" ) pdf . add_page ( transition = BlindsTransition ( \"H\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 2\" ) pdf . add_page ( transition = BoxTransition ( \"I\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 3\" ) pdf . add_page ( transition = WipeTransition ( 90 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 4\" ) pdf . add_page ( transition = DissolveTransition ()) pdf . text ( x = 40 , y = 150 , txt = \"Page 5\" ) pdf . add_page ( transition = GlitterTransition ( 315 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 6\" ) pdf . add_page ( transition = FlyTransition ( \"H\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 7\" ) pdf . add_page ( transition = PushTransition ( 270 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 8\" ) pdf . add_page ( transition = CoverTransition ( 270 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 9\" ) pdf . add_page ( transition = UncoverTransition ( 270 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 10\" ) pdf . add_page ( transition = FadeTransition ()) pdf . text ( x = 40 , y = 150 , txt = \"Page 11\" ) pdf . output ( \"transitions.pdf\" ) It can also be configured globally through the page_transition FPDF property.","title":"Presentation Mode"},{"location":"Presentations.html#presentations","text":"Presentation mode can usually be enabled with the CTRL + L shortcut. As of june 2021, the features described below are onored by Adobe Acrobat reader, but ignored by Sumatra PDF reader.","title":"Presentations"},{"location":"Presentations.html#page-display-duration","text":"Pages can be associated with a \"display duration\" until when the viewer application automatically advances to the next page: from fpdf import FPDF pdf = fpdf . FPDF () pdf . set_font ( \"Helvetica\" , size = 120 ) pdf . add_page ( duration = 3 ) pdf . cell ( txt = \"Page 1\" ) pdf . page_duration = .5 pdf . add_page () pdf . cell ( txt = \"Page 2\" ) pdf . add_page () pdf . cell ( txt = \"Page 3\" ) pdf . output ( \"presentation.pdf\" ) It can also be configured globally through the page_duration FPDF property.","title":"Page display duration"},{"location":"Presentations.html#transitions","text":"Pages can be associated with visual transitions to use when moving from another page to the given page during a presentation: from fpdf import FPDF from fpdf.transitions import * pdf = fpdf . FPDF () pdf . set_font ( \"Helvetica\" , size = 120 ) pdf . add_page () pdf . text ( x = 40 , y = 150 , txt = \"Page 0\" ) pdf . add_page ( transition = SplitTransition ( \"V\" , \"O\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 1\" ) pdf . add_page ( transition = BlindsTransition ( \"H\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 2\" ) pdf . add_page ( transition = BoxTransition ( \"I\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 3\" ) pdf . add_page ( transition = WipeTransition ( 90 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 4\" ) pdf . add_page ( transition = DissolveTransition ()) pdf . text ( x = 40 , y = 150 , txt = \"Page 5\" ) pdf . add_page ( transition = GlitterTransition ( 315 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 6\" ) pdf . add_page ( transition = FlyTransition ( \"H\" )) pdf . text ( x = 40 , y = 150 , txt = \"Page 7\" ) pdf . add_page ( transition = PushTransition ( 270 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 8\" ) pdf . add_page ( transition = CoverTransition ( 270 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 9\" ) pdf . add_page ( transition = UncoverTransition ( 270 )) pdf . text ( x = 40 , y = 150 , txt = \"Page 10\" ) pdf . add_page ( transition = FadeTransition ()) pdf . text ( x = 40 , y = 150 , txt = \"Page 11\" ) pdf . output ( \"transitions.pdf\" ) It can also be configured globally through the page_transition FPDF property.","title":"Transitions"},{"location":"SVG.html","text":"Scalable Vector Graphics (SVG) fpdf2 supports basic conversion of SVG paths into PDF paths, which can be inserted into an existing PDF document or used as the contents of a new PDF document. Not all SVGs will convert correctly. Please see the list of unsupported features for more information about what to look out for. Basic usage SVG files can be directly inserted inside a PDF file using the image() method: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"vector.svg\" ) pdf . output ( \"doc-with-svg.pdf\" ) Either the embedded .svg file must includes width and/or height attributes (absolute or relative), or some dimensions must be provided to .image() through its w= and/or h= parameters. Detailed example The following script will create a PDF that consists only of the graphics contents of the provided SVG file, filling the whole page: import fpdf svg = fpdf . svg . SVGObject . from_file ( \"my_file.svg\" ) pdf = fpdf . FPDF ( unit = \"pt\" , format = ( svg . width , svg . height )) pdf . add_page () svg . draw_to_page ( pdf ) pdf . output ( \"my_file.pdf\" ) Because this takes the PDF document size from the source SVG, it does assume that the width/height of the SVG are specified in absolute units rather than relative ones (i.e. the top-level <svg> tag has something like width=\"5cm\" and not width=50% ). In this case, if the values are percentages, they will be interpreted as their literal numeric value (i.e. 100% would be treated as 100 pt ). The next example uses transform_to_page_viewport , which will scale an SVG with a percentage based width to the pre-defined PDF page size. The converted SVG object can be returned as an fpdf.drawing.GraphicsContext collection of drawing directives for more control over how it is rendered: import fpdf svg = fpdf . svg . SVGObject . from_file ( \"my_file.svg\" ) pdf = FPDF ( unit = \"in\" , format = ( 8.5 , 11 )) pdf . add_page () # We pass align_viewbox=False because we want to perform positioning manually # after the size transform has been computed. width , height , paths = svg . transform_to_page_viewport ( pdf , align_viewbox = False ) # note: transformation order is important! This centers the svg drawing at the # origin, rotates it 90 degrees clockwise, and then repositions it to the # middle of the output page. paths . transform = paths . transform @ fpdf . drawing . Transform . translation ( - width / 2 , - height / 2 ) . rotate_d ( 90 ) . translate ( pdf . w / 2 , pdf . h / 2 ) pdf . draw_path ( paths ) pdf . output ( \"my_file.pdf\" ) Supported SVG Features groups paths basic shapes (rect, circle, ellipse, line, polyline, polygon) basic cross-references stroke & fill coloring and opacity basic stroke styling Inline CSS styling via style=\"...\" attributes. Currently Unsupported Notable SVG Features Everything not listed as supported is unsupported, which is a lot. SVG is a ridiculously complex format that has become increasingly complex as it absorbs more of the entire browser rendering stack into its specification. However, there are some pretty commonly used features that are unsupported that may cause unexpected results (up to and including a normal-looking SVG rendering as a completely blank PDF). It is very likely that off-the-shelf SVGs will not be converted fully correctly without some preprocessing. In addition to that: text/tspan/textPath symbols markers patterns gradients a lot of attributes embedded images or other content (including nested SVGs) CSS styling via <style> tags or external *.css files.","title":"SVG"},{"location":"SVG.html#scalable-vector-graphics-svg","text":"fpdf2 supports basic conversion of SVG paths into PDF paths, which can be inserted into an existing PDF document or used as the contents of a new PDF document. Not all SVGs will convert correctly. Please see the list of unsupported features for more information about what to look out for.","title":"Scalable Vector Graphics (SVG)"},{"location":"SVG.html#basic-usage","text":"SVG files can be directly inserted inside a PDF file using the image() method: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . image ( \"vector.svg\" ) pdf . output ( \"doc-with-svg.pdf\" ) Either the embedded .svg file must includes width and/or height attributes (absolute or relative), or some dimensions must be provided to .image() through its w= and/or h= parameters.","title":"Basic usage"},{"location":"SVG.html#detailed-example","text":"The following script will create a PDF that consists only of the graphics contents of the provided SVG file, filling the whole page: import fpdf svg = fpdf . svg . SVGObject . from_file ( \"my_file.svg\" ) pdf = fpdf . FPDF ( unit = \"pt\" , format = ( svg . width , svg . height )) pdf . add_page () svg . draw_to_page ( pdf ) pdf . output ( \"my_file.pdf\" ) Because this takes the PDF document size from the source SVG, it does assume that the width/height of the SVG are specified in absolute units rather than relative ones (i.e. the top-level <svg> tag has something like width=\"5cm\" and not width=50% ). In this case, if the values are percentages, they will be interpreted as their literal numeric value (i.e. 100% would be treated as 100 pt ). The next example uses transform_to_page_viewport , which will scale an SVG with a percentage based width to the pre-defined PDF page size. The converted SVG object can be returned as an fpdf.drawing.GraphicsContext collection of drawing directives for more control over how it is rendered: import fpdf svg = fpdf . svg . SVGObject . from_file ( \"my_file.svg\" ) pdf = FPDF ( unit = \"in\" , format = ( 8.5 , 11 )) pdf . add_page () # We pass align_viewbox=False because we want to perform positioning manually # after the size transform has been computed. width , height , paths = svg . transform_to_page_viewport ( pdf , align_viewbox = False ) # note: transformation order is important! This centers the svg drawing at the # origin, rotates it 90 degrees clockwise, and then repositions it to the # middle of the output page. paths . transform = paths . transform @ fpdf . drawing . Transform . translation ( - width / 2 , - height / 2 ) . rotate_d ( 90 ) . translate ( pdf . w / 2 , pdf . h / 2 ) pdf . draw_path ( paths ) pdf . output ( \"my_file.pdf\" )","title":"Detailed example"},{"location":"SVG.html#supported-svg-features","text":"groups paths basic shapes (rect, circle, ellipse, line, polyline, polygon) basic cross-references stroke & fill coloring and opacity basic stroke styling Inline CSS styling via style=\"...\" attributes.","title":"Supported SVG Features"},{"location":"SVG.html#currently-unsupported-notable-svg-features","text":"Everything not listed as supported is unsupported, which is a lot. SVG is a ridiculously complex format that has become increasingly complex as it absorbs more of the entire browser rendering stack into its specification. However, there are some pretty commonly used features that are unsupported that may cause unexpected results (up to and including a normal-looking SVG rendering as a completely blank PDF). It is very likely that off-the-shelf SVGs will not be converted fully correctly without some preprocessing. In addition to that: text/tspan/textPath symbols markers patterns gradients a lot of attributes embedded images or other content (including nested SVGs) CSS styling via <style> tags or external *.css files.","title":"Currently Unsupported Notable SVG Features"},{"location":"Shapes.html","text":"Shapes The following code snippets show examples of rendering various shapes. Lines Using line() to draw a thin plain orange line: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_draw_color ( r = 255 , g = 128 , b = 0 ) pdf . line ( x1 = 50 , y1 = 50 , x2 = 150 , y2 = 100 ) pdf . output ( \"orange_plain_line.pdf\" ) Drawing a dashed light blue line: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_draw_color ( r = 0 , g = 128 , b = 255 ) pdf . set_dash_pattern ( dash = 2 , gap = 3 ) pdf . line ( x1 = 50 , y1 = 50 , x2 = 150 , y2 = 100 ) pdf . output ( \"blue_dashed_line.pdf\" ) Circle Using circle() to draw a disc filled in pink with a grey outline: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_draw_color ( 240 ) pdf . set_fill_color ( r = 230 , g = 30 , b = 180 ) pdf . circle ( x = 50 , y = 50 , r = 50 , style = \"FD\" ) pdf . output ( \"circle.pdf\" ) Ellipse Using ellipse() , filled in grey with a pink outline: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_draw_color ( r = 230 , g = 30 , b = 180 ) pdf . set_fill_color ( 240 ) pdf . ellipse ( x = 50 , y = 50 , w = 100 , h = 50 , style = \"FD\" ) pdf . output ( \"ellipse.pdf\" ) Rectangle Using rect() to draw nested squares: from fpdf import FPDF pdf = FPDF () pdf . add_page () for i in range ( 15 ): pdf . set_fill_color ( 255 - 15 * i ) pdf . rect ( x = 5 + 5 * i , y = 5 + 5 * i , w = 200 - 10 * i , h = 200 - 10 * i , style = \"FD\" ) pdf . output ( \"squares.pdf\" ) Using rect() to draw rectangles with round corners: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_draw_color ( 200 ) y = 10 pdf . rect ( 60 , y , 33 , 28 , round_corners = True , style = \"D\" ) pdf . set_fill_color ( 0 , 255 , 0 ) pdf . rect ( 100 , y , 50 , 10 , round_corners = ( \"BOTTOM_RIGHT\" ), style = \"DF\" ) pdf . set_fill_color ( 255 , 255 , 0 ) pdf . rect ( 160 , y , 10 , 10 , round_corners = ( \"TOP_LEFT\" , \"BOTTOM_LEFT\" ), style = \"F\" ) pdf . output ( \"round_corners_rectangles.pdf\" ) Polygon Using polygon() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) coords = (( 100 , 0 ), ( 5 , 69 ), ( 41 , 181 ), ( 159 , 181 ), ( 195 , 69 )) pdf . polygon ( coords , style = \"DF\" ) pdf . output ( \"polygon.pdf\" ) Arc Using arc() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) pdf . arc ( x = 75 , y = 75 , a = 25 , b = 25 , start_angle = 90 , end_angle = 260 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 0 , b = 255 ) pdf . arc ( x = 105 , y = 75 , a = 25 , b = 50 , start_angle = 180 , end_angle = 360 , style = \"FD\" ) pdf . set_fill_color ( r = 0 , g = 255 , b = 0 ) pdf . arc ( x = 135 , y = 75 , a = 25 , b = 25 , start_angle = 0 , end_angle = 130 , style = \"FD\" ) pdf . output ( \"arc.pdf\" ) Solid arc Using solid_arc() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) pdf . solid_arc ( x = 75 , y = 75 , a = 25 , b = 25 , start_angle = 90 , end_angle = 260 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 0 , b = 255 ) pdf . solid_arc ( x = 105 , y = 75 , a = 25 , b = 50 , start_angle = 180 , end_angle = 360 , style = \"FD\" ) pdf . set_fill_color ( r = 0 , g = 255 , b = 0 ) pdf . solid_arc ( x = 135 , y = 75 , a = 25 , b = 25 , start_angle = 0 , end_angle = 130 , style = \"FD\" ) pdf . output ( \"solid_arc.pdf\" ) Regular Polygon Using regular_polygon() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_fill_color ( r = 30 , g = 200 , b = 0 ) pdf . regular_polygon ( x = 40 , y = 80 , polyWidth = 30 , rotateDegrees = 270 , numSides = 3 , style = \"FD\" ) pdf . set_fill_color ( r = 10 , g = 30 , b = 255 ) pdf . regular_polygon ( x = 80 , y = 80 , polyWidth = 30 , rotateDegrees = 135 , numSides = 4 , style = \"FD\" ) pdf . set_fill_color ( r = 165 , g = 10 , b = 255 ) pdf . regular_polygon ( x = 120 , y = 80 , polyWidth = 30 , rotateDegrees = 198 , numSides = 5 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 125 , b = 10 ) pdf . regular_polygon ( x = 160 , y = 80 , polyWidth = 30 , rotateDegrees = 270 , numSides = 6 , style = \"FD\" ) pdf . output ( \"regular_polygon.pdf\" ) Regular Star Using star() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) pdf . star ( x = 40 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 0 , corners = 3 , style = \"FD\" ) pdf . set_fill_color ( r = 0 , g = 255 , b = 255 ) pdf . star ( x = 80 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 90 , corners = 4 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 255 , b = 0 ) pdf . star ( x = 120 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 180 , corners = 5 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 0 , b = 255 ) pdf . star ( x = 160 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 270 , corners = 6 , style = \"FD\" ) pdf . output ( \"star.pdf\" ) Path styling line_width specifies the thickness of the line used to stroke a path stroke_join_style defines how the corner joining two path components should be rendered: from fpdf import FPDF from fpdf.enums import StrokeJoinStyle pdf = FPDF () pdf . add_page () pdf . set_line_width ( 5 ) pdf . set_fill_color ( r = 255 , g = 128 , b = 0 ) with pdf . local_context ( stroke_join_style = StrokeJoinStyle . ROUND ): pdf . regular_polygon ( x = 50 , y = 120 , polyWidth = 100 , numSides = 8 , style = \"FD\" ) pdf . output ( \"regular_polygon_rounded.pdf\" ) stroke_cap_style defines how the end of a stroke should be rendered. This affects the ends of the segments of dashed strokes, as well. from fpdf import FPDF from fpdf.enums import StrokeCapStyle pdf = FPDF () pdf . add_page () pdf . set_line_width ( 5 ) pdf . set_fill_color ( r = 255 , g = 128 , b = 0 ) with pdf . local_context ( stroke_cap_style = StrokeCapStyle . ROUND ): pdf . line ( x1 = 50 , y1 = 50 , x2 = 150 , y2 = 100 ) pdf . output ( \"line_with_round_ends.pdf\" ) There are even more specific path styling settings supported: dash_pattern , stroke_opacity , stroke_miter_limit ... All of those settings can be set in a local_context() .","title":"Shapes"},{"location":"Shapes.html#shapes","text":"The following code snippets show examples of rendering various shapes.","title":"Shapes"},{"location":"Shapes.html#lines","text":"Using line() to draw a thin plain orange line: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_draw_color ( r = 255 , g = 128 , b = 0 ) pdf . line ( x1 = 50 , y1 = 50 , x2 = 150 , y2 = 100 ) pdf . output ( \"orange_plain_line.pdf\" ) Drawing a dashed light blue line: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_draw_color ( r = 0 , g = 128 , b = 255 ) pdf . set_dash_pattern ( dash = 2 , gap = 3 ) pdf . line ( x1 = 50 , y1 = 50 , x2 = 150 , y2 = 100 ) pdf . output ( \"blue_dashed_line.pdf\" )","title":"Lines"},{"location":"Shapes.html#circle","text":"Using circle() to draw a disc filled in pink with a grey outline: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_draw_color ( 240 ) pdf . set_fill_color ( r = 230 , g = 30 , b = 180 ) pdf . circle ( x = 50 , y = 50 , r = 50 , style = \"FD\" ) pdf . output ( \"circle.pdf\" )","title":"Circle"},{"location":"Shapes.html#ellipse","text":"Using ellipse() , filled in grey with a pink outline: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_draw_color ( r = 230 , g = 30 , b = 180 ) pdf . set_fill_color ( 240 ) pdf . ellipse ( x = 50 , y = 50 , w = 100 , h = 50 , style = \"FD\" ) pdf . output ( \"ellipse.pdf\" )","title":"Ellipse"},{"location":"Shapes.html#rectangle","text":"Using rect() to draw nested squares: from fpdf import FPDF pdf = FPDF () pdf . add_page () for i in range ( 15 ): pdf . set_fill_color ( 255 - 15 * i ) pdf . rect ( x = 5 + 5 * i , y = 5 + 5 * i , w = 200 - 10 * i , h = 200 - 10 * i , style = \"FD\" ) pdf . output ( \"squares.pdf\" ) Using rect() to draw rectangles with round corners: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_draw_color ( 200 ) y = 10 pdf . rect ( 60 , y , 33 , 28 , round_corners = True , style = \"D\" ) pdf . set_fill_color ( 0 , 255 , 0 ) pdf . rect ( 100 , y , 50 , 10 , round_corners = ( \"BOTTOM_RIGHT\" ), style = \"DF\" ) pdf . set_fill_color ( 255 , 255 , 0 ) pdf . rect ( 160 , y , 10 , 10 , round_corners = ( \"TOP_LEFT\" , \"BOTTOM_LEFT\" ), style = \"F\" ) pdf . output ( \"round_corners_rectangles.pdf\" )","title":"Rectangle"},{"location":"Shapes.html#polygon","text":"Using polygon() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) coords = (( 100 , 0 ), ( 5 , 69 ), ( 41 , 181 ), ( 159 , 181 ), ( 195 , 69 )) pdf . polygon ( coords , style = \"DF\" ) pdf . output ( \"polygon.pdf\" )","title":"Polygon"},{"location":"Shapes.html#arc","text":"Using arc() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) pdf . arc ( x = 75 , y = 75 , a = 25 , b = 25 , start_angle = 90 , end_angle = 260 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 0 , b = 255 ) pdf . arc ( x = 105 , y = 75 , a = 25 , b = 50 , start_angle = 180 , end_angle = 360 , style = \"FD\" ) pdf . set_fill_color ( r = 0 , g = 255 , b = 0 ) pdf . arc ( x = 135 , y = 75 , a = 25 , b = 25 , start_angle = 0 , end_angle = 130 , style = \"FD\" ) pdf . output ( \"arc.pdf\" )","title":"Arc"},{"location":"Shapes.html#solid-arc","text":"Using solid_arc() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 2 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) pdf . solid_arc ( x = 75 , y = 75 , a = 25 , b = 25 , start_angle = 90 , end_angle = 260 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 0 , b = 255 ) pdf . solid_arc ( x = 105 , y = 75 , a = 25 , b = 50 , start_angle = 180 , end_angle = 360 , style = \"FD\" ) pdf . set_fill_color ( r = 0 , g = 255 , b = 0 ) pdf . solid_arc ( x = 135 , y = 75 , a = 25 , b = 25 , start_angle = 0 , end_angle = 130 , style = \"FD\" ) pdf . output ( \"solid_arc.pdf\" )","title":"Solid arc"},{"location":"Shapes.html#regular-polygon","text":"Using regular_polygon() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_fill_color ( r = 30 , g = 200 , b = 0 ) pdf . regular_polygon ( x = 40 , y = 80 , polyWidth = 30 , rotateDegrees = 270 , numSides = 3 , style = \"FD\" ) pdf . set_fill_color ( r = 10 , g = 30 , b = 255 ) pdf . regular_polygon ( x = 80 , y = 80 , polyWidth = 30 , rotateDegrees = 135 , numSides = 4 , style = \"FD\" ) pdf . set_fill_color ( r = 165 , g = 10 , b = 255 ) pdf . regular_polygon ( x = 120 , y = 80 , polyWidth = 30 , rotateDegrees = 198 , numSides = 5 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 125 , b = 10 ) pdf . regular_polygon ( x = 160 , y = 80 , polyWidth = 30 , rotateDegrees = 270 , numSides = 6 , style = \"FD\" ) pdf . output ( \"regular_polygon.pdf\" )","title":"Regular Polygon"},{"location":"Shapes.html#regular-star","text":"Using star() : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_line_width ( 0.5 ) pdf . set_fill_color ( r = 255 , g = 0 , b = 0 ) pdf . star ( x = 40 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 0 , corners = 3 , style = \"FD\" ) pdf . set_fill_color ( r = 0 , g = 255 , b = 255 ) pdf . star ( x = 80 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 90 , corners = 4 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 255 , b = 0 ) pdf . star ( x = 120 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 180 , corners = 5 , style = \"FD\" ) pdf . set_fill_color ( r = 255 , g = 0 , b = 255 ) pdf . star ( x = 160 , y = 80 , r_in = 5 , r_out = 15 , rotate_degrees = 270 , corners = 6 , style = \"FD\" ) pdf . output ( \"star.pdf\" )","title":"Regular Star"},{"location":"Shapes.html#path-styling","text":"line_width specifies the thickness of the line used to stroke a path stroke_join_style defines how the corner joining two path components should be rendered: from fpdf import FPDF from fpdf.enums import StrokeJoinStyle pdf = FPDF () pdf . add_page () pdf . set_line_width ( 5 ) pdf . set_fill_color ( r = 255 , g = 128 , b = 0 ) with pdf . local_context ( stroke_join_style = StrokeJoinStyle . ROUND ): pdf . regular_polygon ( x = 50 , y = 120 , polyWidth = 100 , numSides = 8 , style = \"FD\" ) pdf . output ( \"regular_polygon_rounded.pdf\" ) stroke_cap_style defines how the end of a stroke should be rendered. This affects the ends of the segments of dashed strokes, as well. from fpdf import FPDF from fpdf.enums import StrokeCapStyle pdf = FPDF () pdf . add_page () pdf . set_line_width ( 5 ) pdf . set_fill_color ( r = 255 , g = 128 , b = 0 ) with pdf . local_context ( stroke_cap_style = StrokeCapStyle . ROUND ): pdf . line ( x1 = 50 , y1 = 50 , x2 = 150 , y2 = 100 ) pdf . output ( \"line_with_round_ends.pdf\" ) There are even more specific path styling settings supported: dash_pattern , stroke_opacity , stroke_miter_limit ... All of those settings can be set in a local_context() .","title":"Path styling"},{"location":"Signing.html","text":"Signing A digital signature may be used to authenticate the identity of a user and the document\u2019s contents. It stores information about the signer and the state of the document when it was signed. fpdf2 allows to sign documents using PKCS#12 certificates ( RFC 7292 ). The endesive package is required to do so. pdf = FPDF () pdf . add_page () pdf . sign_pkcs12 ( \"certs.p12\" , password = b \"1234\" ) pdf . output ( \"signed_doc.pdf\" ) The lower-level sign() method allows to add a signature based on arbitrary key & certificates, not necessarily from a PKCS#12 file. endesive also provides basic code to check PDFs signatures. examples/pdf-verify.py or the check_signature() function used in fpdf2 unit tests can be good starting points for you, if you want to perform PDF signature control.","title":"Signing"},{"location":"Signing.html#signing","text":"A digital signature may be used to authenticate the identity of a user and the document\u2019s contents. It stores information about the signer and the state of the document when it was signed. fpdf2 allows to sign documents using PKCS#12 certificates ( RFC 7292 ). The endesive package is required to do so. pdf = FPDF () pdf . add_page () pdf . sign_pkcs12 ( \"certs.p12\" , password = b \"1234\" ) pdf . output ( \"signed_doc.pdf\" ) The lower-level sign() method allows to add a signature based on arbitrary key & certificates, not necessarily from a PKCS#12 file. endesive also provides basic code to check PDFs signatures. examples/pdf-verify.py or the check_signature() function used in fpdf2 unit tests can be good starting points for you, if you want to perform PDF signature control.","title":"Signing"},{"location":"Tables.html","text":"Tables Tables can be built either using cells or with write_html . Using cells There is a method to build tables allowing for multilines content in cells: from fpdf import FPDF data = ( ( \"First name\" , \"Last name\" , \"Age\" , \"City\" ), ( \"Jules\" , \"Smith\" , \"34\" , \"San Juan\" ), ( \"Mary\" , \"Ramos\" , \"45\" , \"Orlando\" ), ( \"Carlson\" , \"Banks\" , \"19\" , \"Los Angeles\" ), ( \"Lucas\" , \"Cimon\" , \"31\" , \"Saint-Mahturin-sur-Loire\" ), ) pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 10 ) line_height = pdf . font_size * 2.5 col_width = pdf . epw / 4 # distribute content evenly for row in data : for datum in row : pdf . multi_cell ( col_width , line_height , datum , border = 1 , new_x = \"RIGHT\" , new_y = \"TOP\" , max_line_height = pdf . font_size ) pdf . ln ( line_height ) pdf . output ( 'table_with_cells.pdf' ) Using write_html An alternative method using fpdf.HTMLMixin , with the same data as above, and column widths defined as percent of the effective width: from fpdf import FPDF , HTMLMixin class PDF ( FPDF , HTMLMixin ): pass pdf = PDF () pdf . set_font_size ( 16 ) pdf . add_page () pdf . write_html ( f \"\"\"<table border=\"1\"><thead><tr> <th width=\"25%\"> { data [ 0 ][ 0 ] } </th> <th width=\"25%\"> { data [ 0 ][ 1 ] } </th> <th width=\"15%\"> { data [ 0 ][ 2 ] } </th> <th width=\"35%\"> { data [ 0 ][ 3 ] } </th> </tr></thead><tbody><tr> <td> { '</td><td>' . join ( data [ 1 ]) } </td> </tr><tr> <td> { '</td><td>' . join ( data [ 2 ]) } </td> </tr><tr> <td> { '</td><td>' . join ( data [ 3 ]) } </td> </tr><tr> <td> { '</td><td>' . join ( data [ 4 ]) } </td> </tr></tbody></table>\"\"\" , table_line_separators = True , ) pdf . output ( 'table_html.pdf' ) Note that HTMLMixin has some limitations, notably regarding multi-lines cells . Recipes our 5th tutorial provides examples on how to build tables: Tuto 5 - Creating Tables @bvalgard wrote a custom table() method: YouTube video - create_table() source code code snippet by @RubendeBruin to adapt row height to the highest cell Repeat table header on each page The following recipe demonstrates a solution to handle this requirement: from fpdf import FPDF TABLE_COL_NAMES = ( \"First name\" , \"Last name\" , \"Age\" , \"City\" ) TABLE_DATA = ( ( \"Jules\" , \"Smith\" , \"34\" , \"San Juan\" ), ( \"Mary\" , \"Ramos\" , \"45\" , \"Orlando\" ), ( \"Carlson\" , \"Banks\" , \"19\" , \"Los Angeles\" ), ( \"Lucas\" , \"Cimon\" , \"31\" , \"Angers\" ), ) pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 16 ) line_height = pdf . font_size * 2 col_width = pdf . epw / 4 # distribute content evenly def render_table_header (): pdf . set_font ( style = \"B\" ) # enabling bold text for col_name in TABLE_COL_NAMES : pdf . cell ( col_width , line_height , col_name , border = 1 ) pdf . ln ( line_height ) pdf . set_font ( style = \"\" ) # disabling bold text render_table_header () for _ in range ( 10 ): # repeat data rows for row in TABLE_DATA : if pdf . will_page_break ( line_height ): render_table_header () for datum in row : pdf . cell ( col_width , line_height , datum , border = 1 ) pdf . ln ( line_height ) pdf . output ( \"table_with_headers_on_every_page.pdf\" ) Note that if you want to use multi_cell() method instead of cell() , some extra code will be required: an initial call to multi_cell with split_only=True will be needed in order to compute the number of lines in the cell.","title":"Tables"},{"location":"Tables.html#tables","text":"Tables can be built either using cells or with write_html .","title":"Tables"},{"location":"Tables.html#using-cells","text":"There is a method to build tables allowing for multilines content in cells: from fpdf import FPDF data = ( ( \"First name\" , \"Last name\" , \"Age\" , \"City\" ), ( \"Jules\" , \"Smith\" , \"34\" , \"San Juan\" ), ( \"Mary\" , \"Ramos\" , \"45\" , \"Orlando\" ), ( \"Carlson\" , \"Banks\" , \"19\" , \"Los Angeles\" ), ( \"Lucas\" , \"Cimon\" , \"31\" , \"Saint-Mahturin-sur-Loire\" ), ) pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 10 ) line_height = pdf . font_size * 2.5 col_width = pdf . epw / 4 # distribute content evenly for row in data : for datum in row : pdf . multi_cell ( col_width , line_height , datum , border = 1 , new_x = \"RIGHT\" , new_y = \"TOP\" , max_line_height = pdf . font_size ) pdf . ln ( line_height ) pdf . output ( 'table_with_cells.pdf' )","title":"Using cells"},{"location":"Tables.html#using-write_html","text":"An alternative method using fpdf.HTMLMixin , with the same data as above, and column widths defined as percent of the effective width: from fpdf import FPDF , HTMLMixin class PDF ( FPDF , HTMLMixin ): pass pdf = PDF () pdf . set_font_size ( 16 ) pdf . add_page () pdf . write_html ( f \"\"\"<table border=\"1\"><thead><tr> <th width=\"25%\"> { data [ 0 ][ 0 ] } </th> <th width=\"25%\"> { data [ 0 ][ 1 ] } </th> <th width=\"15%\"> { data [ 0 ][ 2 ] } </th> <th width=\"35%\"> { data [ 0 ][ 3 ] } </th> </tr></thead><tbody><tr> <td> { '</td><td>' . join ( data [ 1 ]) } </td> </tr><tr> <td> { '</td><td>' . join ( data [ 2 ]) } </td> </tr><tr> <td> { '</td><td>' . join ( data [ 3 ]) } </td> </tr><tr> <td> { '</td><td>' . join ( data [ 4 ]) } </td> </tr></tbody></table>\"\"\" , table_line_separators = True , ) pdf . output ( 'table_html.pdf' ) Note that HTMLMixin has some limitations, notably regarding multi-lines cells .","title":"Using write_html"},{"location":"Tables.html#recipes","text":"our 5th tutorial provides examples on how to build tables: Tuto 5 - Creating Tables @bvalgard wrote a custom table() method: YouTube video - create_table() source code code snippet by @RubendeBruin to adapt row height to the highest cell","title":"Recipes"},{"location":"Tables.html#repeat-table-header-on-each-page","text":"The following recipe demonstrates a solution to handle this requirement: from fpdf import FPDF TABLE_COL_NAMES = ( \"First name\" , \"Last name\" , \"Age\" , \"City\" ) TABLE_DATA = ( ( \"Jules\" , \"Smith\" , \"34\" , \"San Juan\" ), ( \"Mary\" , \"Ramos\" , \"45\" , \"Orlando\" ), ( \"Carlson\" , \"Banks\" , \"19\" , \"Los Angeles\" ), ( \"Lucas\" , \"Cimon\" , \"31\" , \"Angers\" ), ) pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 16 ) line_height = pdf . font_size * 2 col_width = pdf . epw / 4 # distribute content evenly def render_table_header (): pdf . set_font ( style = \"B\" ) # enabling bold text for col_name in TABLE_COL_NAMES : pdf . cell ( col_width , line_height , col_name , border = 1 ) pdf . ln ( line_height ) pdf . set_font ( style = \"\" ) # disabling bold text render_table_header () for _ in range ( 10 ): # repeat data rows for row in TABLE_DATA : if pdf . will_page_break ( line_height ): render_table_header () for datum in row : pdf . cell ( col_width , line_height , datum , border = 1 ) pdf . ln ( line_height ) pdf . output ( \"table_with_headers_on_every_page.pdf\" ) Note that if you want to use multi_cell() method instead of cell() , some extra code will be required: an initial call to multi_cell with split_only=True will be needed in order to compute the number of lines in the cell.","title":"Repeat table header on each page"},{"location":"Templates.html","text":"Introduction Templates are predefined documents (like invoices, tax forms, etc.), or parts of such documents, where each element (text, lines, barcodes, etc.) has a fixed position (x1, y1, x2, y2), style (font, size, etc.) and a default text. These elements can act as placeholders, so the program can change the default text \"filling in\" the document. Besides being defined in code, the elements can also be defined in a CSV file or in a database, so the user can easily adapt the form to his printing needs. A template is used like a dict, setting its items' values. How to use Templates There are two approaches to using templates. Using Template() The traditional approach is to use the Template() class, This class accepts one template definition, and can apply it to each page of a document. The usage pattern here is: tmpl = Template ( elements = elements ) # first page and content tmpl . add_page () tmpl [ item_key_01 ] = \"Text 01\" tmpl [ item_key_02 ] = \"Text 02\" ... # second page and content tmpl . add_page () tmpl [ item_key_01 ] = \"Text 11\" tmpl [ item_key_02 ] = \"Text 12\" ... # possibly more pages ... # finalize document and write to file tmpl . render ( outfile = \"example.pdf\" ) The Template() class will create and manage its own FPDF() instance, so you don't need to worry about how it all works together. It also allows to set the page format, title of the document, measuring unit, and other metadata for the PDF file. For the method signatures, see pyfpdf.github.io: class Template . Setting text values for specific template items is done by treating the class as a dict, with the name of the item as the key: Template [ \"company_name\" ] = \"Sample Company\" Using FlexTemplate() When more flexibility is desired, then the FlexTemplate() class comes into play. In this case, you first need to create your own FPDF() instance. You can then pass this to the constructor of one or several FlexTemplate() instances, and have each of them load a template definition. For any page of the document, you can set text values on a template, and then render it on that page. After rendering, the template will be reset to its default values. pdf = FPDF () pdf . add_page () # One template for the first page fp_tmpl = FlexTemplate ( pdf , elements = fp_elements ) fp_tmpl [ \"item_key_01\" ] = \"Text 01\" fp_tmpl [ \"item_key_02\" ] = \"Text 02\" ... fp_tmpl . render () # add template items to first page # add some more non-template content to the first page pdf . polyline ( point_list , fill = False , polygon = False ) # second page pdf . add_page () # header for the second page h_tmpl = FlexTemplate ( pdf , elements = h_elements ) h_tmpl [ \"item_key_HA\" ] = \"Text 2A\" h_tmpl [ \"item_key_HB\" ] = \"Text 2B\" ... h_tmpl . render () # add header items to second page # footer for the second page f_tmpl = FlexTemplate ( pdf , elements = f_elements ) f_tmpl [ \"item_key_FC\" ] = \"Text 2C\" f_tmpl [ \"item_key_FD\" ] = \"Text 2D\" ... f_tmpl . render () # add footer items to second page # other content on the second page pdf . set_dash_pattern ( dash = 1 , gap = 1 ) pdf . line ( x1 , y1 , x2 , y2 ): pdf . set_dash_pattern () # third page pdf . add_page () # header for the third page, just reuse the same template instance after render() h_tmpl [ \"item_key_HA\" ] = \"Text 3A\" h_tmpl [ \"item_key_HB\" ] = \"Text 3B\" ... h_tmpl . render () # add header items to third page # footer for the third page f_tmpl [ \"item_key_FC\" ] = \"Text 3C\" f_tmpl [ \"item_key_FD\" ] = \"Text 3D\" ... f_tmpl . render () # add footer items to third page # other content on the third page pdf . rect ( x , y , w , h , style = None ) # possibly more pages pdf . next_page () ... ... # finally write everything to a file pdf . output ( \"example.pdf\" ) Evidently, this can end up quite a bit more involved, but there are hardly any limits on how you can combine templated and non-templated content on each page. Just think of the different templates as of building blocks, like configurable rubber stamps, which you can apply in any combination on any page you like. Of course, you can just as well use a set of full-page templates, possibly differentiating between cover page, table of contents, normal content pages, and an index page, or something along those lines. And here's how you can use a template several times on one page (and by extension, several times on several pages). When rendering with an offsetx and/or offsety argument, the contents of the template will end up in a different place on the page. A rotate argument will change its orientation, rotated around the origin of the template. The pivot of the rotation is the offset location. And finally, a scale argument allows you to insert the template larger or smaller than it was defined. elements = [ { \"name\" : \"box\" , \"type\" : \"B\" , \"x1\" : 0 , \"y1\" : 0 , \"x2\" : 50 , \"y2\" : 50 ,}, { \"name\" : \"d1\" , \"type\" : \"L\" , \"x1\" : 0 , \"y1\" : 0 , \"x2\" : 50 , \"y2\" : 50 ,}, { \"name\" : \"d2\" , \"type\" : \"L\" , \"x1\" : 0 , \"y1\" : 50 , \"x2\" : 50 , \"y2\" : 0 ,}, { \"name\" : \"label\" , \"type\" : \"T\" , \"x1\" : 0 , \"y1\" : 52 , \"x2\" : 50 , \"y2\" : 57 , \"text\" : \"Label\" ,}, ] pdf = FPDF () pdf . add_page () templ = FlexTemplate ( pdf , elements ) templ [ \"label\" ] = \"Offset: 50 / 50 mm\" templ . render ( offsetx = 50 , offsety = 50 ) templ [ \"label\" ] = \"Offset: 50 / 120 mm\" templ . render ( offsetx = 50 , offsety = 120 ) templ [ \"label\" ] = \"Offset: 120 / 50 mm, Scale: 0.5\" templ . render ( offsetx = 120 , offsety = 50 , scale = 0.5 ) templ [ \"label\" ] = \"Offset: 120 / 120 mm, Rotate: 30\u00b0, Scale=0.5\" templ . render ( offsetx = 120 , offsety = 120 , rotate = 30.0 , scale = 0.5 ) pdf . output ( \"example.pdf\" ) For the method signatures, see pyfpdf.github.io: class FlexTemplate . The dict syntax for setting text values is the same as above: FlexTemplate [ \"company_name\" ] = \"Sample Company\" Details - Template definition A template definition consists of a number of elements, which have the following properties (columns in a CSV, items in a dict, fields in a database). Dimensions (except font size, which always uses points) are given in user defined units (default: mm). Those are the units that can be specified when creating a Template() or a FPDF() instance. name : placeholder identification (unique text string) mandatory type : ' T ': Text - places one or several lines of text on the page ' L ': Line - draws a line from x1/y1 to x2/y2 ' I ': Image - positions and scales an image into the bounding box ' B ': Box - draws a rectangle around the bounding box ' E ': Ellipse - draws an ellipse inside the bounding box ' BC ': Barcode - inserts an \"Interleaved 2 of 5\" type barcode ' C39 ': Code 39 - inserts a \"Code 39\" type barcode Incompatible change: A previous implementation of this type used the non-standard element keys \"x\", \"y\", \"w\", and \"h\", which are now deprecated (but still work for the moment). ' W ': \"Write\" - uses the FPDF.write() method to add text to the page mandatory x1, y1, x2, y2 : top-left, bottom-right coordinates, defining a bounding box in most cases for multiline text, this is the bounding box of just the first line, not the complete box for the barcodes types, the height of the barcode is y2 - y1 , x2 is ignored. mandatory (\"x2\" optional for the barcode types) font : the name of a font type for the text types optional default: \"helvetica\" size : the size property of the element (float value) for text, the font size (in points!) for line, box, and ellipse, the line width for the barcode types, the width of one bar optional default: 10 for text, 2 for 'BC', 1.5 for 'C39' bold, italic, underline : text style properties in elements dict, enabled with True or equivalent value in csv, only int values, 0 as false, non-0 as true optional default: false foreground, background : text and fill colors (int value, commonly given in hex as 0xRRGGBB) optional default: foreground 0x000000 = black; background None/empty = transparent Incompatible change: Up to 2.4.5, the default background for text and box elements was solid white, with no way to make them transparent. align : text alignment, ' L ': left, ' R ': right, ' C ': center optional default: 'L' text : default string, can be replaced at runtime displayed text for 'T' and 'W' data to encode for barcode types optional (if missing for text/write, the element is ignored) default: empty priority : Z-order (int value) optional default: 0 multiline : configure text wrapping in dicts, None for single line, True for multicells (multiple lines), False trims to exactly fit the space defined in csv, 0 for single line, >0 for multiple lines, <0 for exact fit optional default: single line rotation : rotate the element in degrees around the top left corner x1/y1 (float) optional default: 0.0 - no rotation Fields that are not relevant to a specific element type will be ignored there, but if not left empty, they must still adhere to the specified data type (in dicts, string fields may be None). How to create a template A template can be created in 3 ways: By defining everything manually in a hardcoded way as a Python dictionary By using a template definition in a CSV document and parsing the CSV with Template.parse_dict() By defining the template in a database (this applies to [Web2Py] (Web2Py.md) integration) Example - Hardcoded from fpdf import Template #this will define the ELEMENTS that will compose the template. elements = [ { 'name' : 'company_logo' , 'type' : 'I' , 'x1' : 20.0 , 'y1' : 17.0 , 'x2' : 78.0 , 'y2' : 30.0 , 'font' : None , 'size' : 0.0 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : 'logo' , 'priority' : 2 , 'multiline' : False }, { 'name' : 'company_name' , 'type' : 'T' , 'x1' : 17.0 , 'y1' : 32.5 , 'x2' : 115.0 , 'y2' : 37.5 , 'font' : 'helvetica' , 'size' : 12.0 , 'bold' : 1 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : '' , 'priority' : 2 , 'multiline' : False }, { 'name' : 'multline_text' , 'type' : 'T' , 'x1' : 20 , 'y1' : 100 , 'x2' : 40 , 'y2' : 105 , 'font' : 'helvetica' , 'size' : 12 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'background' : 0x88ff00 , 'align' : 'C' , 'text' : 'Lorem ipsum dolor sit amet, consectetur adipisici elit' , 'priority' : 2 , 'multiline' : True }, { 'name' : 'box' , 'type' : 'B' , 'x1' : 15.0 , 'y1' : 15.0 , 'x2' : 185.0 , 'y2' : 260.0 , 'font' : 'helvetica' , 'size' : 0.0 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : None , 'priority' : 0 , 'multiline' : False }, { 'name' : 'box_x' , 'type' : 'B' , 'x1' : 95.0 , 'y1' : 15.0 , 'x2' : 105.0 , 'y2' : 25.0 , 'font' : 'helvetica' , 'size' : 0.0 , 'bold' : 1 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : None , 'priority' : 2 , 'multiline' : False }, { 'name' : 'line1' , 'type' : 'L' , 'x1' : 100.0 , 'y1' : 25.0 , 'x2' : 100.0 , 'y2' : 57.0 , 'font' : 'helvetica' , 'size' : 0 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : None , 'priority' : 3 , 'multiline' : False }, { 'name' : 'barcode' , 'type' : 'BC' , 'x1' : 20.0 , 'y1' : 246.5 , 'x2' : 140.0 , 'y2' : 254.0 , 'font' : 'Interleaved 2of5 NT' , 'size' : 0.75 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : '200000000001000159053338016581200810081' , 'priority' : 3 , 'multiline' : False }, ] #here we instantiate the template f = Template ( format = \"A4\" , elements = elements , title = \"Sample Invoice\" ) f . add_page () #we FILL some of the fields of the template with the information we want #note we access the elements treating the template instance as a \"dict\" f [ \"company_name\" ] = \"Sample Company\" f [ \"company_logo\" ] = \"docs/fpdf2-logo.png\" #and now we render the page f . render ( \"./template.pdf\" ) See template.py or [Web2Py] (Web2Py.md) for a complete example. Example - Elements defined in CSV file You define your elements in a CSV file \"mycsvfile.csv\" that will look like: line0;L;20.0;12.0;190.0;12.0;times;0.5;0;0;0;0;16777215;C;;0;0;0.0 line1;L;20.0;36.0;190.0;36.0;times;0.5;0;0;0;0;16777215;C;;0;0;0.0 name0;T;21.0;14.0;104.0;25.0;times;16.0;0;0;0;0;16777215;L;name;2;0;0.0 title0;T;21.0;26.0;104.0;30.0;times;10.0;0;0;0;0;16777215;L;title;2;0;0.0 multiline;T;21.0;50.0;28.0;54.0;times;10.5;0;0;0;0;0xffff00;L;multi line;0;1;0.0 numeric_text;T;21.0;80.0;100.0;84.0;times;10.5;0;0;0;0;;R;007;0;0;0.0 empty_fields;T;21.0;100.0;100.0;104.0 rotated;T;21.0;80.0;100.0;84.0;times;10.5;0;0;0;0;;R;ROTATED;0;0;30.0 Remember that each line represents an element and each field represents one of the properties of the element in the following order: ('name','type','x1','y1','x2','y2','font','size','bold','italic','underline','foreground','background','align','text','priority', 'multiline', 'rotate') As noted above, most fields may be left empty, so a line is valid with only 6 items. The \"empty_fields\" line of the example demonstrates all that can be left away. In addition, for the barcode types \"x2\" may be empty. Then you can use the file like this: def test_template (): f = Template ( format = \"A4\" , title = \"Sample Invoice\" ) f . parse_csv ( \"mycsvfile.csv\" , delimiter = \";\" ) f . add_page () f [ \"name0\" ] = \"Joe Doe\" return f . render ( \"./template.pdf\" )","title":"Templates"},{"location":"Templates.html#introduction","text":"Templates are predefined documents (like invoices, tax forms, etc.), or parts of such documents, where each element (text, lines, barcodes, etc.) has a fixed position (x1, y1, x2, y2), style (font, size, etc.) and a default text. These elements can act as placeholders, so the program can change the default text \"filling in\" the document. Besides being defined in code, the elements can also be defined in a CSV file or in a database, so the user can easily adapt the form to his printing needs. A template is used like a dict, setting its items' values.","title":"Introduction"},{"location":"Templates.html#how-to-use-templates","text":"There are two approaches to using templates.","title":"How to use Templates"},{"location":"Templates.html#using-template","text":"The traditional approach is to use the Template() class, This class accepts one template definition, and can apply it to each page of a document. The usage pattern here is: tmpl = Template ( elements = elements ) # first page and content tmpl . add_page () tmpl [ item_key_01 ] = \"Text 01\" tmpl [ item_key_02 ] = \"Text 02\" ... # second page and content tmpl . add_page () tmpl [ item_key_01 ] = \"Text 11\" tmpl [ item_key_02 ] = \"Text 12\" ... # possibly more pages ... # finalize document and write to file tmpl . render ( outfile = \"example.pdf\" ) The Template() class will create and manage its own FPDF() instance, so you don't need to worry about how it all works together. It also allows to set the page format, title of the document, measuring unit, and other metadata for the PDF file. For the method signatures, see pyfpdf.github.io: class Template . Setting text values for specific template items is done by treating the class as a dict, with the name of the item as the key: Template [ \"company_name\" ] = \"Sample Company\"","title":"Using Template()"},{"location":"Templates.html#using-flextemplate","text":"When more flexibility is desired, then the FlexTemplate() class comes into play. In this case, you first need to create your own FPDF() instance. You can then pass this to the constructor of one or several FlexTemplate() instances, and have each of them load a template definition. For any page of the document, you can set text values on a template, and then render it on that page. After rendering, the template will be reset to its default values. pdf = FPDF () pdf . add_page () # One template for the first page fp_tmpl = FlexTemplate ( pdf , elements = fp_elements ) fp_tmpl [ \"item_key_01\" ] = \"Text 01\" fp_tmpl [ \"item_key_02\" ] = \"Text 02\" ... fp_tmpl . render () # add template items to first page # add some more non-template content to the first page pdf . polyline ( point_list , fill = False , polygon = False ) # second page pdf . add_page () # header for the second page h_tmpl = FlexTemplate ( pdf , elements = h_elements ) h_tmpl [ \"item_key_HA\" ] = \"Text 2A\" h_tmpl [ \"item_key_HB\" ] = \"Text 2B\" ... h_tmpl . render () # add header items to second page # footer for the second page f_tmpl = FlexTemplate ( pdf , elements = f_elements ) f_tmpl [ \"item_key_FC\" ] = \"Text 2C\" f_tmpl [ \"item_key_FD\" ] = \"Text 2D\" ... f_tmpl . render () # add footer items to second page # other content on the second page pdf . set_dash_pattern ( dash = 1 , gap = 1 ) pdf . line ( x1 , y1 , x2 , y2 ): pdf . set_dash_pattern () # third page pdf . add_page () # header for the third page, just reuse the same template instance after render() h_tmpl [ \"item_key_HA\" ] = \"Text 3A\" h_tmpl [ \"item_key_HB\" ] = \"Text 3B\" ... h_tmpl . render () # add header items to third page # footer for the third page f_tmpl [ \"item_key_FC\" ] = \"Text 3C\" f_tmpl [ \"item_key_FD\" ] = \"Text 3D\" ... f_tmpl . render () # add footer items to third page # other content on the third page pdf . rect ( x , y , w , h , style = None ) # possibly more pages pdf . next_page () ... ... # finally write everything to a file pdf . output ( \"example.pdf\" ) Evidently, this can end up quite a bit more involved, but there are hardly any limits on how you can combine templated and non-templated content on each page. Just think of the different templates as of building blocks, like configurable rubber stamps, which you can apply in any combination on any page you like. Of course, you can just as well use a set of full-page templates, possibly differentiating between cover page, table of contents, normal content pages, and an index page, or something along those lines. And here's how you can use a template several times on one page (and by extension, several times on several pages). When rendering with an offsetx and/or offsety argument, the contents of the template will end up in a different place on the page. A rotate argument will change its orientation, rotated around the origin of the template. The pivot of the rotation is the offset location. And finally, a scale argument allows you to insert the template larger or smaller than it was defined. elements = [ { \"name\" : \"box\" , \"type\" : \"B\" , \"x1\" : 0 , \"y1\" : 0 , \"x2\" : 50 , \"y2\" : 50 ,}, { \"name\" : \"d1\" , \"type\" : \"L\" , \"x1\" : 0 , \"y1\" : 0 , \"x2\" : 50 , \"y2\" : 50 ,}, { \"name\" : \"d2\" , \"type\" : \"L\" , \"x1\" : 0 , \"y1\" : 50 , \"x2\" : 50 , \"y2\" : 0 ,}, { \"name\" : \"label\" , \"type\" : \"T\" , \"x1\" : 0 , \"y1\" : 52 , \"x2\" : 50 , \"y2\" : 57 , \"text\" : \"Label\" ,}, ] pdf = FPDF () pdf . add_page () templ = FlexTemplate ( pdf , elements ) templ [ \"label\" ] = \"Offset: 50 / 50 mm\" templ . render ( offsetx = 50 , offsety = 50 ) templ [ \"label\" ] = \"Offset: 50 / 120 mm\" templ . render ( offsetx = 50 , offsety = 120 ) templ [ \"label\" ] = \"Offset: 120 / 50 mm, Scale: 0.5\" templ . render ( offsetx = 120 , offsety = 50 , scale = 0.5 ) templ [ \"label\" ] = \"Offset: 120 / 120 mm, Rotate: 30\u00b0, Scale=0.5\" templ . render ( offsetx = 120 , offsety = 120 , rotate = 30.0 , scale = 0.5 ) pdf . output ( \"example.pdf\" ) For the method signatures, see pyfpdf.github.io: class FlexTemplate . The dict syntax for setting text values is the same as above: FlexTemplate [ \"company_name\" ] = \"Sample Company\"","title":"Using FlexTemplate()"},{"location":"Templates.html#details-template-definition","text":"A template definition consists of a number of elements, which have the following properties (columns in a CSV, items in a dict, fields in a database). Dimensions (except font size, which always uses points) are given in user defined units (default: mm). Those are the units that can be specified when creating a Template() or a FPDF() instance. name : placeholder identification (unique text string) mandatory type : ' T ': Text - places one or several lines of text on the page ' L ': Line - draws a line from x1/y1 to x2/y2 ' I ': Image - positions and scales an image into the bounding box ' B ': Box - draws a rectangle around the bounding box ' E ': Ellipse - draws an ellipse inside the bounding box ' BC ': Barcode - inserts an \"Interleaved 2 of 5\" type barcode ' C39 ': Code 39 - inserts a \"Code 39\" type barcode Incompatible change: A previous implementation of this type used the non-standard element keys \"x\", \"y\", \"w\", and \"h\", which are now deprecated (but still work for the moment). ' W ': \"Write\" - uses the FPDF.write() method to add text to the page mandatory x1, y1, x2, y2 : top-left, bottom-right coordinates, defining a bounding box in most cases for multiline text, this is the bounding box of just the first line, not the complete box for the barcodes types, the height of the barcode is y2 - y1 , x2 is ignored. mandatory (\"x2\" optional for the barcode types) font : the name of a font type for the text types optional default: \"helvetica\" size : the size property of the element (float value) for text, the font size (in points!) for line, box, and ellipse, the line width for the barcode types, the width of one bar optional default: 10 for text, 2 for 'BC', 1.5 for 'C39' bold, italic, underline : text style properties in elements dict, enabled with True or equivalent value in csv, only int values, 0 as false, non-0 as true optional default: false foreground, background : text and fill colors (int value, commonly given in hex as 0xRRGGBB) optional default: foreground 0x000000 = black; background None/empty = transparent Incompatible change: Up to 2.4.5, the default background for text and box elements was solid white, with no way to make them transparent. align : text alignment, ' L ': left, ' R ': right, ' C ': center optional default: 'L' text : default string, can be replaced at runtime displayed text for 'T' and 'W' data to encode for barcode types optional (if missing for text/write, the element is ignored) default: empty priority : Z-order (int value) optional default: 0 multiline : configure text wrapping in dicts, None for single line, True for multicells (multiple lines), False trims to exactly fit the space defined in csv, 0 for single line, >0 for multiple lines, <0 for exact fit optional default: single line rotation : rotate the element in degrees around the top left corner x1/y1 (float) optional default: 0.0 - no rotation Fields that are not relevant to a specific element type will be ignored there, but if not left empty, they must still adhere to the specified data type (in dicts, string fields may be None).","title":"Details - Template definition"},{"location":"Templates.html#how-to-create-a-template","text":"A template can be created in 3 ways: By defining everything manually in a hardcoded way as a Python dictionary By using a template definition in a CSV document and parsing the CSV with Template.parse_dict() By defining the template in a database (this applies to [Web2Py] (Web2Py.md) integration)","title":"How to create a template"},{"location":"Templates.html#example-hardcoded","text":"from fpdf import Template #this will define the ELEMENTS that will compose the template. elements = [ { 'name' : 'company_logo' , 'type' : 'I' , 'x1' : 20.0 , 'y1' : 17.0 , 'x2' : 78.0 , 'y2' : 30.0 , 'font' : None , 'size' : 0.0 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : 'logo' , 'priority' : 2 , 'multiline' : False }, { 'name' : 'company_name' , 'type' : 'T' , 'x1' : 17.0 , 'y1' : 32.5 , 'x2' : 115.0 , 'y2' : 37.5 , 'font' : 'helvetica' , 'size' : 12.0 , 'bold' : 1 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : '' , 'priority' : 2 , 'multiline' : False }, { 'name' : 'multline_text' , 'type' : 'T' , 'x1' : 20 , 'y1' : 100 , 'x2' : 40 , 'y2' : 105 , 'font' : 'helvetica' , 'size' : 12 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'background' : 0x88ff00 , 'align' : 'C' , 'text' : 'Lorem ipsum dolor sit amet, consectetur adipisici elit' , 'priority' : 2 , 'multiline' : True }, { 'name' : 'box' , 'type' : 'B' , 'x1' : 15.0 , 'y1' : 15.0 , 'x2' : 185.0 , 'y2' : 260.0 , 'font' : 'helvetica' , 'size' : 0.0 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : None , 'priority' : 0 , 'multiline' : False }, { 'name' : 'box_x' , 'type' : 'B' , 'x1' : 95.0 , 'y1' : 15.0 , 'x2' : 105.0 , 'y2' : 25.0 , 'font' : 'helvetica' , 'size' : 0.0 , 'bold' : 1 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : None , 'priority' : 2 , 'multiline' : False }, { 'name' : 'line1' , 'type' : 'L' , 'x1' : 100.0 , 'y1' : 25.0 , 'x2' : 100.0 , 'y2' : 57.0 , 'font' : 'helvetica' , 'size' : 0 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : None , 'priority' : 3 , 'multiline' : False }, { 'name' : 'barcode' , 'type' : 'BC' , 'x1' : 20.0 , 'y1' : 246.5 , 'x2' : 140.0 , 'y2' : 254.0 , 'font' : 'Interleaved 2of5 NT' , 'size' : 0.75 , 'bold' : 0 , 'italic' : 0 , 'underline' : 0 , 'align' : 'C' , 'text' : '200000000001000159053338016581200810081' , 'priority' : 3 , 'multiline' : False }, ] #here we instantiate the template f = Template ( format = \"A4\" , elements = elements , title = \"Sample Invoice\" ) f . add_page () #we FILL some of the fields of the template with the information we want #note we access the elements treating the template instance as a \"dict\" f [ \"company_name\" ] = \"Sample Company\" f [ \"company_logo\" ] = \"docs/fpdf2-logo.png\" #and now we render the page f . render ( \"./template.pdf\" ) See template.py or [Web2Py] (Web2Py.md) for a complete example.","title":"Example - Hardcoded"},{"location":"Templates.html#example-elements-defined-in-csv-file","text":"You define your elements in a CSV file \"mycsvfile.csv\" that will look like: line0;L;20.0;12.0;190.0;12.0;times;0.5;0;0;0;0;16777215;C;;0;0;0.0 line1;L;20.0;36.0;190.0;36.0;times;0.5;0;0;0;0;16777215;C;;0;0;0.0 name0;T;21.0;14.0;104.0;25.0;times;16.0;0;0;0;0;16777215;L;name;2;0;0.0 title0;T;21.0;26.0;104.0;30.0;times;10.0;0;0;0;0;16777215;L;title;2;0;0.0 multiline;T;21.0;50.0;28.0;54.0;times;10.5;0;0;0;0;0xffff00;L;multi line;0;1;0.0 numeric_text;T;21.0;80.0;100.0;84.0;times;10.5;0;0;0;0;;R;007;0;0;0.0 empty_fields;T;21.0;100.0;100.0;104.0 rotated;T;21.0;80.0;100.0;84.0;times;10.5;0;0;0;0;;R;ROTATED;0;0;30.0 Remember that each line represents an element and each field represents one of the properties of the element in the following order: ('name','type','x1','y1','x2','y2','font','size','bold','italic','underline','foreground','background','align','text','priority', 'multiline', 'rotate') As noted above, most fields may be left empty, so a line is valid with only 6 items. The \"empty_fields\" line of the example demonstrates all that can be left away. In addition, for the barcode types \"x2\" may be empty. Then you can use the file like this: def test_template (): f = Template ( format = \"A4\" , title = \"Sample Invoice\" ) f . parse_csv ( \"mycsvfile.csv\" , delimiter = \";\" ) f . add_page () f [ \"name0\" ] = \"Joe Doe\" return f . render ( \"./template.pdf\" )","title":"Example - Elements defined in CSV file"},{"location":"Text.html","text":"Adding Text There are several ways in fpdf to add text to a PDF document, each of which comes with its own special features and its own set of advantages and disadvantages. You will need to pick the right one for your specific task. method lines markdown support HTML support accepts new current position details .text() one no no fixed Inserts a single-line text string with a precise location on the base line of the font. .cell() one yes no yes Inserts a single-line text string within the boundaries of a given box, optionally with background and border. .multi_cell() several yes no yes Inserts a multi-line text string within the boundaries of a given box, optionally with background and border. .write() several no no auto Inserts a multi-line text string within the boundaries of the page margins, starting at the current x/y location (typically the end of the last inserted text). .write_html() several no yes auto From html.py . An extension to .write() , with additional parsing of basic HTML tags. Typographical Limitations There are a few advanced typesetting features that fpdf doesn't currently support. Automatic ligatures - Some writing systems (eg. most Indic scripts such as Devaganari, Tamil, Kannada) frequently combine a number of written characters into a single glyph. This would require advanced font analysis capabilities, which aren't currently implemented. Contextual forms - In some writing systems (eg. Arabic, Mongolian, etc.), characters may take a different shape, depending on whether they appear at the beginning, in the middle, or at the end of a word, or isolated. Fpdf will always use the same standard shape in those cases. Vertical writing - Some writing systems are meant to be written vertically. Doing so is not directly supported. In cases where this just means to stack characters on top of each other (eg. Chinese, Japanese, etc.), client software can implement this by placing each character individuall at the correct location. In cases where the characters are connected with each other (eg. Mongolian), this may be more difficult, if possible at all. Right-to-Left writing - Letters of scripts that are written right to left(eg. Arabic, Hebrew) appear in the wrong order Special Diacritics - Special diacritics that use separate code points (eg. in Din\u00e9 Bizaad, Hebrew) appear displaced Right-to-Left & Arabic Script workaround For Arabic and RTL scripts there is a temporary solution (using two additional libraries python-bidi and arabic-reshaper ) that works for most languages; only a few (rare) Arabic characters aren't supported. Using it on other scripts(eg. when the input is unknown or mixed scripts) does not affect them: from arabic_reshaper import reshape from bidi.algorithm import get_display some_text = '\u0627\u064e\u0644\u0652\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629\u064f\u05db\u05b7\u05bc\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea' fixed_text = get_display ( reshape ( some_text )) Text Formatting For all text insertion methods, the relevant font related properties (eg. font/style and foreground/background color) must be set before invoking them. This includes using: .set_font() .set_text_color() .set_draw_color() - for cell borders .set_fill_color() - for the background In addition, some of the methods can optionally use markdown or HTML markup in the supplied text in order to change the font style (bold/italic/underline) of parts of the output. Change in current position .cell() and .multi_cell() let you specify where the current position ( .x / .y ) should go after the call. This is handled by the parameters new_x and new_y . Their values must one of the following enums values or an equivalent string: XPos YPos .text() Prints a single-line character string. In contrast to the other text methods, the position is given explicitly, and not taken from .x / .y . The origin is on the left of the first character, on the baseline. This method allows placing a string with typographical precision on the page, but it is usually easier to use the .cell() , .multi_cell() or .write() methods. Signature and parameters for .text() .cell() Prints a cell (rectangular area) with optional borders, background color and character string. The upper-left corner of the cell corresponds to the current position. The text can be aligned or centered. After the call, the current position moves to the selected new_x / new_y position. It is possible to put a link on the text. If markdown=True , then minimal markdown styling is enabled, to render parts of the text in bold, italics, and/or underlined. If automatic page breaking is enabled and the cell goes beyond the limit, a page break is performed before outputting. Signature and parameters for.cell() .multi_cell() Allows printing text with line breaks. Those can be automatic (breaking at the most recent space or soft-hyphen character) as soon as the text reaches the right border of the cell, or explicit (via the \\\\n character). As many cells as necessary are stacked, one below the other. Text can be aligned, centered or justified. The cell block can be framed and the background painted. Using new_x=\"RIGHT\", new_y=\"TOP\", maximum height=pdf.font_size can be useful to build tables with multiline text in cells. In normal operation, returns a boolean indicating if page break was triggered. When split_only == True , returns txt split into lines in an array (with any markdown markup removed). Signature and parameters for.multi_cell() .write() Prints multi-line text between the page margins, starting from the current position. When the right margin is reached, a line break occurs at the most recent space or soft-hyphen character, and text continues from the left margin. A manual break happens any time the \\n character is met, Upon method exit, the current position is left near the end of the text, ready for the next call to continue without a gap, potentially with a different font or size set. Returns a boolean indicating if page break was triggered. The primary purpose of this method is to print continuously wrapping text, where different parts may be rendered in different fonts or font sizes. This contrasts eg. with .multi_cell() , where a change in font family or size can only become effective on a new line. Signature and parameters for.write() .write_html() This method can be accessed by using the class HTMLMixin from \" html.py \". It is very similar to .write() , but accepts basic HTML formatted text as input. See html.py for more details and the supported HTML tags. Note that when using data from actual web pages, the result may not look exactly as expected, because .write_html() prints all whitespace unchanged as it finds them, while webbrowsers rather collapse each run of consequitive whitespace into a single space character. Signature and parameters for.write_html()","title":"Adding Text"},{"location":"Text.html#adding-text","text":"There are several ways in fpdf to add text to a PDF document, each of which comes with its own special features and its own set of advantages and disadvantages. You will need to pick the right one for your specific task. method lines markdown support HTML support accepts new current position details .text() one no no fixed Inserts a single-line text string with a precise location on the base line of the font. .cell() one yes no yes Inserts a single-line text string within the boundaries of a given box, optionally with background and border. .multi_cell() several yes no yes Inserts a multi-line text string within the boundaries of a given box, optionally with background and border. .write() several no no auto Inserts a multi-line text string within the boundaries of the page margins, starting at the current x/y location (typically the end of the last inserted text). .write_html() several no yes auto From html.py . An extension to .write() , with additional parsing of basic HTML tags.","title":"Adding Text"},{"location":"Text.html#typographical-limitations","text":"There are a few advanced typesetting features that fpdf doesn't currently support. Automatic ligatures - Some writing systems (eg. most Indic scripts such as Devaganari, Tamil, Kannada) frequently combine a number of written characters into a single glyph. This would require advanced font analysis capabilities, which aren't currently implemented. Contextual forms - In some writing systems (eg. Arabic, Mongolian, etc.), characters may take a different shape, depending on whether they appear at the beginning, in the middle, or at the end of a word, or isolated. Fpdf will always use the same standard shape in those cases. Vertical writing - Some writing systems are meant to be written vertically. Doing so is not directly supported. In cases where this just means to stack characters on top of each other (eg. Chinese, Japanese, etc.), client software can implement this by placing each character individuall at the correct location. In cases where the characters are connected with each other (eg. Mongolian), this may be more difficult, if possible at all. Right-to-Left writing - Letters of scripts that are written right to left(eg. Arabic, Hebrew) appear in the wrong order Special Diacritics - Special diacritics that use separate code points (eg. in Din\u00e9 Bizaad, Hebrew) appear displaced","title":"Typographical Limitations"},{"location":"Text.html#right-to-left-arabic-script-workaround","text":"For Arabic and RTL scripts there is a temporary solution (using two additional libraries python-bidi and arabic-reshaper ) that works for most languages; only a few (rare) Arabic characters aren't supported. Using it on other scripts(eg. when the input is unknown or mixed scripts) does not affect them: from arabic_reshaper import reshape from bidi.algorithm import get_display some_text = '\u0627\u064e\u0644\u0652\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629\u064f\u05db\u05b7\u05bc\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea' fixed_text = get_display ( reshape ( some_text ))","title":"Right-to-Left &amp; Arabic Script workaround"},{"location":"Text.html#text-formatting","text":"For all text insertion methods, the relevant font related properties (eg. font/style and foreground/background color) must be set before invoking them. This includes using: .set_font() .set_text_color() .set_draw_color() - for cell borders .set_fill_color() - for the background In addition, some of the methods can optionally use markdown or HTML markup in the supplied text in order to change the font style (bold/italic/underline) of parts of the output.","title":"Text Formatting"},{"location":"Text.html#change-in-current-position","text":".cell() and .multi_cell() let you specify where the current position ( .x / .y ) should go after the call. This is handled by the parameters new_x and new_y . Their values must one of the following enums values or an equivalent string: XPos YPos","title":"Change in current position"},{"location":"Text.html#text","text":"Prints a single-line character string. In contrast to the other text methods, the position is given explicitly, and not taken from .x / .y . The origin is on the left of the first character, on the baseline. This method allows placing a string with typographical precision on the page, but it is usually easier to use the .cell() , .multi_cell() or .write() methods. Signature and parameters for .text()","title":".text()"},{"location":"Text.html#cell","text":"Prints a cell (rectangular area) with optional borders, background color and character string. The upper-left corner of the cell corresponds to the current position. The text can be aligned or centered. After the call, the current position moves to the selected new_x / new_y position. It is possible to put a link on the text. If markdown=True , then minimal markdown styling is enabled, to render parts of the text in bold, italics, and/or underlined. If automatic page breaking is enabled and the cell goes beyond the limit, a page break is performed before outputting. Signature and parameters for.cell()","title":".cell()"},{"location":"Text.html#multi_cell","text":"Allows printing text with line breaks. Those can be automatic (breaking at the most recent space or soft-hyphen character) as soon as the text reaches the right border of the cell, or explicit (via the \\\\n character). As many cells as necessary are stacked, one below the other. Text can be aligned, centered or justified. The cell block can be framed and the background painted. Using new_x=\"RIGHT\", new_y=\"TOP\", maximum height=pdf.font_size can be useful to build tables with multiline text in cells. In normal operation, returns a boolean indicating if page break was triggered. When split_only == True , returns txt split into lines in an array (with any markdown markup removed). Signature and parameters for.multi_cell()","title":".multi_cell()"},{"location":"Text.html#write","text":"Prints multi-line text between the page margins, starting from the current position. When the right margin is reached, a line break occurs at the most recent space or soft-hyphen character, and text continues from the left margin. A manual break happens any time the \\n character is met, Upon method exit, the current position is left near the end of the text, ready for the next call to continue without a gap, potentially with a different font or size set. Returns a boolean indicating if page break was triggered. The primary purpose of this method is to print continuously wrapping text, where different parts may be rendered in different fonts or font sizes. This contrasts eg. with .multi_cell() , where a change in font family or size can only become effective on a new line. Signature and parameters for.write()","title":".write()"},{"location":"Text.html#write_html","text":"This method can be accessed by using the class HTMLMixin from \" html.py \". It is very similar to .write() , but accepts basic HTML formatted text as input. See html.py for more details and the supported HTML tags. Note that when using data from actual web pages, the result may not look exactly as expected, because .write_html() prints all whitespace unchanged as it finds them, while webbrowsers rather collapse each run of consequitive whitespace into a single space character. Signature and parameters for.write_html()","title":".write_html()"},{"location":"TextStyling.html","text":"Text styling set_font() Setting emphasis on text can be controlled by using set_font(style=...) : style=\"B\" indicates bold style=\"I\" indicates italics style=\"U\" indicates underline style=\"BI\" indicates bold italics from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 36 ) pdf . cell ( txt = \"This\" ) pdf . set_font ( style = \"B\" ) pdf . cell ( txt = \"is\" ) pdf . set_font ( style = \"I\" ) pdf . cell ( txt = \"a\" ) pdf . set_font ( style = \"U\" ) pdf . cell ( txt = \"PDF\" ) pdf . output ( \"style.pdf\" ) .set_stretching(stretching=100) Text can be stretched horizontally with this setting, measured in percent. If the argument is less than 100, then all characters are rendered proportionally narrower and the text string will take less space. If it is larger than 100, then the width of all characters will be expanded accordingly. The example shows the same text justified to the same width, with stretching values of 100 and 150. pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , \"\" , 8 ) pdf . set_fill_color ( 255 , 255 , 0 ) pdf . multi_cell ( w = 50 , txt = LOREM_IPSUM [: 100 ], new_x = \"LEFT\" , fill = True ) pdf . ln () pdf . set_stretching ( 150 ) pdf . multi_cell ( w = 50 , txt = LOREM_IPSUM [: 100 ], new_x = \"LEFT\" , fill = True ) .set_char_spacing(spacing=0) This method changes the distance between individual characters of a test string. Normally, characters are placed at a given distance according the width information in the font file. If spacing is larger than 0, then their distance will be larger, creating a gap in between. If it is less than 0, then their distance will be smaller, possibly resulting in an overlap. The change in distance is given in typographic points (Pica), which makes it easy to adapt it relative to the current font size. Character spacing works best for formatting single line text created by any method, or for highlighting individual words included in a block of text with .write() . Limitations : Spacing will only be changed within a sequence of characters that fpdf2 adds to the PDF in one go. This means that there will be no extra distance eg. between text parts that are placed successivly with write() . Also, if you apply different font styles using the Markdown functionality of .cell() and .multi_cell() or by using html_write() , then any parts given different styles will have the original distance between them. This is so because fpdf2 has to add each styled fragment to the PDF file seperately. The example shows the same text justified to the same width, with char_spacing values of 0 and 10 (font size 8 pt). pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , \"\" , 8 ) pdf . set_fill_color ( 255 , 255 , 0 ) pdf . multi_cell ( w = 150 , txt = LOREM_IPSUM [: 200 ], new_x = \"LEFT\" , fill = True ) pdf . ln () pdf . set_char_spacing ( 10 ) pdf . multi_cell ( w = 150 , txt = LOREM_IPSUM [: 200 ], new_x = \"LEFT\" , fill = True ) Subscript, Superscript, and Fractional Numbers The class attribute .char_vpos controls special vertical positioning modes for text: \"LINE\" - normal line text (default) \"SUP\" - superscript (exponent) \"SUB\" - subscript (index) \"NOM\" - nominator of a fraction with \"/\" \"DENOM\" - denominator of a fraction with \"/\" For each positioning mode there are two parameters that can be configured. The defaults have been set to result in a decent layout with most fonts, and are given in parens. The size multiplier for the font size: .sup_scale (0.7) .sub_scale (0.7) .nom_scale (0.75) .denom_scale (0.75) The lift is given as fraction of the unscaled font size and indicates how much the glyph gets lifted above the base line (negative for below): .sup_lift (0.4) .sub_lift (-0.15) .nom_lift (0.2) .denom_lift (0.0) Limitations: The individual glyphs will be scaled down as configured. This is not typographically correct, as it will also reduce the stroke width, making them look lighter than the normal text. Unicode fonts may include characters in the subscripts and superscripts range . In a high quality font, those glyphs will be smaller than the normal ones, but have a proportionally stronger stroke width in order to maintain the same visual density. If available in good quality, using Characters from this range is preferred and will look better. Unfortunately, many fonts either don't (fully) cover this range, or the glyphs are of unsatisfactory quality. In those cases, this feature of fpdf2 offers a reliable workaround with suboptimal but consistent output quality. Practical use is essentially limited to .write() and html_write() . The feature does technically work with .cell() and .multi_cell , but is of limited usefulness there, since you can't change font properties in the middle of a line (there is no markdown support). It currently gets completely ignored by .text() . The example shows the most common use cases: pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , \"\" , 20 ) pdf . write ( txt = \"2\" ) pdf . char_vpos = \"SUP\" pdf . write ( txt = \"56\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \" more line text\" ) pdf . char_vpos = \"SUB\" pdf . write ( txt = \"(idx)\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \" end\" ) pdf . ln () pdf . write ( txt = \"1234 + \" ) pdf . char_vpos = \"NOM\" pdf . write ( txt = \"5\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \"/\" ) pdf . char_vpos = \"DENOM\" pdf . write ( txt = \"16\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \" + 987 = x\" ) .text_mode The PDF spec defines several text modes: The text mode can be controlled with the .text_mode attribute. With STROKE modes, the line width is induced by .line_width , and its color can be configured with set_draw_color() . With FILL modes, the filling color can be controlled by set_fill_color() or set_text_color() . With any of the 4 CLIP modes, the letters will be filled by vector drawings made afterwards, as can be seen in this example: from fpdf import FPDF pdf = FPDF ( orientation = \"landscape\" ) pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 100 ) with pdf . local_context ( text_mode = \"STROKE\" , line_width = 2 ): pdf . cell ( txt = \"Hello world\" ) # Outside the local context, text_mode & line_width are reverted # back to their original default values pdf . ln () with pdf . local_context ( text_mode = \"CLIP\" ): pdf . cell ( txt = \"CLIP text mode\" ) for r in range ( 0 , 250 , 2 ): # drawing concentric circles pdf . circle ( x = 130 - r / 2 , y = 70 - r / 2 , r = r ) pdf . output ( \"text-modes.pdf\" ) More examples from test_text_mode.py : text_modes.pdf clip_text_modes.pdf markdown=True An optional markdown=True parameter can be passed to the cell() & multi_cell() methods in order to enable basic Markdown-like styling: **bold**, __italics__, --underlined-- Bold & italics require using dedicated fonts for each style. For the standard fonts (Courier, Helvetica & Times), those dedicated fonts are configured by default. Using other fonts means that their variants (bold, italics) must be registered using add_font (with style=\"B\" and style=\"I\" ). from fpdf import FPDF pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 60 ) pdf . cell ( txt = \"**Lorem** __Ipsum__ --dolor--\" , markdown = True ) pdf . output ( \"markdown-styled.pdf\" ) write_html write_html allows to set emphasis on text through the <b> , <i> and <u> tags: pdf . write_html ( \"\"\"<B>bold</B> <I>italic</I> <U>underlined</U> <B><I><U>all at once!</U></I></B>\"\"\" )","title":"Text styling"},{"location":"TextStyling.html#text-styling","text":"","title":"Text styling"},{"location":"TextStyling.html#set_font","text":"Setting emphasis on text can be controlled by using set_font(style=...) : style=\"B\" indicates bold style=\"I\" indicates italics style=\"U\" indicates underline style=\"BI\" indicates bold italics from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 36 ) pdf . cell ( txt = \"This\" ) pdf . set_font ( style = \"B\" ) pdf . cell ( txt = \"is\" ) pdf . set_font ( style = \"I\" ) pdf . cell ( txt = \"a\" ) pdf . set_font ( style = \"U\" ) pdf . cell ( txt = \"PDF\" ) pdf . output ( \"style.pdf\" )","title":"set_font()"},{"location":"TextStyling.html#set_stretchingstretching100","text":"Text can be stretched horizontally with this setting, measured in percent. If the argument is less than 100, then all characters are rendered proportionally narrower and the text string will take less space. If it is larger than 100, then the width of all characters will be expanded accordingly. The example shows the same text justified to the same width, with stretching values of 100 and 150. pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , \"\" , 8 ) pdf . set_fill_color ( 255 , 255 , 0 ) pdf . multi_cell ( w = 50 , txt = LOREM_IPSUM [: 100 ], new_x = \"LEFT\" , fill = True ) pdf . ln () pdf . set_stretching ( 150 ) pdf . multi_cell ( w = 50 , txt = LOREM_IPSUM [: 100 ], new_x = \"LEFT\" , fill = True )","title":".set_stretching(stretching=100)"},{"location":"TextStyling.html#set_char_spacingspacing0","text":"This method changes the distance between individual characters of a test string. Normally, characters are placed at a given distance according the width information in the font file. If spacing is larger than 0, then their distance will be larger, creating a gap in between. If it is less than 0, then their distance will be smaller, possibly resulting in an overlap. The change in distance is given in typographic points (Pica), which makes it easy to adapt it relative to the current font size. Character spacing works best for formatting single line text created by any method, or for highlighting individual words included in a block of text with .write() . Limitations : Spacing will only be changed within a sequence of characters that fpdf2 adds to the PDF in one go. This means that there will be no extra distance eg. between text parts that are placed successivly with write() . Also, if you apply different font styles using the Markdown functionality of .cell() and .multi_cell() or by using html_write() , then any parts given different styles will have the original distance between them. This is so because fpdf2 has to add each styled fragment to the PDF file seperately. The example shows the same text justified to the same width, with char_spacing values of 0 and 10 (font size 8 pt). pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , \"\" , 8 ) pdf . set_fill_color ( 255 , 255 , 0 ) pdf . multi_cell ( w = 150 , txt = LOREM_IPSUM [: 200 ], new_x = \"LEFT\" , fill = True ) pdf . ln () pdf . set_char_spacing ( 10 ) pdf . multi_cell ( w = 150 , txt = LOREM_IPSUM [: 200 ], new_x = \"LEFT\" , fill = True )","title":".set_char_spacing(spacing=0)"},{"location":"TextStyling.html#subscript-superscript-and-fractional-numbers","text":"The class attribute .char_vpos controls special vertical positioning modes for text: \"LINE\" - normal line text (default) \"SUP\" - superscript (exponent) \"SUB\" - subscript (index) \"NOM\" - nominator of a fraction with \"/\" \"DENOM\" - denominator of a fraction with \"/\" For each positioning mode there are two parameters that can be configured. The defaults have been set to result in a decent layout with most fonts, and are given in parens. The size multiplier for the font size: .sup_scale (0.7) .sub_scale (0.7) .nom_scale (0.75) .denom_scale (0.75) The lift is given as fraction of the unscaled font size and indicates how much the glyph gets lifted above the base line (negative for below): .sup_lift (0.4) .sub_lift (-0.15) .nom_lift (0.2) .denom_lift (0.0) Limitations: The individual glyphs will be scaled down as configured. This is not typographically correct, as it will also reduce the stroke width, making them look lighter than the normal text. Unicode fonts may include characters in the subscripts and superscripts range . In a high quality font, those glyphs will be smaller than the normal ones, but have a proportionally stronger stroke width in order to maintain the same visual density. If available in good quality, using Characters from this range is preferred and will look better. Unfortunately, many fonts either don't (fully) cover this range, or the glyphs are of unsatisfactory quality. In those cases, this feature of fpdf2 offers a reliable workaround with suboptimal but consistent output quality. Practical use is essentially limited to .write() and html_write() . The feature does technically work with .cell() and .multi_cell , but is of limited usefulness there, since you can't change font properties in the middle of a line (there is no markdown support). It currently gets completely ignored by .text() . The example shows the most common use cases: pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , \"\" , 20 ) pdf . write ( txt = \"2\" ) pdf . char_vpos = \"SUP\" pdf . write ( txt = \"56\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \" more line text\" ) pdf . char_vpos = \"SUB\" pdf . write ( txt = \"(idx)\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \" end\" ) pdf . ln () pdf . write ( txt = \"1234 + \" ) pdf . char_vpos = \"NOM\" pdf . write ( txt = \"5\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \"/\" ) pdf . char_vpos = \"DENOM\" pdf . write ( txt = \"16\" ) pdf . char_vpos = \"LINE\" pdf . write ( txt = \" + 987 = x\" )","title":"Subscript, Superscript, and Fractional Numbers"},{"location":"TextStyling.html#text_mode","text":"The PDF spec defines several text modes: The text mode can be controlled with the .text_mode attribute. With STROKE modes, the line width is induced by .line_width , and its color can be configured with set_draw_color() . With FILL modes, the filling color can be controlled by set_fill_color() or set_text_color() . With any of the 4 CLIP modes, the letters will be filled by vector drawings made afterwards, as can be seen in this example: from fpdf import FPDF pdf = FPDF ( orientation = \"landscape\" ) pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 100 ) with pdf . local_context ( text_mode = \"STROKE\" , line_width = 2 ): pdf . cell ( txt = \"Hello world\" ) # Outside the local context, text_mode & line_width are reverted # back to their original default values pdf . ln () with pdf . local_context ( text_mode = \"CLIP\" ): pdf . cell ( txt = \"CLIP text mode\" ) for r in range ( 0 , 250 , 2 ): # drawing concentric circles pdf . circle ( x = 130 - r / 2 , y = 70 - r / 2 , r = r ) pdf . output ( \"text-modes.pdf\" ) More examples from test_text_mode.py : text_modes.pdf clip_text_modes.pdf","title":".text_mode"},{"location":"TextStyling.html#markdowntrue","text":"An optional markdown=True parameter can be passed to the cell() & multi_cell() methods in order to enable basic Markdown-like styling: **bold**, __italics__, --underlined-- Bold & italics require using dedicated fonts for each style. For the standard fonts (Courier, Helvetica & Times), those dedicated fonts are configured by default. Using other fonts means that their variants (bold, italics) must be registered using add_font (with style=\"B\" and style=\"I\" ). from fpdf import FPDF pdf = fpdf . FPDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 60 ) pdf . cell ( txt = \"**Lorem** __Ipsum__ --dolor--\" , markdown = True ) pdf . output ( \"markdown-styled.pdf\" )","title":"markdown=True"},{"location":"TextStyling.html#write_html","text":"write_html allows to set emphasis on text through the <b> , <i> and <u> tags: pdf . write_html ( \"\"\"<B>bold</B> <I>italic</I> <U>underlined</U> <B><I><U>all at once!</U></I></B>\"\"\" )","title":"write_html"},{"location":"Transparency.html","text":"Transparency The alpha opacity of text , shapes and even images can be controlled through stroke_opacity (for lines) & fill_opacity (for all other content types): pdf = FPDF () pdf . set_font ( \"Helvetica\" , \"B\" , 24 ) pdf . set_line_width ( 1.5 ) pdf . add_page () # Draw an opaque red square: pdf . set_fill_color ( 255 , 0 , 0 ) pdf . rect ( 10 , 10 , 40 , 40 , \"DF\" ) # Set alpha to semi-transparency for shape lines & filled areas: with pdf . local_context ( fill_opacity = 0.5 , stroke_opacity = 0.5 ): # Draw a green square: pdf . set_fill_color ( 0 , 255 , 0 ) pdf . rect ( 20 , 20 , 40 , 40 , \"DF\" ) # Set transparency for images & text: with pdf . local_context ( fill_opacity = 0.25 ): # Insert an image: pdf . image ( HERE / \"../docs/fpdf2-logo.png\" , 30 , 30 , 40 ) # Print some text: pdf . text ( 22 , 29 , \"You are...\" ) # Print some text with full opacity: pdf . text ( 30 , 45 , \"Over the top\" ) # Produce the resulting PDF: pdf . output ( \"transparency.pdf\" ) Results in:","title":"Transparency"},{"location":"Transparency.html#transparency","text":"The alpha opacity of text , shapes and even images can be controlled through stroke_opacity (for lines) & fill_opacity (for all other content types): pdf = FPDF () pdf . set_font ( \"Helvetica\" , \"B\" , 24 ) pdf . set_line_width ( 1.5 ) pdf . add_page () # Draw an opaque red square: pdf . set_fill_color ( 255 , 0 , 0 ) pdf . rect ( 10 , 10 , 40 , 40 , \"DF\" ) # Set alpha to semi-transparency for shape lines & filled areas: with pdf . local_context ( fill_opacity = 0.5 , stroke_opacity = 0.5 ): # Draw a green square: pdf . set_fill_color ( 0 , 255 , 0 ) pdf . rect ( 20 , 20 , 40 , 40 , \"DF\" ) # Set transparency for images & text: with pdf . local_context ( fill_opacity = 0.25 ): # Insert an image: pdf . image ( HERE / \"../docs/fpdf2-logo.png\" , 30 , 30 , 40 ) # Print some text: pdf . text ( 22 , 29 , \"You are...\" ) # Print some text with full opacity: pdf . text ( 30 , 45 , \"Over the top\" ) # Produce the resulting PDF: pdf . output ( \"transparency.pdf\" ) Results in:","title":"Transparency"},{"location":"Tutorial-de.html","text":"Kurzanleitung Vollst\u00e4ndige Dokumentation der Methoden: fpdf.FPDF API doc Kurzanleitung Lektion 1 - Minimalbeispiel Lektion 2 - Kopfzeile, Fu\u00dfzeile, Seitenumbruch und Bild Lektion 3 - Zeilenumbr\u00fcche und Farben Lektion 4 - Mehrspaltiger Text Lektion 5 - Tabellen erstellen Lektion 6 - Links erstellen und Textstile mischen Lektion 1 - Minimalbeispiel Beginnen wir mit dem Klassiker: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Erzeugtes PDF Nachdem wir die Bibliothek eingebunden haben, erstellen zuerst wir ein FPDF Objekt. Der FPDF Konstruktor wird hier mit den Standardwerten verwendet: Das Seitenformat wird auf A4-Hochformat gesetzt und als Ma\u00dfeinheit Millimeter festgelegt. Diese Werte h\u00e4tten wir auch explizit angegeben k\u00f6nnen: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) Es ist auch m\u00f6glich, eine PDF-Datei im Querformat zu erstellen ( L ), sowie andere Seitenformate ( Letter und Legal ) und Ma\u00dfeinheiten ( pt , cm , in ) zu verwenden. Bisher haben wir dem Dokument noch keine Seite hinzugef\u00fcgt. Um eine Seite hinzuzuf\u00fcgen, verwenden wir add_page . Der Ursprung der Koordinaten liegt in der oberen linken Ecke und die aktuelle Schreibposition ist standardm\u00e4\u00dfig jeweils 1 cm von den R\u00e4ndern entfernt. Diese Randabst\u00e4nde k\u00f6nnen mit set_margins angespasst werden. Bevor wir Text hinzuf\u00fcgen k\u00f6nnen, m\u00fcssen wir zuerst mit set_font eine Schriftart festlegen, um ein g\u00fcltiges Dokument zu erzeugen. Wir w\u00e4hlen Helvetica, fett in Schriftgr\u00f6\u00dfe 16 pt: pdf . set_font ( 'helvetica' , 'B' , 16 ) Anstelle von B h\u00e4tten wir mit I kursiv , U unterstichen oder durch die \u00dcbergabe einer leeren Zeichenkette einen \"normale\" Textstil w\u00e4hlen k\u00f6nnen. Beliebige Kombinationen der drei Werte sind zul\u00e4ssig. Beachte, dass die Schriftgr\u00f6\u00dfe in Punkt und nicht in Millimetern (oder einer anderen durch den Benutzer bei der Erstellung mit unit= festgelegten Ma\u00dfeinheit) angegeben wird. Dies ist die einzige Ausnahme vom Grundsatz, dass immer die durch den Benutzer gew\u00e4hlte Ma\u00dfeinheit bei der Festlegung von Positions- oder Gr\u00f6\u00dfenangaben genutzt wird. Neben Helvetica stehen Times , Courier , Symbol und ZapfDingbats als Standardschriftarten zur Verf\u00fcgung. Wir k\u00f6nnen jetzt eine erste Textzelle mit cell einf\u00fcgen. Eine Zelle ist ein rechteckiger Bereich - optional umrahmt - der Text enthalten kann. Sie wird an der jeweils aktuellen Schreibposition gerendert. Wir k\u00f6nnen die Abmessungen der Zelle, den Text und dessen Formatierung (zentriert oder ausgerichtet), einen ggf. gew\u00fcnschten Rahmen und die Festlegung der neuen Schreibposition nach dem Schreiben der Zelle (rechts, unten oder am Anfang der n\u00e4chsten Zeile) bestimmen. Um einen Rahmen hinzuzuf\u00fcgen, w\u00fcrden wir die Methode folgenderma\u00dfen einbinden: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Um eine neue Zelle mit zentriertem Text hinzuzuf\u00fcgen und anschlie\u00dfend in die n\u00e4chste Zeile zu springen, k\u00f6nnen wir Folgendes schreiben: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Anmerkung : Der Zeilenumbruch kann auch mit ln erfolgen. Diese Methode erlaubt es, zus\u00e4tzlich die H\u00f6he des Umbruchs anzugeben. Schlie\u00dflich wird das Dokument mit output geschlossen und unter dem angegebenen Dateipfad gespeichert. Ohne Angabe eines Parameters liefert output() den PDF bytearray -Puffer zur\u00fcck. Lektion 2 - Kopfzeile, Fu\u00dfzeile, Seitenumbruch und Bild Hier ein zweiseitiges Beispiel mit Kopfzeile, Fu\u00dfzeile und Logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Erzeugtes PDF Dieses Beispiel verwendet die Methoden header und footer , um Kopf- und Fu\u00dfzeilen zu verarbeiten. Sie werden jeweils automatisch aufgerufen. Die Methode 'header' direkt nach dem Hinzug\u00fcgen einer neuen Seite, die Methode 'footer' wenn die Bearbeitung einer Seite durch das Hinzuf\u00fcgen einer weiteren Seite oder das Abspeichern des Dokuments abgeschlossen wird. Die Methoden existieren bereits in der Klasse FPDF, sind aber leer. Um sie zu nutzen, m\u00fcssen wir die Klasse erweitern und sie \u00fcberschreiben. Das Logo wird mit der Methode image eingebunden, und auf der Seite durch die Angabe der Position der linken oberen Ecke und die gew\u00fcnschte Bildbreite platziert. Die H\u00f6he wird automatisch berechnet, um die Proportionen des Bildes zu erhalten. Um die Seitenzahl einzuf\u00fcgenn, \u00fcbergeben wir zuerst der Zelle einen Nullwert als Breite der Zelle. Das bedeutet, dass die Zelle bis zum rechten Rand der Seite reichen soll. Das ist besonders praktisch, um Text zu zentrieren. Die aktuelle Seitenzahl wird durch die Methode page_no ermittelt und in die Zelle geschrieben. Die Gesamtseitenzahl wird mit Hilfe des speziellen Platzhalterwertes {nb} ermittelt, der beim Schlie\u00dfen des Dokuments ersetzt wird aufgerufen. Beachte die Verwendung der Methode set_y , mit der du die vertikale Schreibposition an einer absoluten Stelle der Seite - von oben oder von unten aus - setzen kannst. Eine weitere interessante Funktion wird hier ebenfalls verwendet: der automatische Seitenumbruch. Sobald eine Zelle eine festgelegte Grenze in der Seite \u00fcberschreitet (standardm\u00e4\u00dfig 2 Zentimeter vom unteren Rand), wird ein Seitenumbruch durchgef\u00fchrt und die Einstellungen der gewahlten Schrift auf der n\u00e4chsten Seite automatisch beibehalten. Obwohl die Kopf- und Fu\u00dfzeilen ihre eigene Schriftart ( Helvetica ) w\u00e4hlen, wird im Textk\u00f6rper Times verwendet. Dieser Mechanismus der automatischen \u00dcbernahme der Einstellungen nach Seitenumbruch gilt auch f\u00fcr Farben und Zeilenbreite. Der Grenzwert, der den Seitenumbruch ausl\u00f6st, kann mit set_auto_page_break festgelegt werden . Lektion 3 - Zeilenumbr\u00fcche und Farben Fahren wir mit einem Beispiel fort, das Abs\u00e4tze im Blocksatz ausgibt. Es demonstriert auch die Verwendung von Farben. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Resulting PDF Jules Verne text Die Methode get_string_width erm\u00f6glicht die Bestimmung die Breite des \u00fcbergebenen Textes in der aktuellen Schriftart. Das Beispiel nutzt sie zur Berechnung der Position und der Breite des Rahmens, der den Titel umgibt. Anschlie\u00dfend werden die Farben mit set_draw_color , set_fill_color und und set_text_color gesetzt und die Linienst\u00e4rke mit set_line_width auf 1 mm (Abweichend vom Standardwert von 0,2) festgelegt. Schlie\u00dflich geben wir die Zelle aus (Der letzte Parameter True zeigt an, dass der Hintergrund gef\u00fcllt werden muss). Zur Erstellung von Abs\u00e4tzen wir die Methode multi_cell genutzt. Jedes Mal, wenn eine Zeile den rechten Rand der Zelle erreicht oder ein Zeilenumbruchzeichen \\\\n im Text erkannt wird, wird ein Zeilenumbruch durchgef\u00fchrt und automatisch eine neue Zelle unterhalb der aktuellen Zelle erstellt. Der Text wird standardm\u00e4\u00dfig im Blocksatz ausgerichtet. Es werden zwei Dokumenteigenschaften definiert: Titel ( set_title ) und Autor ( set_author ). Dokumenteneigenschaften k\u00f6nnen auf zwei Arten eingesehen werden. Man kann das Dokument mit dem Acrobat Reader \u00f6ffnen und im Men\u00fc Datei die Option Dokumenteigenschaften ausw\u00e4hlen. Alternativ kann man auch mit der rechten Maustaste auf das Dokument klicken und die Option Dokumenteigenschaften w\u00e4hlen. Lektion 4 - Mehrspaltiger Text Dieses Beispiel ist eine Abwandlung des vorherigen Beispiels und zeigt, wie sich Text \u00fcber mehrere Spalten verteilen l\u00e4sst. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Erzeugtes PDF Jules Verne Text Der Hauptunterschied zur vorherigen Lektion ist die Verwendung der Methoden accept_page_break und set_col . Wird accept_page_break verwendet, wird die aktuelle Spaltennummer \u00fcberpr\u00fcft, sobald die Zelle den zur Ausl\u00f6sung eines Seitenumbruchs festgelegten Abstand zum unteren Seitenrand (Standard 2cm) \u00fcberschreitet. Ist die Spaltennummer kleiner als 2 (wir haben uns entschieden, die Seite in drei Spalten zu unterteilen), wird die Methode set_col aufgerufen. Sie erh\u00f6ht die Spaltennummer auf die n\u00e4chsth\u00f6here und setzt die Schreibposition auf den Anfang der n\u00e4chsten Spalte, damit der Text dort fortgesetzt werden kann. Sobald det Text der dritten den oben beschriebenen Abstand zum Seitenende erreicht, wird durch die Methode accept_page_break ein Seitenumbruch ausgel\u00f6st und die aktive Spalte sowie Schreibposition zur\u00fcckgesetzt. Lektion 5 - Tabellen erstellen In dieser Lektion zeigen wir, wie man auf einfache Weise Tabellen erstellen kann. Der Code wird drei verschiedene Tabellen erstellen, um zu zeigen, welche Effekte wir mit einigen einfachen Anpassungen erzielen k\u00f6nnen. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Erzeugtes PDF - L\u00e4nder Da eine Tabelle lediglich eine Sammlung von Zellen darstellt, ist es naheliegend, eine Tabelle aus den bereits bekannten Zellen aufzubauen. Das erste Beispiel wird auf die einfachste Art und Weise realisiert. Einfach gerahmte Zellen, die alle die gleiche Gr\u00f6\u00dfe haben und linksb\u00fcndig ausgerichtet sind. Das Ergebnis ist rudiment\u00e4r, aber sehr schnell zu erzielen. Die zweite Tabelle bringt einige Verbesserungen: Jede Spalte hat ihre eigene Breite, die \u00dcberschriften sind zentriert und die Zahlen rechtsb\u00fcndig ausgerichtet. Au\u00dferdem wurden die horizontalen Linien entfernt. Dies geschieht mit Hilfe des Randparameters der Methode cell() , der angibt, welche Seiten der Zelle gezeichnet werden m\u00fcssen. Im Beispiel w\u00e4hlen wir die linke (L) und die rechte (R) Seite. Jetzt muss nur noch das Problem der horizontalen Linie zum Abschluss der Tabelle gel\u00f6st werden. Es gibt zwei M\u00f6glichkeiten, es zu l\u00f6sen: In der Schleife pr\u00fcfen, ob wir uns in der letzten Zeile befinden und dann \"LRB\" als Rahmenparameter \u00fcbergeben oder, wie hier geschehen, eine abschlie\u00dfende Zelle separat nach dem Durchlaufen der Schleife einf\u00fcgen. Die dritte Tabelle der zweiten sehr \u00e4hnlich, verwendet aber zus\u00e4tzlich Farben. F\u00fcllung, Text und Linienfarben werden einfach mit den entsprechenden Methoden gesetzt. Eine wechselnde F\u00e4rbung der Zeilen wird durch die abwechselnde Verwendung transparenter und gef\u00fcllter Zellen erreicht. Lektion 6 - Links erstellen und Textstile mischen In dieser Lektion werden verschiedene M\u00f6glichkeiten der Erstellung interner und externer Links beschrieben. Es wird auch gezeigt, wie man verschiedene Textstile (fett, kursiv, unterstrichen) innerhalb eines Textes verwenden kann. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Erzeugtes PDF - fpdf2-logo Die hier gezeigte neue Methode zur Einbindung von Text lautet write() . Sie \u00e4hnelt der bereits bekannten multi_cell() . Die wichtigsten Unterschiede sind: Das Ende der Zeile befindet sich am rechten Rand und die n\u00e4chste Zeile beginnt am linken Rand. Die aktuelle Position wird an das Textende gesetzt. Die Methode erm\u00f6glicht es uns somit, zuerst einen Textabschnitt zu schreiben, dann den Schriftstil zu \u00e4ndern und genau an der Stelle fortzufahren, an der wir aufgeh\u00f6rt haben. Der gr\u00f6\u00dfte Nachteil ist jedoch, dass die von multi_cell() bekannte M\u00f6glichkeit zur Festlegung der Textausrichtung fehlt. Auf der ersten Seite des Beispiels nutzen wir write() . Der Anfang des Satzes wird in \"normalem\" Stil geschrieben, dann mit der Methode set_font() auf Unterstreichung umgestellt und der Satz beendet. Um einen internen Link hinzuzuf\u00fcgen, der auf die zweite Seite verweist, nutzen wir die Methode add_link() , die einen anklickbaren Bereich erzeugt, den wir \"link\" nennen und der auf eine andere Stelle innerhalb des Dokuments verweist. Auf der zweiten Seite verwenden wir set_link() , um den Zielbereich f\u00fcr den soeben erstellten Link zu definieren. Um einen externen Link mit Hilfe eines Bildes zu erstellen, verwenden wir image() . Es besteht die M\u00f6glichkeit, der Methode ein Linkziel als eines ihrer Argumente zu \u00fcbergeben. Der Link kann sowohl einer interner als auch ein externer sein. Eine weitere M\u00f6glichkeit, den Schriftstil zu \u00e4ndern und Links hinzuzuf\u00fcgen, stellt die Verwendung der Methode write_html() dar. Sie ist ein HTML-Parser, der das Hinzuf\u00fcgen von Text, \u00c4nderung des Schriftstils und Erstellen von Links mittels HTML erm\u00f6glicht.","title":"Tutorial auf Deutsch"},{"location":"Tutorial-de.html#kurzanleitung","text":"Vollst\u00e4ndige Dokumentation der Methoden: fpdf.FPDF API doc Kurzanleitung Lektion 1 - Minimalbeispiel Lektion 2 - Kopfzeile, Fu\u00dfzeile, Seitenumbruch und Bild Lektion 3 - Zeilenumbr\u00fcche und Farben Lektion 4 - Mehrspaltiger Text Lektion 5 - Tabellen erstellen Lektion 6 - Links erstellen und Textstile mischen","title":"Kurzanleitung"},{"location":"Tutorial-de.html#lektion-1-minimalbeispiel","text":"Beginnen wir mit dem Klassiker: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Erzeugtes PDF Nachdem wir die Bibliothek eingebunden haben, erstellen zuerst wir ein FPDF Objekt. Der FPDF Konstruktor wird hier mit den Standardwerten verwendet: Das Seitenformat wird auf A4-Hochformat gesetzt und als Ma\u00dfeinheit Millimeter festgelegt. Diese Werte h\u00e4tten wir auch explizit angegeben k\u00f6nnen: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) Es ist auch m\u00f6glich, eine PDF-Datei im Querformat zu erstellen ( L ), sowie andere Seitenformate ( Letter und Legal ) und Ma\u00dfeinheiten ( pt , cm , in ) zu verwenden. Bisher haben wir dem Dokument noch keine Seite hinzugef\u00fcgt. Um eine Seite hinzuzuf\u00fcgen, verwenden wir add_page . Der Ursprung der Koordinaten liegt in der oberen linken Ecke und die aktuelle Schreibposition ist standardm\u00e4\u00dfig jeweils 1 cm von den R\u00e4ndern entfernt. Diese Randabst\u00e4nde k\u00f6nnen mit set_margins angespasst werden. Bevor wir Text hinzuf\u00fcgen k\u00f6nnen, m\u00fcssen wir zuerst mit set_font eine Schriftart festlegen, um ein g\u00fcltiges Dokument zu erzeugen. Wir w\u00e4hlen Helvetica, fett in Schriftgr\u00f6\u00dfe 16 pt: pdf . set_font ( 'helvetica' , 'B' , 16 ) Anstelle von B h\u00e4tten wir mit I kursiv , U unterstichen oder durch die \u00dcbergabe einer leeren Zeichenkette einen \"normale\" Textstil w\u00e4hlen k\u00f6nnen. Beliebige Kombinationen der drei Werte sind zul\u00e4ssig. Beachte, dass die Schriftgr\u00f6\u00dfe in Punkt und nicht in Millimetern (oder einer anderen durch den Benutzer bei der Erstellung mit unit= festgelegten Ma\u00dfeinheit) angegeben wird. Dies ist die einzige Ausnahme vom Grundsatz, dass immer die durch den Benutzer gew\u00e4hlte Ma\u00dfeinheit bei der Festlegung von Positions- oder Gr\u00f6\u00dfenangaben genutzt wird. Neben Helvetica stehen Times , Courier , Symbol und ZapfDingbats als Standardschriftarten zur Verf\u00fcgung. Wir k\u00f6nnen jetzt eine erste Textzelle mit cell einf\u00fcgen. Eine Zelle ist ein rechteckiger Bereich - optional umrahmt - der Text enthalten kann. Sie wird an der jeweils aktuellen Schreibposition gerendert. Wir k\u00f6nnen die Abmessungen der Zelle, den Text und dessen Formatierung (zentriert oder ausgerichtet), einen ggf. gew\u00fcnschten Rahmen und die Festlegung der neuen Schreibposition nach dem Schreiben der Zelle (rechts, unten oder am Anfang der n\u00e4chsten Zeile) bestimmen. Um einen Rahmen hinzuzuf\u00fcgen, w\u00fcrden wir die Methode folgenderma\u00dfen einbinden: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Um eine neue Zelle mit zentriertem Text hinzuzuf\u00fcgen und anschlie\u00dfend in die n\u00e4chste Zeile zu springen, k\u00f6nnen wir Folgendes schreiben: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Anmerkung : Der Zeilenumbruch kann auch mit ln erfolgen. Diese Methode erlaubt es, zus\u00e4tzlich die H\u00f6he des Umbruchs anzugeben. Schlie\u00dflich wird das Dokument mit output geschlossen und unter dem angegebenen Dateipfad gespeichert. Ohne Angabe eines Parameters liefert output() den PDF bytearray -Puffer zur\u00fcck.","title":"Lektion 1 - Minimalbeispiel"},{"location":"Tutorial-de.html#lektion-2-kopfzeile-fuzeile-seitenumbruch-und-bild","text":"Hier ein zweiseitiges Beispiel mit Kopfzeile, Fu\u00dfzeile und Logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Erzeugtes PDF Dieses Beispiel verwendet die Methoden header und footer , um Kopf- und Fu\u00dfzeilen zu verarbeiten. Sie werden jeweils automatisch aufgerufen. Die Methode 'header' direkt nach dem Hinzug\u00fcgen einer neuen Seite, die Methode 'footer' wenn die Bearbeitung einer Seite durch das Hinzuf\u00fcgen einer weiteren Seite oder das Abspeichern des Dokuments abgeschlossen wird. Die Methoden existieren bereits in der Klasse FPDF, sind aber leer. Um sie zu nutzen, m\u00fcssen wir die Klasse erweitern und sie \u00fcberschreiben. Das Logo wird mit der Methode image eingebunden, und auf der Seite durch die Angabe der Position der linken oberen Ecke und die gew\u00fcnschte Bildbreite platziert. Die H\u00f6he wird automatisch berechnet, um die Proportionen des Bildes zu erhalten. Um die Seitenzahl einzuf\u00fcgenn, \u00fcbergeben wir zuerst der Zelle einen Nullwert als Breite der Zelle. Das bedeutet, dass die Zelle bis zum rechten Rand der Seite reichen soll. Das ist besonders praktisch, um Text zu zentrieren. Die aktuelle Seitenzahl wird durch die Methode page_no ermittelt und in die Zelle geschrieben. Die Gesamtseitenzahl wird mit Hilfe des speziellen Platzhalterwertes {nb} ermittelt, der beim Schlie\u00dfen des Dokuments ersetzt wird aufgerufen. Beachte die Verwendung der Methode set_y , mit der du die vertikale Schreibposition an einer absoluten Stelle der Seite - von oben oder von unten aus - setzen kannst. Eine weitere interessante Funktion wird hier ebenfalls verwendet: der automatische Seitenumbruch. Sobald eine Zelle eine festgelegte Grenze in der Seite \u00fcberschreitet (standardm\u00e4\u00dfig 2 Zentimeter vom unteren Rand), wird ein Seitenumbruch durchgef\u00fchrt und die Einstellungen der gewahlten Schrift auf der n\u00e4chsten Seite automatisch beibehalten. Obwohl die Kopf- und Fu\u00dfzeilen ihre eigene Schriftart ( Helvetica ) w\u00e4hlen, wird im Textk\u00f6rper Times verwendet. Dieser Mechanismus der automatischen \u00dcbernahme der Einstellungen nach Seitenumbruch gilt auch f\u00fcr Farben und Zeilenbreite. Der Grenzwert, der den Seitenumbruch ausl\u00f6st, kann mit set_auto_page_break festgelegt werden .","title":"Lektion 2 - Kopfzeile, Fu\u00dfzeile, Seitenumbruch und Bild"},{"location":"Tutorial-de.html#lektion-3-zeilenumbruche-und-farben","text":"Fahren wir mit einem Beispiel fort, das Abs\u00e4tze im Blocksatz ausgibt. Es demonstriert auch die Verwendung von Farben. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Resulting PDF Jules Verne text Die Methode get_string_width erm\u00f6glicht die Bestimmung die Breite des \u00fcbergebenen Textes in der aktuellen Schriftart. Das Beispiel nutzt sie zur Berechnung der Position und der Breite des Rahmens, der den Titel umgibt. Anschlie\u00dfend werden die Farben mit set_draw_color , set_fill_color und und set_text_color gesetzt und die Linienst\u00e4rke mit set_line_width auf 1 mm (Abweichend vom Standardwert von 0,2) festgelegt. Schlie\u00dflich geben wir die Zelle aus (Der letzte Parameter True zeigt an, dass der Hintergrund gef\u00fcllt werden muss). Zur Erstellung von Abs\u00e4tzen wir die Methode multi_cell genutzt. Jedes Mal, wenn eine Zeile den rechten Rand der Zelle erreicht oder ein Zeilenumbruchzeichen \\\\n im Text erkannt wird, wird ein Zeilenumbruch durchgef\u00fchrt und automatisch eine neue Zelle unterhalb der aktuellen Zelle erstellt. Der Text wird standardm\u00e4\u00dfig im Blocksatz ausgerichtet. Es werden zwei Dokumenteigenschaften definiert: Titel ( set_title ) und Autor ( set_author ). Dokumenteneigenschaften k\u00f6nnen auf zwei Arten eingesehen werden. Man kann das Dokument mit dem Acrobat Reader \u00f6ffnen und im Men\u00fc Datei die Option Dokumenteigenschaften ausw\u00e4hlen. Alternativ kann man auch mit der rechten Maustaste auf das Dokument klicken und die Option Dokumenteigenschaften w\u00e4hlen.","title":"Lektion 3 - Zeilenumbr\u00fcche und Farben"},{"location":"Tutorial-de.html#lektion-4-mehrspaltiger-text","text":"Dieses Beispiel ist eine Abwandlung des vorherigen Beispiels und zeigt, wie sich Text \u00fcber mehrere Spalten verteilen l\u00e4sst. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Erzeugtes PDF Jules Verne Text Der Hauptunterschied zur vorherigen Lektion ist die Verwendung der Methoden accept_page_break und set_col . Wird accept_page_break verwendet, wird die aktuelle Spaltennummer \u00fcberpr\u00fcft, sobald die Zelle den zur Ausl\u00f6sung eines Seitenumbruchs festgelegten Abstand zum unteren Seitenrand (Standard 2cm) \u00fcberschreitet. Ist die Spaltennummer kleiner als 2 (wir haben uns entschieden, die Seite in drei Spalten zu unterteilen), wird die Methode set_col aufgerufen. Sie erh\u00f6ht die Spaltennummer auf die n\u00e4chsth\u00f6here und setzt die Schreibposition auf den Anfang der n\u00e4chsten Spalte, damit der Text dort fortgesetzt werden kann. Sobald det Text der dritten den oben beschriebenen Abstand zum Seitenende erreicht, wird durch die Methode accept_page_break ein Seitenumbruch ausgel\u00f6st und die aktive Spalte sowie Schreibposition zur\u00fcckgesetzt.","title":"Lektion 4 - Mehrspaltiger Text"},{"location":"Tutorial-de.html#lektion-5-tabellen-erstellen","text":"In dieser Lektion zeigen wir, wie man auf einfache Weise Tabellen erstellen kann. Der Code wird drei verschiedene Tabellen erstellen, um zu zeigen, welche Effekte wir mit einigen einfachen Anpassungen erzielen k\u00f6nnen. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Erzeugtes PDF - L\u00e4nder Da eine Tabelle lediglich eine Sammlung von Zellen darstellt, ist es naheliegend, eine Tabelle aus den bereits bekannten Zellen aufzubauen. Das erste Beispiel wird auf die einfachste Art und Weise realisiert. Einfach gerahmte Zellen, die alle die gleiche Gr\u00f6\u00dfe haben und linksb\u00fcndig ausgerichtet sind. Das Ergebnis ist rudiment\u00e4r, aber sehr schnell zu erzielen. Die zweite Tabelle bringt einige Verbesserungen: Jede Spalte hat ihre eigene Breite, die \u00dcberschriften sind zentriert und die Zahlen rechtsb\u00fcndig ausgerichtet. Au\u00dferdem wurden die horizontalen Linien entfernt. Dies geschieht mit Hilfe des Randparameters der Methode cell() , der angibt, welche Seiten der Zelle gezeichnet werden m\u00fcssen. Im Beispiel w\u00e4hlen wir die linke (L) und die rechte (R) Seite. Jetzt muss nur noch das Problem der horizontalen Linie zum Abschluss der Tabelle gel\u00f6st werden. Es gibt zwei M\u00f6glichkeiten, es zu l\u00f6sen: In der Schleife pr\u00fcfen, ob wir uns in der letzten Zeile befinden und dann \"LRB\" als Rahmenparameter \u00fcbergeben oder, wie hier geschehen, eine abschlie\u00dfende Zelle separat nach dem Durchlaufen der Schleife einf\u00fcgen. Die dritte Tabelle der zweiten sehr \u00e4hnlich, verwendet aber zus\u00e4tzlich Farben. F\u00fcllung, Text und Linienfarben werden einfach mit den entsprechenden Methoden gesetzt. Eine wechselnde F\u00e4rbung der Zeilen wird durch die abwechselnde Verwendung transparenter und gef\u00fcllter Zellen erreicht.","title":"Lektion 5 - Tabellen erstellen"},{"location":"Tutorial-de.html#lektion-6-links-erstellen-und-textstile-mischen","text":"In dieser Lektion werden verschiedene M\u00f6glichkeiten der Erstellung interner und externer Links beschrieben. Es wird auch gezeigt, wie man verschiedene Textstile (fett, kursiv, unterstrichen) innerhalb eines Textes verwenden kann. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Erzeugtes PDF - fpdf2-logo Die hier gezeigte neue Methode zur Einbindung von Text lautet write() . Sie \u00e4hnelt der bereits bekannten multi_cell() . Die wichtigsten Unterschiede sind: Das Ende der Zeile befindet sich am rechten Rand und die n\u00e4chste Zeile beginnt am linken Rand. Die aktuelle Position wird an das Textende gesetzt. Die Methode erm\u00f6glicht es uns somit, zuerst einen Textabschnitt zu schreiben, dann den Schriftstil zu \u00e4ndern und genau an der Stelle fortzufahren, an der wir aufgeh\u00f6rt haben. Der gr\u00f6\u00dfte Nachteil ist jedoch, dass die von multi_cell() bekannte M\u00f6glichkeit zur Festlegung der Textausrichtung fehlt. Auf der ersten Seite des Beispiels nutzen wir write() . Der Anfang des Satzes wird in \"normalem\" Stil geschrieben, dann mit der Methode set_font() auf Unterstreichung umgestellt und der Satz beendet. Um einen internen Link hinzuzuf\u00fcgen, der auf die zweite Seite verweist, nutzen wir die Methode add_link() , die einen anklickbaren Bereich erzeugt, den wir \"link\" nennen und der auf eine andere Stelle innerhalb des Dokuments verweist. Auf der zweiten Seite verwenden wir set_link() , um den Zielbereich f\u00fcr den soeben erstellten Link zu definieren. Um einen externen Link mit Hilfe eines Bildes zu erstellen, verwenden wir image() . Es besteht die M\u00f6glichkeit, der Methode ein Linkziel als eines ihrer Argumente zu \u00fcbergeben. Der Link kann sowohl einer interner als auch ein externer sein. Eine weitere M\u00f6glichkeit, den Schriftstil zu \u00e4ndern und Links hinzuzuf\u00fcgen, stellt die Verwendung der Methode write_html() dar. Sie ist ein HTML-Parser, der das Hinzuf\u00fcgen von Text, \u00c4nderung des Schriftstils und Erstellen von Links mittels HTML erm\u00f6glicht.","title":"Lektion 6 - Links erstellen und Textstile mischen"},{"location":"Tutorial-es.html","text":"Los diferentes ejemplos muestran r\u00e1pidamente como usar fpdf2. Encontrar\u00e1 todas las caracter\u00edsticas principales explicadas. Ejemplo b\u00e1sico Encabezado, pie de p\u00e1gina, salto de p\u00e1gina e imagen Saltos de l\u00ednea y colores Ejemplo b\u00e1sico Empecemos con el ejemplo cl\u00e1sico: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Demo Luego de incluir la biblioteca, creamos un objeto FPDF. El constructor FPDF es usado aqu\u00ed con los valores predeterminados: p\u00e1ginas en A4 portrait -vertical- y la unidad de medida en mil\u00edmetros. Podr\u00eda haberlos especificado expl\u00edcitamente: pdf = FPDF ( 'P' , 'mm' , 'A4' ) Es posible usar landscape -horizontal- (L), otros formatos de p\u00e1gina (como Letter -carta- y Legal -oficio-) y unidad de medida (pt, cm, in). Por el momento no hay una p\u00e1gina, entonces tenemos que agregar una con add_page . El origen es la esquina superior-izquierda y la posici\u00f3n actual est\u00e1 ubicada a 1 cm de los bordes; los m\u00e1rgenes pueden ser cambiados con set_margins . Antes de que podamos imprimir texto, es obligatorio seleccionar una fuente con set_font , de lo contrario, el documento ser\u00e1 inv\u00e1lido. Elegimos helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) Podr\u00edamos haber especificado italic -cursiva- con I, underline -subrayado- con U o fuente regular con string vac\u00edo (o cualquier combinaci\u00f3n). Notar que el tama\u00f1o de la fuente es dado en puntos, no mil\u00edmetros (u otra unidad de medida del usuario); \u00e9sta es la \u00fanica excepci\u00f3n. Las otras fuentes est\u00e1ndar son Times, Courier, Symbol y ZapfDingbats. Podemos ahora imprimir una celda con cell . Una celda es un \u00e1rea rectangular, posiblemente enmarcada, que contiene alg\u00fan texto. Se imprime en la posici\u00f3n actual. Especificamos sus dimensiones, su texto (centrado o alineado), si los bordes deber\u00edan ser dibujados, y donde la posici\u00f3n actual se mueve despu\u00e9s (a la derecha, abajo o al principio de la pr\u00f3xima linea). Para agregar un marco, haremos: pdf . cell ( 40 , 10 , 'Hola mundo !' , 1 ) Para agregar una nueva celda pr\u00f3xima a ella, con texto centrado y luego ir a la siguiente l\u00ednea, har\u00edamos: pdf . cell ( 60 , 10 , 'Hecho con FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Nota : el salto de l\u00ednea puede hacerse tambi\u00e9n con ln . Este m\u00e9todo permite especificar adicionalmente la altura del salto. Finalmente, el documento es cerrado y enviado al explorador con output . Podemos haberlo grabado a un fichero al pasarle el nombre de archivo. Precauci\u00f3n : en caso cuando el PDF es enviado al explorador, nada m\u00e1s debe ser enviado a la salida, ni antes ni despu\u00e9s (el m\u00ednimo caracter importa). Encabezado, pie de p\u00e1gina, salto de p\u00e1gina e imagen Aqu\u00ed hay un ejemplo de dos p\u00e1ginas con encabezado, pie y logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Demo Este ejemplo hace uso de m\u00e9todos header y footer para procesar el encabezado y pie de p\u00e1gina. Son llamados autom\u00e1ticamente. Ya existen en la clase FPDF pero no hacen nada por s\u00ed solos, por lo tanto tenemos que extender la clase y sobreescribirlos. El logo es impreso con el m\u00e9todo image especificando su esquina superior izquierda y su ancho. La altura es calculada autom\u00e1ticamente para respetar las proporciones de la imagen. Para imprimir el n\u00famero de p\u00e1gina, un valor nulo es pasado como ancho de celda. Significa que la celda deber\u00e1 ser extendida hasta el margen derecho de la p\u00e1gina; es \u00fatil centrar texto. El n\u00famero de p\u00e1gina actual es devuelto por el m\u00e9todo page_no ; y para el n\u00famero total de p\u00e1ginas, \u00e9ste ser\u00e1 obtenido mediante el valor especial {nb} que ser\u00e1 sustituido al cerrar el documento. Notar el uso del m\u00e9todo set_y que permite establecer la posici\u00f3n en una ubicaci\u00f3n absoluta en la p\u00e1gina, empezando desde arriba hacia abajo. Otra caracter\u00edstica interesante es usada aqu\u00ed: el salto de p\u00e1gina autom\u00e1tico. Tan pronto una celda cruza el l\u00edmite de una p\u00e1gina (por defecto a 2 cent\u00edmetros desde abajo), un salto es realizado y la fuente es restaurada. Aunque el encabezado y pie de p\u00e1gina tienen su propia fuente (helvetica), el cuerpo contin\u00faa en Times. Este mecanismo de restauraci\u00f3n autom\u00e1tica tambi\u00e9n se aplica a los colores y el ancho de la l\u00ednea. El l\u00edmite que dispara los saltos de p\u00e1gina puede establecerse con set_auto_page_break . Saltos de l\u00ednea y colores Continuemos con un ejemplo que imprime p\u00e1rrafos justificados. Tambi\u00e9n ilustra el uso de colores. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Demo El m\u00e9todo get_string_width permite determinar la longitud de una cadena en la fuente actual, usado aqu\u00ed para calcular la posici\u00f3n y el ancho del marco que rodea al t\u00edtulo. Los colores son establecidos (v\u00eda set_draw_color , set_fill_color y set_text_color ) y el grosor de la l\u00ednea es establecido a 1 mm (contra 0.2 por defecto) con set_line_width . Finalmente, emitimos la celda (el \u00faltimo par\u00e1metro es True para indicar que el fondo debe ser rellenado). El m\u00e9todo usado para imprimir p\u00e1rrafos es multi_cell . Cada vez que una l\u00ednea alcanza el extremo derecho de la celda o un caracter de retorno de l\u00ednea, un salto de l\u00ednea es emitido y una nueva celda es autom\u00e1ticamente creada bajo la actual. El texto es justificado por defecto. Dos propiedades del documento son definidas: el t\u00edtulo ( set_title ) y el autor ( set_author ). Las propiedades pueden ser vistas de dos formas. La primera es abrir el documento directamente con Acrobat Reader, ir al men\u00fa Archivo y elegir la opci\u00f3n Propiedades del Documento. La segunda, tambi\u00e9n disponible en el plug-in, es hacer clic izquierdo y seleccionar Propiedades del documento (Document Properties).","title":"Tutorial en espa\u00f1ol"},{"location":"Tutorial-es.html#ejemplo-basico","text":"Empecemos con el ejemplo cl\u00e1sico: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Demo Luego de incluir la biblioteca, creamos un objeto FPDF. El constructor FPDF es usado aqu\u00ed con los valores predeterminados: p\u00e1ginas en A4 portrait -vertical- y la unidad de medida en mil\u00edmetros. Podr\u00eda haberlos especificado expl\u00edcitamente: pdf = FPDF ( 'P' , 'mm' , 'A4' ) Es posible usar landscape -horizontal- (L), otros formatos de p\u00e1gina (como Letter -carta- y Legal -oficio-) y unidad de medida (pt, cm, in). Por el momento no hay una p\u00e1gina, entonces tenemos que agregar una con add_page . El origen es la esquina superior-izquierda y la posici\u00f3n actual est\u00e1 ubicada a 1 cm de los bordes; los m\u00e1rgenes pueden ser cambiados con set_margins . Antes de que podamos imprimir texto, es obligatorio seleccionar una fuente con set_font , de lo contrario, el documento ser\u00e1 inv\u00e1lido. Elegimos helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) Podr\u00edamos haber especificado italic -cursiva- con I, underline -subrayado- con U o fuente regular con string vac\u00edo (o cualquier combinaci\u00f3n). Notar que el tama\u00f1o de la fuente es dado en puntos, no mil\u00edmetros (u otra unidad de medida del usuario); \u00e9sta es la \u00fanica excepci\u00f3n. Las otras fuentes est\u00e1ndar son Times, Courier, Symbol y ZapfDingbats. Podemos ahora imprimir una celda con cell . Una celda es un \u00e1rea rectangular, posiblemente enmarcada, que contiene alg\u00fan texto. Se imprime en la posici\u00f3n actual. Especificamos sus dimensiones, su texto (centrado o alineado), si los bordes deber\u00edan ser dibujados, y donde la posici\u00f3n actual se mueve despu\u00e9s (a la derecha, abajo o al principio de la pr\u00f3xima linea). Para agregar un marco, haremos: pdf . cell ( 40 , 10 , 'Hola mundo !' , 1 ) Para agregar una nueva celda pr\u00f3xima a ella, con texto centrado y luego ir a la siguiente l\u00ednea, har\u00edamos: pdf . cell ( 60 , 10 , 'Hecho con FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Nota : el salto de l\u00ednea puede hacerse tambi\u00e9n con ln . Este m\u00e9todo permite especificar adicionalmente la altura del salto. Finalmente, el documento es cerrado y enviado al explorador con output . Podemos haberlo grabado a un fichero al pasarle el nombre de archivo. Precauci\u00f3n : en caso cuando el PDF es enviado al explorador, nada m\u00e1s debe ser enviado a la salida, ni antes ni despu\u00e9s (el m\u00ednimo caracter importa).","title":"Ejemplo b\u00e1sico"},{"location":"Tutorial-es.html#encabezado-pie-de-pagina-salto-de-pagina-e-imagen","text":"Aqu\u00ed hay un ejemplo de dos p\u00e1ginas con encabezado, pie y logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Demo Este ejemplo hace uso de m\u00e9todos header y footer para procesar el encabezado y pie de p\u00e1gina. Son llamados autom\u00e1ticamente. Ya existen en la clase FPDF pero no hacen nada por s\u00ed solos, por lo tanto tenemos que extender la clase y sobreescribirlos. El logo es impreso con el m\u00e9todo image especificando su esquina superior izquierda y su ancho. La altura es calculada autom\u00e1ticamente para respetar las proporciones de la imagen. Para imprimir el n\u00famero de p\u00e1gina, un valor nulo es pasado como ancho de celda. Significa que la celda deber\u00e1 ser extendida hasta el margen derecho de la p\u00e1gina; es \u00fatil centrar texto. El n\u00famero de p\u00e1gina actual es devuelto por el m\u00e9todo page_no ; y para el n\u00famero total de p\u00e1ginas, \u00e9ste ser\u00e1 obtenido mediante el valor especial {nb} que ser\u00e1 sustituido al cerrar el documento. Notar el uso del m\u00e9todo set_y que permite establecer la posici\u00f3n en una ubicaci\u00f3n absoluta en la p\u00e1gina, empezando desde arriba hacia abajo. Otra caracter\u00edstica interesante es usada aqu\u00ed: el salto de p\u00e1gina autom\u00e1tico. Tan pronto una celda cruza el l\u00edmite de una p\u00e1gina (por defecto a 2 cent\u00edmetros desde abajo), un salto es realizado y la fuente es restaurada. Aunque el encabezado y pie de p\u00e1gina tienen su propia fuente (helvetica), el cuerpo contin\u00faa en Times. Este mecanismo de restauraci\u00f3n autom\u00e1tica tambi\u00e9n se aplica a los colores y el ancho de la l\u00ednea. El l\u00edmite que dispara los saltos de p\u00e1gina puede establecerse con set_auto_page_break .","title":"Encabezado, pie de p\u00e1gina, salto de p\u00e1gina e imagen"},{"location":"Tutorial-es.html#saltos-de-linea-y-colores","text":"Continuemos con un ejemplo que imprime p\u00e1rrafos justificados. Tambi\u00e9n ilustra el uso de colores. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Demo El m\u00e9todo get_string_width permite determinar la longitud de una cadena en la fuente actual, usado aqu\u00ed para calcular la posici\u00f3n y el ancho del marco que rodea al t\u00edtulo. Los colores son establecidos (v\u00eda set_draw_color , set_fill_color y set_text_color ) y el grosor de la l\u00ednea es establecido a 1 mm (contra 0.2 por defecto) con set_line_width . Finalmente, emitimos la celda (el \u00faltimo par\u00e1metro es True para indicar que el fondo debe ser rellenado). El m\u00e9todo usado para imprimir p\u00e1rrafos es multi_cell . Cada vez que una l\u00ednea alcanza el extremo derecho de la celda o un caracter de retorno de l\u00ednea, un salto de l\u00ednea es emitido y una nueva celda es autom\u00e1ticamente creada bajo la actual. El texto es justificado por defecto. Dos propiedades del documento son definidas: el t\u00edtulo ( set_title ) y el autor ( set_author ). Las propiedades pueden ser vistas de dos formas. La primera es abrir el documento directamente con Acrobat Reader, ir al men\u00fa Archivo y elegir la opci\u00f3n Propiedades del Documento. La segunda, tambi\u00e9n disponible en el plug-in, es hacer clic izquierdo y seleccionar Propiedades del documento (Document Properties).","title":"Saltos de l\u00ednea y colores"},{"location":"Tutorial-fr.html","text":"Tutorial Documentation compl\u00e8te des m\u00e9thodes : fpdf.FPDF API doc Tutorial Tuto 1 - Exemple minimal Tuto 2 - En-t\u00eate, bas de page, saut de page et image Tuto 3 - Saut de ligne et couleur Tuto 4 - Colonnes multiples Tuto 5 - Cr\u00e9er des tables Tuto 6 - Cr\u00e9er des liens et m\u00e9langer diff\u00e9rents styles de textes Tuto 1 - Exemple minimal Commen\u00e7ons par un exemple classique : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) PDF g\u00e9n\u00e9r\u00e9 Apr\u00e8s avoir inclu la librairie, on cr\u00e9\u00e9 un objet FPDF . Le constructeur FPDF est utilis\u00e9 avec ses valeurs par d\u00e9faut : les pages sont en format portrait A4 et l'unit\u00e9 de mesure est le millim\u00e8tre. Cela peut \u00e9galement \u00eatre sp\u00e9fici\u00e9 de cette mani\u00e8re : pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) Il est possible de cr\u00e9er un PDF en format paysage ( L ) ou encore d'utiliser d'autres formats (par exemple Letter et Legal ) et unit\u00e9s de mesure ( pt , cm , in ). Il n'y a pas encore de page, il faut donc en cr\u00e9er une avec add_page . Le coin en haut \u00e0 gauche correspond \u00e0 l'origine, et le curseur (c'est-\u00e0-dire la position actuelle o\u00f9 l'on va afficher un \u00e9l\u00e9ment) est plac\u00e9 par d\u00e9faut \u00e0 1 cm des bords; les marges peuvent \u00eatre modifi\u00e9es avec set_margins . Avant de pouvoir afficher du texte, il faut obligatoirement choisir une police de caract\u00e8res avec set_font . Choisissons Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) On aurait pu sp\u00e9cifier une police en italique avec I ; soulign\u00e9e avec U ou une police normale avec une chaine de caract\u00e8res vide. Il est aussi possible de combiner les effets en combinant les caract\u00e8res. Notez que la taille des caract\u00e8res est \u00e0 sp\u00e9cifier en points (pts), pas en millim\u00e8tres (ou tout autre unit\u00e9); c'est la seule exception. Les autres polices fournies par d\u00e9faut sont Times , Courier , Symbol et ZapfDingbats . On peut maintenant afficher une cellule avec cell . Une cellule est une zone rectangulaire, avec ou sans cadre, qui contient du texte. Elle est affich\u00e9e \u00e0 la position actuelle du curseur. On sp\u00e9cifie ses dimensions, le texte (centr\u00e9 ou align\u00e9), si'l y a une bordure ou non, ainsi que la position du curseur apr\u00e8s avoir affich\u00e9 la cellule (s'il se d\u00e9place \u00e0 droite, vers le bas ou au d\u00e9but de la ligne suivante). Pour ajouter un cadre, on utilise ceci : pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Pour ajouter une nouvelle cellule avec un texte centr\u00e9, et d\u00e9placer le curseur \u00e0 la ligne suivante on utilise cela : pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Remarque : le saut de ligne peut aussi \u00eatre fait avec ln . Cette m\u00e9thode permet de sp\u00e9cifier la hauteur du saut. Enfin, le document est sauvegard\u00e9 \u00e0 l'endroit sp\u00e9cifi\u00e9 en utilisant output . Sans aucun param\u00e8tre, output() retourne le buffer bytearray du PDF. Tuto 2 - En-t\u00eate, bas de page, saut de page et image Voici un exemple contenant deux pages avec un en-t\u00eate, un bas de page et un logo : from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) PDF g\u00e9n\u00e9r\u00e9 Cet exemple utilise les m\u00e9thodes header et footer pour g\u00e9n\u00e9rer des en-t\u00eates et des bas de page. Elles sont appel\u00e9es automatiquement. Elles existent d\u00e9j\u00e0 dans la classe FPDF mais elles ne font rien, il faut donc les red\u00e9finir dans une classe fille. Le logo est affich\u00e9 avec la m\u00e9thode image en sp\u00e9cifiant la position du coin sup\u00e9rieur gauche et la largeur de l'image. La hauteur est calcul\u00e9e automatiquement pour garder les proportions de l'image. Pour centrer le num\u00e9ro de page dans le bas de page, il faut passer la valeur nulle \u00e0 la place de la largeur de la cellule. Cela fait prendre toute la largeur de la page \u00e0 la cellule, ce qui permet de centrer le texte. Le num\u00e9ro de page actuel est obtenu avec la m\u00e9thode page_no ; le nombre total de pages est obtenu avec la variable {nb} qui prend sa valeur quand le document est ferm\u00e9 (la m\u00e9thode alias_nb_pages permet de d\u00e9finir un autre nom de variable pour cette valeur). La m\u00e9thode set_y permet de sp\u00e9cifier une position dans la page relative au haut ou pas de page. Une autre fonctionnalit\u00e9 int\u00e9ressante est utilis\u00e9e ici : les sauts de page automatiques. Si une cellule d\u00e9passe la limite du contenu de la page (par d\u00e9faut \u00e0 2 centim\u00e8tres du bas), un saut de page est ins\u00e9r\u00e9 \u00e0 la place et la police de caract\u00e8res est restaur\u00e9e. C'est-\u00e0-dire, bien que l'en-t\u00eate et le bas de page utilisent la police ( helvetica ), le corps du texte garde la police Times . Ce m\u00e9canisme de restauration automatique s'applique \u00e9galement \u00e0 la couleur et l'\u00e9paisseur des lignes. La limite du contenu qui d\u00e9clenche le saut de page peut \u00eatre sp\u00e9cifi\u00e9e avec set_auto_page_break . Tuto 3 - Saut de ligne et couleur Continuons avec un exemple qui affiche des paragraphes avec du texte justifi\u00e9. Cet exemple montre \u00e9galement l'utilisation de couleurs. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) PDF g\u00e9n\u00e9r\u00e9 Texte de Jules Verne La m\u00e9thode get_string_width permet de d\u00e9terminer la largeur d'un texte utilisant la police actuelle, ce qui permet de calculer la position et la largeur du cadre autour du titre. Ensuite les couleurs sont sp\u00e9cifi\u00e9es (avec set_draw_color , set_fill_color et set_text_color ) et on sp\u00e9cifie l'\u00e9paisseur de la bordure du cadre \u00e0 1 mm (contre 0.2 par d\u00e9faut) avec set_line_width . Enfin, on affiche la cellule (le dernier param\u00e8tre \"true\" indique que le fond doit \u00eatre rempli). La m\u00e9thode multi_cell est utilis\u00e9e pour afficher les paragraphes. Chaque fois qu'une ligne atteint le bord d'une cellule ou qu'un caract\u00e8re de retour \u00e0 la ligne est pr\u00e9sent, un saut de ligne est ins\u00e9r\u00e9 et une nouvelle cellule est cr\u00e9\u00e9e automatiquement sous la cellule actuelle. Le texte est justifi\u00e9 par d\u00e9faut. Deux propri\u00e9t\u00e9s sont d\u00e9finies pour le document : le titre ( set_title ) et l'auteur ( set_author ). Les propri\u00e9t\u00e9s peuvent \u00eatre trouv\u00e9es en ouvrant le document PDF avec Acrobat Reader. Elles sont alors visibles dans le menu Fichier -> Propri\u00e9t\u00e9s du document. Tuto 4 - Colonnes multiples En cours de traduction. Tuto 5 - Cr\u00e9er des tables En cours de traduction. Tuto 6 - Cr\u00e9er des liens et m\u00e9langer diff\u00e9rents styles de textes En cours de traduction.","title":"Tutorial en fran\u00e7ais"},{"location":"Tutorial-fr.html#tutorial","text":"Documentation compl\u00e8te des m\u00e9thodes : fpdf.FPDF API doc Tutorial Tuto 1 - Exemple minimal Tuto 2 - En-t\u00eate, bas de page, saut de page et image Tuto 3 - Saut de ligne et couleur Tuto 4 - Colonnes multiples Tuto 5 - Cr\u00e9er des tables Tuto 6 - Cr\u00e9er des liens et m\u00e9langer diff\u00e9rents styles de textes","title":"Tutorial"},{"location":"Tutorial-fr.html#tuto-1-exemple-minimal","text":"Commen\u00e7ons par un exemple classique : from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) PDF g\u00e9n\u00e9r\u00e9 Apr\u00e8s avoir inclu la librairie, on cr\u00e9\u00e9 un objet FPDF . Le constructeur FPDF est utilis\u00e9 avec ses valeurs par d\u00e9faut : les pages sont en format portrait A4 et l'unit\u00e9 de mesure est le millim\u00e8tre. Cela peut \u00e9galement \u00eatre sp\u00e9fici\u00e9 de cette mani\u00e8re : pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) Il est possible de cr\u00e9er un PDF en format paysage ( L ) ou encore d'utiliser d'autres formats (par exemple Letter et Legal ) et unit\u00e9s de mesure ( pt , cm , in ). Il n'y a pas encore de page, il faut donc en cr\u00e9er une avec add_page . Le coin en haut \u00e0 gauche correspond \u00e0 l'origine, et le curseur (c'est-\u00e0-dire la position actuelle o\u00f9 l'on va afficher un \u00e9l\u00e9ment) est plac\u00e9 par d\u00e9faut \u00e0 1 cm des bords; les marges peuvent \u00eatre modifi\u00e9es avec set_margins . Avant de pouvoir afficher du texte, il faut obligatoirement choisir une police de caract\u00e8res avec set_font . Choisissons Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) On aurait pu sp\u00e9cifier une police en italique avec I ; soulign\u00e9e avec U ou une police normale avec une chaine de caract\u00e8res vide. Il est aussi possible de combiner les effets en combinant les caract\u00e8res. Notez que la taille des caract\u00e8res est \u00e0 sp\u00e9cifier en points (pts), pas en millim\u00e8tres (ou tout autre unit\u00e9); c'est la seule exception. Les autres polices fournies par d\u00e9faut sont Times , Courier , Symbol et ZapfDingbats . On peut maintenant afficher une cellule avec cell . Une cellule est une zone rectangulaire, avec ou sans cadre, qui contient du texte. Elle est affich\u00e9e \u00e0 la position actuelle du curseur. On sp\u00e9cifie ses dimensions, le texte (centr\u00e9 ou align\u00e9), si'l y a une bordure ou non, ainsi que la position du curseur apr\u00e8s avoir affich\u00e9 la cellule (s'il se d\u00e9place \u00e0 droite, vers le bas ou au d\u00e9but de la ligne suivante). Pour ajouter un cadre, on utilise ceci : pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Pour ajouter une nouvelle cellule avec un texte centr\u00e9, et d\u00e9placer le curseur \u00e0 la ligne suivante on utilise cela : pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Remarque : le saut de ligne peut aussi \u00eatre fait avec ln . Cette m\u00e9thode permet de sp\u00e9cifier la hauteur du saut. Enfin, le document est sauvegard\u00e9 \u00e0 l'endroit sp\u00e9cifi\u00e9 en utilisant output . Sans aucun param\u00e8tre, output() retourne le buffer bytearray du PDF.","title":"Tuto 1 - Exemple minimal"},{"location":"Tutorial-fr.html#tuto-2-en-tete-bas-de-page-saut-de-page-et-image","text":"Voici un exemple contenant deux pages avec un en-t\u00eate, un bas de page et un logo : from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) PDF g\u00e9n\u00e9r\u00e9 Cet exemple utilise les m\u00e9thodes header et footer pour g\u00e9n\u00e9rer des en-t\u00eates et des bas de page. Elles sont appel\u00e9es automatiquement. Elles existent d\u00e9j\u00e0 dans la classe FPDF mais elles ne font rien, il faut donc les red\u00e9finir dans une classe fille. Le logo est affich\u00e9 avec la m\u00e9thode image en sp\u00e9cifiant la position du coin sup\u00e9rieur gauche et la largeur de l'image. La hauteur est calcul\u00e9e automatiquement pour garder les proportions de l'image. Pour centrer le num\u00e9ro de page dans le bas de page, il faut passer la valeur nulle \u00e0 la place de la largeur de la cellule. Cela fait prendre toute la largeur de la page \u00e0 la cellule, ce qui permet de centrer le texte. Le num\u00e9ro de page actuel est obtenu avec la m\u00e9thode page_no ; le nombre total de pages est obtenu avec la variable {nb} qui prend sa valeur quand le document est ferm\u00e9 (la m\u00e9thode alias_nb_pages permet de d\u00e9finir un autre nom de variable pour cette valeur). La m\u00e9thode set_y permet de sp\u00e9cifier une position dans la page relative au haut ou pas de page. Une autre fonctionnalit\u00e9 int\u00e9ressante est utilis\u00e9e ici : les sauts de page automatiques. Si une cellule d\u00e9passe la limite du contenu de la page (par d\u00e9faut \u00e0 2 centim\u00e8tres du bas), un saut de page est ins\u00e9r\u00e9 \u00e0 la place et la police de caract\u00e8res est restaur\u00e9e. C'est-\u00e0-dire, bien que l'en-t\u00eate et le bas de page utilisent la police ( helvetica ), le corps du texte garde la police Times . Ce m\u00e9canisme de restauration automatique s'applique \u00e9galement \u00e0 la couleur et l'\u00e9paisseur des lignes. La limite du contenu qui d\u00e9clenche le saut de page peut \u00eatre sp\u00e9cifi\u00e9e avec set_auto_page_break .","title":"Tuto 2 - En-t\u00eate, bas de page, saut de page et image"},{"location":"Tutorial-fr.html#tuto-3-saut-de-ligne-et-couleur","text":"Continuons avec un exemple qui affiche des paragraphes avec du texte justifi\u00e9. Cet exemple montre \u00e9galement l'utilisation de couleurs. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) PDF g\u00e9n\u00e9r\u00e9 Texte de Jules Verne La m\u00e9thode get_string_width permet de d\u00e9terminer la largeur d'un texte utilisant la police actuelle, ce qui permet de calculer la position et la largeur du cadre autour du titre. Ensuite les couleurs sont sp\u00e9cifi\u00e9es (avec set_draw_color , set_fill_color et set_text_color ) et on sp\u00e9cifie l'\u00e9paisseur de la bordure du cadre \u00e0 1 mm (contre 0.2 par d\u00e9faut) avec set_line_width . Enfin, on affiche la cellule (le dernier param\u00e8tre \"true\" indique que le fond doit \u00eatre rempli). La m\u00e9thode multi_cell est utilis\u00e9e pour afficher les paragraphes. Chaque fois qu'une ligne atteint le bord d'une cellule ou qu'un caract\u00e8re de retour \u00e0 la ligne est pr\u00e9sent, un saut de ligne est ins\u00e9r\u00e9 et une nouvelle cellule est cr\u00e9\u00e9e automatiquement sous la cellule actuelle. Le texte est justifi\u00e9 par d\u00e9faut. Deux propri\u00e9t\u00e9s sont d\u00e9finies pour le document : le titre ( set_title ) et l'auteur ( set_author ). Les propri\u00e9t\u00e9s peuvent \u00eatre trouv\u00e9es en ouvrant le document PDF avec Acrobat Reader. Elles sont alors visibles dans le menu Fichier -> Propri\u00e9t\u00e9s du document.","title":"Tuto 3 - Saut de ligne et couleur"},{"location":"Tutorial-fr.html#tuto-4-colonnes-multiples","text":"En cours de traduction.","title":"Tuto 4 - Colonnes multiples"},{"location":"Tutorial-fr.html#tuto-5-creer-des-tables","text":"En cours de traduction.","title":"Tuto 5 - Cr\u00e9er des tables"},{"location":"Tutorial-fr.html#tuto-6-creer-des-liens-et-melanger-differents-styles-de-textes","text":"En cours de traduction.","title":"Tuto 6 - Cr\u00e9er des liens et m\u00e9langer diff\u00e9rents styles de textes"},{"location":"Tutorial-gr.html","text":"\u03a0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u0395\u03ba\u03bc\u03ac\u03b8\u03b7\u03c3\u03b7\u03c2 \u03a0\u03bb\u03ae\u03c1\u03b7\u03c2 \u03c4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7 \u03c4\u03c9\u03bd \u03bc\u03b5\u03b8\u03cc\u03b4\u03c9\u03bd: fpdf.FPDF API doc \u03a0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u0395\u03ba\u03bc\u03ac\u03b8\u03b7\u03c3\u03b7\u03c2 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 1 - \u0391\u03c0\u03bb\u03cc \u03a0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 2 - \u0395\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1, \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf, \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03ba\u03b1\u03b9 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 3 - \u0391\u03bb\u03bb\u03b1\u03b3\u03ad\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 4 - \u03a0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03ad\u03c2 \u03a3\u03c4\u03ae\u03bb\u03b5\u03c2 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 5 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03a0\u03b9\u03bd\u03ac\u03ba\u03c9\u03bd \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 6 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03ba\u03b1\u03b9 \u03bc\u03af\u03be\u03b7 \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 1 - \u0391\u03c0\u03bb\u03cc \u03a0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u0391\u03c2 \u03be\u03b5\u03ba\u03b9\u03bd\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03b5 \u03ad\u03bd\u03b1 \u03ba\u03bb\u03b1\u03c3\u03c3\u03b9\u03ba\u03cc \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u0391\u03c6\u03bf\u03cd \u03c3\u03c5\u03bc\u03c0\u03b5\u03c1\u03b9\u03bb\u03ac\u03b2\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03b2\u03b9\u03b2\u03bb\u03b9\u03bf\u03b8\u03ae\u03ba\u03b7\u03c2, \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03bf\u03cd\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03b1\u03bd\u03c4\u03b9\u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf FPDF . \u039f \u03ba\u03b1\u03c4\u03b1\u03c3\u03ba\u03b5\u03c5\u03b1\u03c3\u03c4\u03ae\u03c2 FPDF \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03bc\u03b5 \u03c4\u03b9\u03c2 \u03c0\u03c1\u03bf\u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03b5\u03c2 \u03c4\u03b9\u03bc\u03ad\u03c2: \u03bf\u03b9 \u03c3\u03b5\u03bb\u03af\u03b4\u03b5\u03c2 \u03ad\u03c7\u03bf\u03c5\u03bd \u03b4\u03b9\u03b1\u03c3\u03c4\u03ac\u03c3\u03b5\u03b9\u03c2 \u03914 \u03ba\u03b1\u03b9 \u03b7 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b1\u03c2 \u03bc\u03ad\u03c4\u03c1\u03b7\u03c3\u03b7\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c4\u03bf \u03c7\u03b9\u03bb\u03b9\u03bf\u03c3\u03c4\u03cc\u03bc\u03b5\u03c4\u03c1\u03bf. \u039f\u03b9 \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b5\u03c2 \u03c4\u03b9\u03bc\u03ad\u03c2 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bd \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b4\u03b9\u03bf\u03c1\u03b9\u03c3\u03c4\u03bf\u03cd\u03bd \u03b1\u03bd\u03b1\u03bb\u03c5\u03c4\u03b9\u03ba\u03ac \u03c9\u03c2 \u03b5\u03be\u03ae\u03c2: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u0394\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03b7 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03bd\u03b1 \u03bf\u03c1\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf PDF \u03c3\u03b5 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03c4\u03bf\u03c0\u03af\u03bf\u03c5 ( L ) \u03ae \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ac\u03bb\u03bb\u03b5\u03c2 \u03bc\u03bf\u03c1\u03c6\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b5\u03b9\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 (\u03cc\u03c0\u03c9\u03c2 Letter \u03ba\u03b1\u03b9 Legal ) \u03ba\u03b1\u03b9 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b5\u03c2 \u03bc\u03ad\u03c4\u03c1\u03b7\u03c3\u03b7\u03c2 ( pt , cm , in ). \u03a0\u03c1\u03bf\u03c2 \u03c4\u03bf \u03c0\u03b1\u03c1\u03cc\u03bd \u03b4\u03b5\u03bd \u03c5\u03c0\u03ac\u03c1\u03c7\u03b5\u03b9 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1, \u03bf\u03c0\u03cc\u03c4\u03b5 \u03b8\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03af\u03b1 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf add_page . \u0397 \u03b1\u03c1\u03c7\u03ae \u03b2\u03c1\u03af\u03c3\u03ba\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ae \u03ac\u03bd\u03c9 \u03b3\u03c9\u03bd\u03af\u03b1 \u03ba\u03b1\u03b9 \u03b7 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7 \u03c4\u03bf\u03c0\u03bf\u03b8\u03b5\u03c4\u03b5\u03af\u03c4\u03b1\u03b9, \u03b1\u03c0\u03cc \u03c0\u03c1\u03bf\u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae, \u03c3\u03b5 \u03b1\u03c0\u03cc\u03c3\u03c4\u03b1\u03c3\u03b7 1 cm \u03b1\u03c0\u03cc \u03c4\u03bf \u03c0\u03b5\u03c1\u03af\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1. \u03a4\u03b1 \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03b1 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bd \u03bd\u03b1 \u03bf\u03c1\u03b9\u03c3\u03c4\u03bf\u03cd\u03bd \u03bc\u03b5 set_margins . \u03a0\u03c1\u03c9\u03c4\u03bf\u03cd \u03bc\u03c0\u03bf\u03c1\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf, \u03b5\u03af\u03bd\u03b1\u03b9 \u03c5\u03c0\u03bf\u03c7\u03c1\u03b5\u03c9\u03c4\u03b9\u03ba\u03cc \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac \u03bc\u03b5 set_font , \u03b1\u03bb\u03bb\u03b9\u03ce\u03c2 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03b4\u03b5\u03bd \u03b8\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03b3\u03ba\u03c5\u03c1\u03bf. \u0395\u03c0\u03b9\u03bb\u03ad\u03b3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) \u039c\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03c0\u03bb\u03ac\u03b3\u03b9\u03b1 \u03b3\u03c1\u03b1\u03c6\u03ae \u03bc\u03b5 I , \u03c5\u03c0\u03bf\u03b3\u03c1\u03ac\u03bc\u03bc\u03b9\u03c3\u03b7 \u03bc\u03b5 U \u03b7 \u03bc\u03af\u03b1 \u03b1\u03c0\u03bb\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac \u03bc\u03b5 \u03bc\u03af\u03b1 \u03ba\u03b5\u03bd\u03ae \u03c3\u03c5\u03bc\u03b2\u03bf\u03bb\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac (\u03ae \u03bf\u03c0\u03bf\u03b9\u03bf\u03bd\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03c3\u03c5\u03bd\u03b4\u03b9\u03b1\u03c3\u03bc\u03cc). \u0391\u03be\u03af\u03b6\u03b5\u03b9 \u03bd\u03b1 \u03c3\u03b7\u03bc\u03b5\u03b9\u03c9\u03b8\u03b5\u03af \u03cc\u03c4\u03b9 \u03c4\u03bf \u03bc\u03ad\u03b3\u03b5\u03b8\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03b4\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03c3\u03b7\u03bc\u03b5\u03af\u03b1, \u03cc\u03c7\u03b9 \u03c7\u03b9\u03bb\u03b9\u03bf\u03c3\u03c4\u03cc\u03bc\u03b5\u03c4\u03c1\u03b1 (\u03ae \u03ba\u03ac\u03c0\u03bf\u03b9\u03b1 \u03ac\u03bb\u03bb\u03b7 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b1 \u03bc\u03ad\u03c4\u03c1\u03b7\u03c3\u03b7\u03c2). \u03a4\u03bf \u03c0\u03b1\u03c1\u03b1\u03c0\u03ac\u03bd\u03c9 \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03c4\u03b7 \u03bc\u03bf\u03bd\u03b1\u03b4\u03b9\u03ba\u03ae \u03b5\u03be\u03b1\u03af\u03c1\u03b5\u03c3\u03b7. \u039f\u03b9 \u03c5\u03c0\u03cc\u03bb\u03bf\u03b9\u03c0\u03b5\u03c2 \u03b5\u03bd\u03c3\u03c9\u03bc\u03b1\u03c4\u03c9\u03bc\u03ad\u03bd\u03b5\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03af\u03c1\u03b5\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 Times , Courier , Symbol and ZapfDingbats . \u03a0\u03bb\u03ad\u03bf\u03bd, \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03ba\u03b5\u03bb\u03af cell . \u0388\u03bd\u03b1 \u03ba\u03b5\u03bb\u03af \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03bc\u03af\u03b1 \u03bf\u03c1\u03b8\u03bf\u03b3\u03ce\u03bd\u03b9\u03b1 \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1, \u03c0\u03b9\u03b8\u03b1\u03bd\u03ce\u03c2 \u03c0\u03bb\u03b1\u03b9\u03c3\u03b9\u03c9\u03bc\u03ad\u03bd\u03b7, \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03b5\u03b9 \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf. \u0391\u03c0\u03b5\u03b9\u03ba\u03bf\u03bd\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7. \u039f\u03c1\u03af\u03b6\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9\u03c2 \u03b4\u03b9\u03b1\u03c3\u03c4\u03ac\u03c3\u03b5\u03b9\u03c2 \u03c4\u03b7\u03c2, \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03cc \u03c4\u03b7\u03c2 (\u03ba\u03b5\u03bd\u03c4\u03c1\u03b1\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf \u03ae \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf), \u03b5\u03ac\u03bd \u03b5\u03c0\u03b9\u03b8\u03c5\u03bc\u03bf\u03cd\u03bc\u03b5 \u03b5\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03c4\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03bf\u03c2, \u03ba\u03b1\u03b9 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03bc\u03b5\u03c4\u03b1\u03ba\u03b9\u03bd\u03b7\u03b8\u03b5\u03af \u03b7 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7 \u03bc\u03b5\u03c4\u03ac \u03b1\u03c0\u03cc \u03b1\u03c5\u03c4\u03ae (\u03c3\u03c4\u03b1 \u03b4\u03b5\u03be\u03b9\u03ac \u03c4\u03b7\u03c2 \u03bf\u03c1\u03b8\u03bf\u03b3\u03ce\u03bd\u03b9\u03b1\u03c2 \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1\u03c2, \u03b1\u03c0\u03cc \u03ba\u03ac\u03c4\u03c9 \u03c4\u03b7\u03c2 \u03ae \u03c3\u03c4\u03b7\u03bd \u03b1\u03c6\u03b5\u03c4\u03b7\u03c1\u03af\u03b1 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2). \u039c\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03c0\u03bb\u03b1\u03af\u03c3\u03b9\u03bf \u03c9\u03c2 \u03b5\u03be\u03ae\u03c2: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) \u0393\u03b9\u03b1 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03bd\u03ad\u03bf \u03ba\u03b5\u03bb\u03af \u03b4\u03af\u03c0\u03bb\u03b1 \u03c3\u03c4\u03bf \u03b1\u03c1\u03c7\u03b9\u03ba\u03cc \u03bc\u03b5 \u03ba\u03b5\u03bd\u03c4\u03c1\u03b1\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03ba\u03b1\u03b9 \u03c3\u03c4\u03b7 \u03c3\u03c5\u03bd\u03ad\u03c7\u03b5\u03b9\u03b1 \u03bd\u03b1 \u03bc\u03b5\u03c4\u03b1\u03b2\u03bf\u03cd\u03bc\u03b5 \u03c3\u03c4\u03b7\u03bd \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae, \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03bf\u03cd\u03bc\u03b5: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) \u03a0\u03b1\u03c1\u03b1\u03c4\u03ae\u03c1\u03b7\u03c3\u03b7 : \u03b7 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03b5\u03af \u03ba\u03b1\u03b9 \u03bc\u03b5 ln . \u0391\u03c5\u03c4\u03ae \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03b5\u03c0\u03af\u03c3\u03b7\u03c2 \u03c4\u03bf\u03bd \u03c0\u03c1\u03bf\u03c3\u03b4\u03b9\u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03bf\u03c5 \u03cd\u03c8\u03bf\u03c5\u03c2 \u03c4\u03b7\u03c2 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2. \u0395\u03bd \u03c4\u03ad\u03bb\u03b5\u03b9, \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03bc\u03b1\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ba\u03bb\u03b5\u03b9\u03c3\u03c4\u03cc \u03ba\u03b1\u03b9 \u03ad\u03c7\u03b5\u03b9 \u03b1\u03c0\u03bf\u03b8\u03b7\u03ba\u03b5\u03c5\u03c4\u03b5\u03af \u03c3\u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03b5\u03c7\u03cc\u03bc\u03b5\u03bd\u03b7 \u03b4\u03b9\u03b1\u03b4\u03c1\u03bf\u03bc\u03ae \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ce\u03bd\u03c4\u03b1\u03c2 output . \u0391\u03bd \u03b4\u03b5\u03bd \u03c0\u03b1\u03c1\u03ad\u03c7\u03bf\u03c5\u03bc\u03b5 \u03c0\u03b1\u03c1\u03b1\u03bc\u03ad\u03c4\u03c1\u03bf\u03c5\u03c2, \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 output() \u03b5\u03c0\u03b9\u03c3\u03c4\u03c1\u03ad\u03c6\u03b5\u03b9 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf PDF \u03c3\u03b5 \u03bc\u03bf\u03c1\u03c6\u03ae bytearray . \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 2 - \u0395\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1, \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf, \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03ba\u03b1\u03b9 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1 \u03a0\u03b1\u03c1\u03b1\u03ba\u03ac\u03c4\u03c9, \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03bc\u03b5 \u03c4\u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03b5\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1\u03c2, \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bb\u03bf\u03b3\u03cc\u03c4\u03c5\u03c0\u03bf\u03c5: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u03a3\u03c4\u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b3\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03c9\u03bd \u03bc\u03b5\u03b8\u03cc\u03b4\u03c9\u03bd header \u03ba\u03b1\u03b9 footer \u03ad\u03c4\u03c3\u03b9 \u03ce\u03c3\u03c4\u03b5 \u03bd\u03b1 \u03b5\u03c0\u03b5\u03be\u03b5\u03c1\u03b3\u03b1\u03c3\u03c4\u03bf\u03cd\u03bc\u03b5 \u03c4\u03b9\u03c2 \u03b5\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b5\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03b1 \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03b1 \u03c4\u03c9\u03bd \u03c3\u03b5\u03bb\u03af\u03b4\u03c9\u03bd \u03b5\u03bd\u03cc\u03c2 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u0397 \u03ba\u03bb\u03ae\u03c3\u03b7 \u03c4\u03bf\u03c5\u03c2 \u03b3\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1. \u03a5\u03c0\u03ac\u03c1\u03c7\u03bf\u03c5\u03bd \u03ae\u03b4\u03b7 \u03c3\u03c4\u03b7\u03bd \u03ba\u03bb\u03ac\u03c3\u03b7 FPDF \u03b1\u03bb\u03bb\u03ac \u03b4\u03b5\u03bd \u03c0\u03c1\u03bf\u03c3\u03c6\u03ad\u03c1\u03bf\u03c5\u03bd \u03ba\u03b1\u03bc\u03af\u03b1 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1, \u03b5\u03c0\u03bf\u03bc\u03ad\u03bd\u03c9\u03c2 \u03c7\u03c1\u03b5\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03c0\u03b5\u03ba\u03c4\u03b5\u03af\u03bd\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03ba\u03bb\u03ac\u03c3\u03b7 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c4\u03b9\u03c2 \u03c5\u03c0\u03b5\u03c1\u03ba\u03b1\u03bb\u03cd\u03c8\u03bf\u03c5\u03bc\u03b5. \u03a4\u03bf \u03bb\u03bf\u03b3\u03cc\u03c4\u03c5\u03c0\u03bf \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf image \u03b4\u03b9\u03b5\u03c5\u03ba\u03c1\u03b9\u03bd\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03b7\u03bd \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ae \u03ac\u03bd\u03c9 \u03b3\u03c9\u03bd\u03af\u03b1 \u03ba\u03b1\u03b9 \u03c4\u03bf \u03c0\u03bb\u03ac\u03c4\u03bf\u03c2 \u03c4\u03bf\u03c5. \u03a4\u03bf \u03cd\u03c8\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1 \u03bb\u03b1\u03bc\u03b2\u03ac\u03bd\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c5\u03c0\u03cc\u03c8\u03b7 \u03c4\u03b9\u03c2 \u03b1\u03bd\u03b1\u03bb\u03bf\u03b3\u03af\u03b5\u03c2 \u03c4\u03b7\u03c2 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1\u03c2. \u0393\u03b9\u03b1 \u03bd\u03b1 \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf\u03bd \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2, \u03c7\u03c1\u03b5\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03c0\u03b5\u03c1\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03b7\u03b4\u03b5\u03bd\u03b9\u03ba\u03ae \u03c4\u03b9\u03bc\u03ae \u03c3\u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf \u03c4\u03bf\u03c5 \u03c0\u03bb\u03ac\u03c4\u03bf\u03c5\u03c2 \u03ba\u03b5\u03bb\u03b9\u03bf\u03cd. \u0391\u03c5\u03c4\u03cc \u03c3\u03b7\u03bc\u03b1\u03af\u03bd\u03b5\u03b9 \u03cc\u03c4\u03b9 \u03c4\u03bf \u03ba\u03b5\u03bb\u03af \u03b8\u03b1 \u03b5\u03c0\u03b5\u03ba\u03c4\u03b1\u03b8\u03b5\u03af \u03bc\u03ad\u03c7\u03c1\u03b9 \u03ba\u03b1\u03b9 \u03c4\u03bf \u03b4\u03b5\u03be\u03af \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03bf \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2, \u03c4\u03bf \u03bf\u03c0\u03bf\u03af\u03bf \u03b2\u03bf\u03bb\u03b5\u03cd\u03b5\u03b9 \u03c3\u03c4\u03bf \u03ba\u03b5\u03bd\u03c4\u03c1\u03ac\u03c1\u03b9\u03c3\u03bc\u03b1 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5. \u039f \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 \u03c4\u03b7\u03c2 \u03c4\u03c9\u03c1\u03b9\u03bd\u03ae\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03c0\u03b1\u03c1\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf page_no . \u039f \u03c3\u03c5\u03bd\u03bf\u03bb\u03b9\u03ba\u03cc\u03c2 \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03c9\u03bd \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b4\u03b9\u03b1\u03b8\u03ad\u03c3\u03b9\u03bc\u03bf\u03c2 \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03b5\u03b9\u03b4\u03b9\u03ba\u03ae\u03c2 \u03bc\u03b5\u03c4\u03b1\u03b2\u03bb\u03b7\u03c4\u03ae\u03c2 {nb} , \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03bf\u03c1\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03bf \u03ba\u03bb\u03b5\u03af\u03c3\u03b9\u03bc\u03bf \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u0391\u03c5\u03c4\u03ae \u03b7 \u03b5\u03b9\u03b4\u03b9\u03ba\u03ae \u03c4\u03b9\u03bc\u03ae \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c4\u03c1\u03bf\u03c0\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03b5\u03af \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 alias_nb_pages() . \u0391\u03be\u03af\u03b6\u03b5\u03b9 \u03bd\u03b1 \u03c3\u03b7\u03bc\u03b5\u03b9\u03c9\u03b8\u03b5\u03af \u03cc\u03c4\u03b9 \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 set_y \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03c4\u03bf\u03bd \u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03b7\u03c2 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1\u03c2 \u03b8\u03ad\u03c3\u03b7\u03c2 \u03c3\u03b5 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03c4\u03bf\u03c0\u03bf\u03b8\u03b5\u03c3\u03af\u03b1 \u03c3\u03c4\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1, \u03be\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03ba\u03bf\u03c1\u03c5\u03c6\u03ae \u03ae \u03c4\u03bf \u03c4\u03ad\u03bb\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2. \u0388\u03bd\u03b1 \u03b1\u03ba\u03cc\u03bc\u03b7 \u03b5\u03bd\u03b4\u03b9\u03b1\u03c6\u03ad\u03c1\u03bf\u03bd \u03c7\u03b1\u03c1\u03b1\u03ba\u03c4\u03b7\u03c1\u03b9\u03c3\u03c4\u03b9\u03ba\u03cc \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7: \u03b7 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b7 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2. \u039c\u03cc\u03bb\u03b9\u03c2 \u03ad\u03bd\u03b1 \u03ba\u03b5\u03bb\u03af \u03be\u03b5\u03c0\u03b5\u03c1\u03ac\u03c3\u03b5\u03b9 \u03ad\u03bd\u03b1 \u03c0\u03c1\u03bf\u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf \u03cc\u03c1\u03b9\u03bf \u03c3\u03c4\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1 (2 \u03b5\u03ba\u03b1\u03c4\u03bf\u03c3\u03c4\u03ac \u03b1\u03c0\u03cc \u03c4\u03bf \u03ba\u03ac\u03c4\u03c9 \u03bc\u03ad\u03c1\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03b5\u03be \u03bf\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd), \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac \u03b5\u03c0\u03b1\u03bd\u03b1\u03c6\u03ad\u03c1\u03b5\u03c4\u03b1\u03b9. \u03a0\u03b1\u03c1\u03cc\u03bb\u03bf \u03c0\u03bf\u03c5 \u03b7 \u03b5\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1 \u03ba\u03b1\u03b9 \u03c4\u03bf \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf \u03b5\u03c0\u03b9\u03bb\u03ad\u03b3\u03bf\u03c5\u03bd \u03c4\u03b7\u03bd \u03b4\u03b9\u03ba\u03b9\u03ac \u03c4\u03bf\u03c5\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac ( helvetica ), \u03c4\u03bf \u03ba\u03cd\u03c1\u03b9\u03bf \u03c4\u03bc\u03ae\u03bc\u03b1 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03c3\u03c5\u03bd\u03b5\u03c7\u03af\u03b6\u03b5\u03b9 \u03bc\u03b5 \u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac Times . \u0391\u03c5\u03c4\u03cc\u03c2 \u03bf \u03bc\u03b7\u03c7\u03b1\u03bd\u03b9\u03c3\u03bc\u03cc\u03c2 \u03c4\u03b7\u03c2 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b7\u03c2 \u03b5\u03c0\u03b1\u03bd\u03b1\u03c6\u03bf\u03c1\u03ac\u03c2 \u03b5\u03c6\u03b1\u03c1\u03bc\u03cc\u03b6\u03b5\u03c4\u03b1\u03b9 \u03b5\u03c0\u03b9\u03c0\u03bb\u03ad\u03bf\u03bd \u03c3\u03c4\u03bf \u03c7\u03c1\u03ce\u03bc\u03b1 \u03ba\u03b1\u03b9 \u03c3\u03c4\u03bf \u03c0\u03bb\u03ac\u03c4\u03bf\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2. \u03a4\u03bf \u03cc\u03c1\u03b9\u03bf \u03c0\u03bf\u03c5 \u03c0\u03c1\u03bf\u03ba\u03b1\u03bb\u03b5\u03af \u03c4\u03b7\u03bd \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03bf\u03c1\u03b9\u03c3\u03c4\u03b5\u03af \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 set_auto_page_break . \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 3 - \u0391\u03bb\u03bb\u03b1\u03b3\u03ad\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1 \u0391\u03c2 \u03c3\u03c5\u03bd\u03b5\u03c7\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03b5 \u03ad\u03bd\u03b1 \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03c4\u03bf \u03bf\u03c0\u03bf\u03af\u03bf \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03bd\u03b5\u03b9 \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03b9\u03c3\u03bc\u03ad\u03bd\u03b5\u03c2 \u03c0\u03b1\u03c1\u03b1\u03b3\u03c1\u03ac\u03c6\u03bf\u03c5\u03c2. \u0395\u03c0\u03af\u03c3\u03b7\u03c2 \u03b5\u03c0\u03b5\u03be\u03b7\u03b3\u03b5\u03af \u03c4\u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c7\u03c1\u03c9\u03bc\u03ac\u03c4\u03c9\u03bd. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u039a\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03c4\u03bf\u03c5 Jules Verne \u0397 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 get_string_width \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03c4\u03bf\u03bd \u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03bf\u03c5 \u03bc\u03ae\u03ba\u03bf\u03c5\u03c2 \u03bc\u03af\u03b1\u03c2 \u03c3\u03c5\u03bc\u03b2\u03bf\u03bb\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03c3\u03c4\u03b7\u03bd \u03c4\u03c9\u03c1\u03b9\u03bd\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac, \u03c4\u03bf \u03bf\u03c0\u03bf\u03af\u03bf \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7 \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03b3\u03b9\u03b1 \u03c4\u03bf\u03bd \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03bc\u03cc \u03c4\u03b7\u03c2 \u03b8\u03ad\u03c3\u03b7\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03bf\u03c5 \u03c0\u03bb\u03ac\u03c4\u03bf\u03c5\u03c2 \u03c4\u03bf\u03c5 \u03c0\u03bb\u03b1\u03b9\u03c3\u03af\u03bf\u03c5 \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03b2\u03ac\u03bb\u03bb\u03b5\u03b9 \u03c4\u03bf\u03bd \u03c4\u03af\u03c4\u03bb\u03bf. \u0388\u03c0\u03b5\u03b9\u03c4\u03b1 \u03bf\u03c1\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c4\u03b1 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1 (\u03bc\u03ad\u03c3\u03c9 set_draw_color , set_fill_color \u03ba\u03b1\u03b9 set_text_color ) \u03ba\u03b1\u03b9 \u03c4\u03bf \u03c0\u03ac\u03c7\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03bf\u03c1\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03c9\u03c2 1 \u03c7\u03b9\u03bb\u03b9\u03bf\u03c3\u03c4\u03cc\u03bc\u03b5\u03c4\u03c1\u03bf (\u03b1\u03bd\u03c4\u03b9\u03b8\u03ad\u03c4\u03c9\u03c2 \u03c4\u03b7\u03c2 \u03c0\u03c1\u03bf\u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03b7\u03c2 \u03c4\u03b9\u03bc\u03ae\u03c2 0.2) \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 set_line_width . \u03a4\u03b5\u03bb\u03b9\u03ba\u03ac, \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03ba\u03b5\u03bb\u03af (\u03b7 \u03c4\u03b5\u03bb\u03b5\u03c5\u03c4\u03b1\u03af\u03b1 \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf\u03c2 \u03af\u03c3\u03b7 \u03bc\u03b5 true \u03c5\u03c0\u03bf\u03b4\u03b7\u03bb\u03ce\u03bd\u03b5\u03b9 \u03c4\u03b7\u03bd \u03ba\u03ac\u03bb\u03c5\u03c8\u03b7 \u03c4\u03bf\u03c5 \u03c5\u03c0\u03cc\u03b2\u03b1\u03b8\u03c1\u03bf\u03c5). \u0393\u03b9\u03b1 \u03c4\u03b7\u03bd \u03b5\u03ba\u03c4\u03cd\u03c0\u03c9\u03c3\u03b7 \u03c4\u03c9\u03bd \u03c0\u03b1\u03c1\u03b1\u03b3\u03c1\u03ac\u03c6\u03c9\u03bd \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf multi_cell . \u03a4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1. \u039a\u03ac\u03b8\u03b5 \u03c6\u03bf\u03c1\u03ac \u03c0\u03bf\u03c5 \u03bc\u03af\u03b1 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03c6\u03c4\u03ac\u03bd\u03b5\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b1\u03ba\u03c1\u03b1\u03af\u03b1 \u03b4\u03b5\u03be\u03b9\u03ac \u03b8\u03ad\u03c3\u03b7 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03bb\u03b9\u03bf\u03cd \u03ae \u03c3\u03c5\u03bd\u03b1\u03bd\u03c4\u03ac\u03c4\u03b1\u03b9 \u03c7\u03b1\u03c1\u03b1\u03ba\u03c4\u03ae\u03c1\u03b1\u03c2 \u03b5\u03c0\u03b9\u03c3\u03c4\u03c1\u03bf\u03c6\u03ae\u03c2 \u03c6\u03bf\u03c1\u03ad\u03b1 ( \\n ), \u03ba\u03b1\u03bb\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03bd\u03ad\u03bf \u03ba\u03b5\u03bb\u03af \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1 \u03ba\u03ac\u03c4\u03c9 \u03b1\u03c0\u03cc \u03c4\u03bf \u03c4\u03c9\u03c1\u03b9\u03bd\u03cc. \u039c\u03af\u03b1 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b7 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03bf \u03c3\u03b7\u03bc\u03b5\u03af\u03bf \u03bc\u03b5 \u03c4\u03bf \u03c0\u03bb\u03b7\u03c3\u03b9\u03ad\u03c3\u03c4\u03b5\u03c1\u03bf \u03c7\u03b1\u03c1\u03b1\u03ba\u03c4\u03ae\u03c1\u03b1 \u03ba\u03b5\u03bd\u03bf\u03cd \u03ae \u03b5\u03bd\u03c9\u03c4\u03b9\u03ba\u03bf\u03cd \u03c3\u03c5\u03bb\u03bb\u03b1\u03b2\u03ae\u03c2 ( \\u00ad ) \u03c0\u03c1\u03b9\u03bd \u03c4\u03b7\u03bd \u03b1\u03ba\u03c1\u03b1\u03af\u03b1 \u03b4\u03b5\u03be\u03b9\u03ac \u03b8\u03ad\u03c3\u03b7. \u0388\u03bd\u03b1 \u03b5\u03bd\u03c9\u03c4\u03b9\u03ba\u03cc \u03c3\u03c5\u03bb\u03bb\u03b1\u03b2\u03ae\u03c2 \u03b8\u03b1 \u03b1\u03bd\u03c4\u03b9\u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03b1\u03b8\u03b5\u03af \u03b1\u03c0\u03cc \u03ad\u03bd\u03b1 \u03b1\u03c0\u03bb\u03cc \u03b5\u03bd\u03c9\u03c4\u03b9\u03ba\u03cc \u03cc\u03c4\u03b1\u03bd \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2, \u03b1\u03bb\u03bb\u03b9\u03ce\u03c2 \u03b8\u03b1 \u03b1\u03b3\u03bd\u03bf\u03b7\u03b8\u03b5\u03af. \u039f\u03c1\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03b9 \u03b4\u03cd\u03bf \u03b9\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5: \u03bf \u03c4\u03af\u03c4\u03bb\u03bf\u03c2 ( set_title ) \u03ba\u03b1\u03b9 \u03bf \u03c3\u03c5\u03b3\u03b3\u03c1\u03b1\u03c6\u03ad\u03b1\u03c2 ( set_author ). \u039f\u03b9 \u03b9\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bd \u03bd\u03b1 \u03c0\u03c1\u03bf\u03b2\u03bb\u03b7\u03b8\u03bf\u03cd\u03bd \u03bc\u03b5 \u03b4\u03cd\u03bf \u03c4\u03c1\u03cc\u03c0\u03bf\u03c5\u03c2. \u03a0\u03c1\u03ce\u03c4\u03bf\u03bd, \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b1\u03bd\u03bf\u03af\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03b1\u03c0\u03b5\u03c5\u03b8\u03b5\u03af\u03b1\u03c2 \u03bc\u03ad\u03c3\u03c9 Acrobat Reader, \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b5\u03c5\u03b8\u03c5\u03bd\u03b8\u03bf\u03cd\u03bc\u03b5 \u03c3\u03c4\u03bf \u039c\u03b5\u03bd\u03bf\u03cd \u0391\u03c1\u03c7\u03b5\u03af\u03c9\u03bd \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u0399\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u0391\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u0394\u03b5\u03cd\u03c4\u03b5\u03c1\u03bf\u03bd, \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03b1\u03c0\u03b5\u03c5\u03b8\u03b5\u03af\u03b1\u03c2 \u03bd\u03b1 \u03ba\u03ac\u03bd\u03bf\u03c5\u03bc\u03b5 \u03b4\u03b5\u03be\u03af \u03ba\u03bb\u03b9\u03ba \u03c3\u03c4\u03bf \u03b5\u03b9\u03ba\u03bf\u03bd\u03af\u03b4\u03b9\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9\u03c2 \u0399\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u0391\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 4 - \u03a0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03ad\u03c2 \u03a3\u03c4\u03ae\u03bb\u03b5\u03c2 \u0391\u03c5\u03c4\u03cc \u03c4\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03bc\u03af\u03b1 \u03c0\u03b1\u03c1\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c4\u03bf\u03c5 \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bc\u03b1\u03c2 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03b9 \u03c0\u03c9\u03c2 \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03bd\u03ad\u03bc\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03cc \u03bc\u03b1\u03c2 \u03c3\u03b5 \u03c0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03ad\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b5\u03c2. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u039a\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03c4\u03bf\u03c5 Jules Verne \u0397 \u03ba\u03cd\u03c1\u03b9\u03b1 \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03ac \u03b1\u03c0\u03cc \u03c4\u03bf \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03c9\u03bd \u03bc\u03b5\u03b8\u03cc\u03b4\u03c9\u03bd accept_page_break \u03ba\u03b1\u03b9 set_col. \u03a7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf accept_page_break , \u03bc\u03cc\u03bb\u03b9\u03c2 \u03c4\u03bf \u03ba\u03b5\u03bb\u03af \u03be\u03b5\u03c0\u03b5\u03c1\u03ac\u03c3\u03b5\u03b9 \u03c4\u03bf \u03ba\u03ac\u03c4\u03c9 \u03cc\u03c1\u03b9\u03bf \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2, \u03b3\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03ad\u03bb\u03b5\u03b3\u03c7\u03bf\u03c2 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03b9\u03b8\u03bc\u03bf\u03cd \u03c4\u03b7\u03c2 \u03c4\u03c9\u03c1\u03b9\u03bd\u03ae\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2. \u0395\u03ac\u03bd \u03bf \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 \u03b1\u03c5\u03c4\u03cc\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03bc\u03b9\u03ba\u03c1\u03cc\u03c4\u03b5\u03c1\u03bf\u03c2 \u03c4\u03bf\u03c5 2 (\u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03ba\u03b1\u03c4\u03b1\u03bd\u03bf\u03bc\u03ae \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03c3\u03b5 \u03c4\u03c1\u03b5\u03b9\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b5\u03c2) \u03b8\u03b1 \u03ba\u03bb\u03b7\u03b8\u03b5\u03af \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 set_col, \u03b1\u03c5\u03be\u03ac\u03bd\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf\u03bd \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2 \u03ba\u03b1\u03b9 \u03b1\u03bb\u03bb\u03ac\u03b6\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03b7\u03bd \u03b8\u03ad\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b1\u03bc\u03ad\u03c3\u03c9\u03c2 \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2 \u03ad\u03c4\u03c3\u03b9 \u03ce\u03c3\u03c4\u03b5 \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03bd\u03b1 \u03c3\u03c5\u03bd\u03b5\u03c7\u03b9\u03c3\u03c4\u03b5\u03af \u03b5\u03ba\u03b5\u03af. \u039c\u03cc\u03bb\u03b9\u03c2 \u03c6\u03c4\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c3\u03c4\u03bf \u03c4\u03bf \u03ba\u03ac\u03c4\u03c9 \u03cc\u03c1\u03b9\u03bf \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03c4\u03b7\u03c2 \u03c4\u03c1\u03af\u03c4\u03b7\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2, \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 accept_page_break \u03b5\u03c0\u03b1\u03bd\u03b1\u03c6\u03ad\u03c1\u03b5\u03c4\u03b1\u03b9 \u03ba\u03b1\u03b9 \u03bc\u03b5\u03c4\u03b1\u03c6\u03b5\u03c1\u03cc\u03bc\u03b1\u03c3\u03c4\u03b5 \u03be\u03b1\u03bd\u03ac \u03c0\u03af\u03c3\u03c9 \u03c3\u03c4\u03b7\u03bd \u03c0\u03c1\u03ce\u03c4\u03b7 \u03c3\u03c4\u03ae\u03bb\u03b7 \u03cc\u03c0\u03bf\u03c5 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2. \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 5 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03a0\u03b9\u03bd\u03ac\u03ba\u03c9\u03bd \u03a3\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03bc\u03ac\u03b8\u03b7\u03bc\u03b1 \u03b8\u03b1 \u03b5\u03be\u03b7\u03b3\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c0\u03c9\u03c2 \u03bd\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03bf\u03cd\u03bc\u03b5 \u03b5\u03cd\u03ba\u03bf\u03bb\u03b1 \u03c0\u03af\u03bd\u03b1\u03ba\u03b5\u03c2. \u039f \u03ba\u03ce\u03b4\u03b9\u03ba\u03b1\u03c2 \u03b8\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03b5\u03b9 \u03c4\u03c1\u03b5\u03b9\u03c2 \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03b5\u03c4\u03b9\u03ba\u03bf\u03cd\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b5\u03c2 \u03ad\u03c4\u03c3\u03b9 \u03ce\u03c3\u03c4\u03b5 \u03bd\u03b1 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03b5\u03c0\u03b9\u03c4\u03b5\u03c5\u03c7\u03b8\u03b5\u03af \u03bc\u03b5 \u03bc\u03b5\u03c1\u03b9\u03ba\u03ad\u03c2 \u03b1\u03c0\u03bb\u03ad\u03c2 \u03c0\u03c1\u03bf\u03c3\u03b1\u03c1\u03bc\u03bf\u03b3\u03ad\u03c2. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF - \u039a\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03a7\u03c9\u03c1\u03ce\u03bd \u0395\u03c6\u03cc\u03c3\u03bf\u03bd \u03ad\u03bd\u03b1\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1\u03c2 \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03bc\u03af\u03b1 \u03c3\u03c5\u03bb\u03bb\u03bf\u03b3\u03ae \u03b1\u03c0\u03cc \u03ba\u03b5\u03bb\u03b9\u03ac, \u03b5\u03af\u03bd\u03b1\u03b9 \u03c6\u03c5\u03c3\u03b9\u03ba\u03cc \u03bd\u03b1 \u03c4\u03bf\u03bd \u03ba\u03b1\u03c4\u03b1\u03c3\u03ba\u03b5\u03c5\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b1\u03c0\u03cc \u03b1\u03c5\u03c4\u03ac. \u03a4\u03bf \u03c0\u03c1\u03ce\u03c4\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b5\u03c0\u03b9\u03c4\u03c5\u03b3\u03c7\u03ac\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03bf\u03bd \u03c0\u03b9\u03bf \u03b1\u03c0\u03bb\u03cc \u03c4\u03c1\u03cc\u03c0\u03bf: \u03c0\u03bb\u03b1\u03b9\u03c3\u03b9\u03c9\u03bc\u03ad\u03bd\u03b1 \u03ba\u03b5\u03bb\u03b9\u03ac, \u03af\u03b4\u03b9\u03bf\u03c5 \u03bc\u03b5\u03b3\u03ad\u03b8\u03bf\u03c5\u03c2 \u03ba\u03b1\u03b9 \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ac \u03c3\u03c4\u03bf\u03b9\u03c7\u03b9\u03c3\u03bc\u03ad\u03bd\u03b1. \u03a4\u03bf \u03b1\u03c0\u03bf\u03c4\u03ad\u03bb\u03b5\u03c3\u03bc\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c5\u03c0\u03bf\u03c4\u03c5\u03c0\u03ce\u03b4\u03b5\u03c2 \u03b1\u03bb\u03bb\u03ac \u03b1\u03c0\u03bf\u03ba\u03c4\u03ac\u03c4\u03b1\u03b9 \u03b1\u03c1\u03ba\u03b5\u03c4\u03ac \u03b5\u03cd\u03ba\u03bf\u03bb\u03b1. \u039f \u03b4\u03b5\u03cd\u03c4\u03b5\u03c1\u03bf\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1\u03c2 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03b9 \u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03b5\u03c2 \u03b2\u03b5\u03bb\u03c4\u03b9\u03ce\u03c3\u03b5\u03b9\u03c2: \u03ba\u03ac\u03b8\u03b5 \u03c3\u03c4\u03ae\u03bb\u03b7 \u03ad\u03c7\u03b5\u03b9 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c4\u03b7\u03c2 \u03c0\u03bb\u03ac\u03c4\u03bf\u03c2, \u03bf\u03b9 \u03c4\u03af\u03c4\u03bb\u03bf\u03b9 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ba\u03b5\u03bd\u03c4\u03c1\u03b1\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf\u03b9 \u03ba\u03b1\u03b9 \u03bf\u03b9 \u03b1\u03c1\u03b9\u03b8\u03bc\u03bf\u03af \u03b4\u03b5\u03be\u03b9\u03ac \u03c3\u03c4\u03bf\u03b9\u03c7\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf\u03b9. \u0395\u03c0\u03b9\u03c0\u03bb\u03ad\u03bf\u03bd, \u03bf\u03c1\u03b9\u03b6\u03cc\u03bd\u03c4\u03b9\u03b5\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ad\u03c2 \u03ad\u03c7\u03bf\u03c5\u03bd \u03b1\u03c6\u03b1\u03b9\u03c1\u03b5\u03b8\u03b5\u03af. \u0391\u03c5\u03c4\u03cc \u03b5\u03c0\u03b9\u03c4\u03c5\u03b3\u03c7\u03ac\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf border \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 Cell(), \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03bf\u03c1\u03af\u03b6\u03b5\u03b9 \u03c0\u03bf\u03b9\u03b5\u03c2 \u03c0\u03bb\u03b5\u03c5\u03c1\u03ad\u03c2 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03bb\u03b9\u03bf\u03cd \u03c7\u03c1\u03b5\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03c7\u03b5\u03b4\u03b9\u03b1\u03c3\u03c4\u03bf\u03cd\u03bd. \u03a3\u03c4\u03b7 \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03b8\u03ad\u03bb\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9\u03c2 \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ad\u03c2 (L) \u03ba\u03b1\u03b9 \u03c4\u03b9\u03c2 \u03b4\u03b5\u03be\u03b9\u03ad\u03c2 (R). \u03a4\u03ce\u03c1\u03b1 \u03b1\u03c0\u03bf\u03bc\u03ad\u03bd\u03b5\u03b9 \u03bc\u03cc\u03bd\u03bf \u03c4\u03bf \u03c0\u03c1\u03cc\u03b2\u03bb\u03b7\u03bc\u03b1 \u03c4\u03c9\u03bd \u03bf\u03c1\u03b9\u03b6\u03cc\u03bd\u03c4\u03b9\u03c9\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ce\u03bd. \u039c\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03c4\u03bf \u03bb\u03cd\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03b5 \u03b4\u03cd\u03bf \u03c4\u03c1\u03cc\u03c0\u03bf\u03c5\u03c2: \u03bd\u03b1 \u03b5\u03bb\u03ad\u03b3\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03c4\u03b5\u03bb\u03b5\u03c5\u03c4\u03b1\u03af\u03b1 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03c3\u03c4\u03bf \u03b2\u03c1\u03cc\u03c7\u03bf \u03b5\u03c0\u03b1\u03bd\u03b1\u03bb\u03ae\u03c8\u03b5\u03c9\u03bd, \u03bf\u03c0\u03cc\u03c4\u03b5 \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 LRB \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf border \u03ae, \u03cc\u03c0\u03c9\u03c2 \u03c0\u03c1\u03ac\u03be\u03b1\u03bc\u03b5 \u03b5\u03b4\u03ce, \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03cc\u03c4\u03b1\u03bd \u03c4\u03b5\u03bb\u03b5\u03b9\u03ce\u03c3\u03b5\u03b9 \u03bf \u03b2\u03c1\u03cc\u03c7\u03bf\u03c2 \u03b5\u03c0\u03b1\u03bd\u03b1\u03bb\u03ae\u03c8\u03b5\u03c9\u03bd. \u039f \u03c4\u03c1\u03af\u03c4\u03bf\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c0\u03b1\u03c1\u03cc\u03bc\u03bf\u03b9\u03bf\u03c2 \u03bc\u03b5 \u03c4\u03bf\u03bd \u03b4\u03b5\u03cd\u03c4\u03b5\u03c1\u03bf \u03b1\u03bb\u03bb\u03ac \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1. \u03a4\u03b1 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1 \u03c4\u03bf\u03c5 \u03b3\u03b5\u03bc\u03af\u03c3\u03bc\u03b1\u03c4\u03bf\u03c2, \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ce\u03bd \u03bf\u03c1\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03b9 \u03be\u03b5\u03c7\u03c9\u03c1\u03b9\u03c3\u03c4\u03ac. \u039f \u03b5\u03bd\u03b1\u03bb\u03bb\u03b1\u03c3\u03c3\u03cc\u03bc\u03b5\u03bd\u03bf\u03c2 \u03c7\u03c1\u03c9\u03bc\u03b1\u03c4\u03b9\u03c3\u03bc\u03cc\u03c2 \u03c4\u03c9\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ce\u03bd \u03c4\u03bf\u03c5 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1 \u03b5\u03c0\u03b9\u03c4\u03c5\u03b3\u03c7\u03ac\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03b4\u03b9\u03b1\u03c6\u03b1\u03bd\u03ce\u03bd \u03ba\u03b1\u03b9 \u03b3\u03b5\u03bc\u03b9\u03c3\u03bc\u03ad\u03bd\u03c9\u03bd \u03ba\u03b5\u03bb\u03b9\u03ce\u03bd. \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 6 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03ba\u03b1\u03b9 \u03bc\u03af\u03be\u03b7 \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03a3\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03bc\u03ac\u03b8\u03b7\u03bc\u03b1 \u03b8\u03b1 \u03b5\u03be\u03b7\u03b3\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03bf\u03cd\u03c2 \u03c4\u03c1\u03cc\u03c0\u03bf\u03c5\u03c2 \u03b5\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae\u03c2 \u03b5\u03c3\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03ce\u03bd \u03b1\u03bb\u03bb\u03b1 \u03ba\u03b1\u03b9 \u03b5\u03be\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03ce\u03bd \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03c3\u03b5 \u03ad\u03bd\u03b1 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf pdf. \u0398\u03b1 \u03b1\u03bd\u03b1\u03bb\u03cd\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b5\u03c0\u03af\u03c3\u03b7\u03c2 \u03c0\u03c9\u03c2 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b4\u03b9\u03ac\u03c6\u03bf\u03c1\u03b1 \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 (\u03ad\u03bd\u03c4\u03bf\u03bd\u03b7 \u03b3\u03c1\u03b1\u03c6\u03ae, \u03c0\u03bb\u03ac\u03b3\u03b9\u03b1 \u03b3\u03c1\u03b1\u03c6\u03ae, \u03c5\u03c0\u03bf\u03b3\u03c1\u03ac\u03bc\u03bc\u03b9\u03c3\u03b7) \u03b5\u03bd\u03c4\u03cc\u03c2 \u03c4\u03bf\u03c5 \u03af\u03b4\u03b9\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF - fpdf2-logo \u03a0\u03b1\u03c1\u03b1\u03c4\u03b7\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bc\u03af\u03b1 \u03bd\u03ad\u03b1 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03b5\u03ba\u03c4\u03cd\u03c0\u03c9\u03c3\u03b7 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5, \u03c4\u03b7\u03bd write() . \u0397 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03b1\u03c5\u03c4\u03ae, \u03b8\u03c5\u03bc\u03af\u03b6\u03b5\u03b9 \u03b1\u03c1\u03ba\u03b5\u03c4\u03ac \u03c4\u03b7\u03bd multi_cell() , \u03c0\u03b1\u03c1\u03cc\u03bb\u03b1 \u03b1\u03c5\u03c4\u03ac \u03b5\u03bc\u03c6\u03b1\u03bd\u03af\u03b6\u03b5\u03b9 \u03c4\u03b9\u03c2 \u03b5\u03be\u03ae\u03c2 \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03ad\u03c2: \u03a4\u03bf \u03c4\u03ad\u03bb\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03b2\u03c1\u03af\u03c3\u03ba\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03bf \u03b4\u03b5\u03be\u03af \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03bf \u03ba\u03b1\u03b9 \u03b7 \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03be\u03b5\u03ba\u03b9\u03bd\u03ac\u03b5\u03b9 \u03c3\u03c4\u03bf \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03cc \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03bf. \u0397 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7 \u03bc\u03b5\u03c4\u03b1\u03ba\u03b9\u03bd\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03bf \u03c4\u03ad\u03bb\u03bf\u03c2 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5. \u0391\u03c5\u03c4\u03ae \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2, \u03b5\u03c0\u03bf\u03bc\u03ad\u03bd\u03c9\u03c2 \u03bc\u03b1\u03c2 \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03bd\u03b1 \u03b3\u03c1\u03ac\u03c8\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03ba\u03bf\u03bc\u03bc\u03ac\u03c4\u03b9 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5, \u03bd\u03b1 \u03b1\u03bb\u03bb\u03ac\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac, \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03c5\u03bd\u03b5\u03c7\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b1\u03ba\u03c1\u03b9\u03b2\u03ce\u03c2 \u03c3\u03c4\u03bf \u03c3\u03b7\u03bc\u03b5\u03af\u03bf \u03c0\u03bf\u03c5 \u03b5\u03af\u03c7\u03b1\u03bc\u03b5 \u03b1\u03c0\u03bf\u03bc\u03b5\u03af\u03bd\u03b5\u03b9. \u0391\u03c0\u03cc \u03c4\u03b7\u03bd \u03ac\u03bb\u03bb\u03b7 \u03c0\u03bb\u03b5\u03c5\u03c1\u03ac, \u03c4\u03bf \u03b2\u03b1\u03c3\u03b9\u03ba\u03cc \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b9\u03bf\u03bd\u03ad\u03ba\u03c4\u03b7\u03bc\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03cc\u03c4\u03b9 \u03b4\u03b5\u03bd \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03cc\u03c0\u03c9\u03c2 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf multi_cell() . \u03a3\u03c4\u03b7\u03bd \u03c0\u03c1\u03ce\u03c4\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1 \u03c4\u03bf\u03c5 \u03c0\u03b1\u03c1\u03b1\u03b4\u03b5\u03af\u03b3\u03bc\u03b1\u03c4\u03bf\u03c2 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf write() \u03b3\u03b9\u03b1 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03c3\u03ba\u03bf\u03c0\u03cc. \u03a4\u03bf \u03c0\u03c1\u03ce\u03c4\u03bf \u03ba\u03bf\u03bc\u03bc\u03ac\u03c4\u03b9 \u03c4\u03b7\u03c2 \u03c0\u03c1\u03cc\u03c4\u03b1\u03c3\u03b7\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ad\u03bd\u03bf \u03c9\u03c2 \u03b1\u03c0\u03bb\u03cc \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf, \u03b5\u03bd\u03ce \u03c3\u03c4\u03b7 \u03c3\u03c5\u03bd\u03ad\u03c7\u03b5\u03b9\u03b1, \u03b1\u03c6\u03bf\u03cd \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf set_font() , \u03b1\u03bb\u03bb\u03ac\u03be\u03b1\u03bc\u03b5 \u03c4\u03bf \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03c3\u03b5 \u03c5\u03c0\u03bf\u03b3\u03c1\u03ac\u03bc\u03bc\u03b9\u03c3\u03b7 \u03ba\u03b1\u03b9 \u03ba\u03bb\u03b5\u03af\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03c0\u03c1\u03cc\u03c4\u03b1\u03c3\u03b7. \u0393\u03b9\u03b1 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1\u03bd \u03b5\u03c3\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf \u03bf \u03bf\u03c0\u03bf\u03af\u03bf\u03c2 \u03b8\u03b1 \u03ba\u03b1\u03c4\u03b5\u03c5\u03b8\u03cd\u03bd\u03b5\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1, \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf add_link() , \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03b5\u03af \u03bc\u03af\u03b1 \u03b5\u03c0\u03b9\u03c6\u03b1\u03bd\u03b5\u03af\u03b1 \u03bc\u03b5 \u03cc\u03bd\u03bf\u03bc\u03b1 \"link\". \u0391\u03bd \u03ba\u03bb\u03b9\u03ba\u03ac\u03c1\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1 \u03b1\u03c5\u03c4\u03ae \u03bc\u03b5\u03c4\u03b1\u03c6\u03b5\u03c1\u03cc\u03bc\u03b1\u03c3\u03c4\u03b5 \u03c3\u03b5 \u03bc\u03af\u03b1 \u03ac\u03bb\u03bb\u03b7 \u03c4\u03bf\u03c0\u03bf\u03b8\u03b5\u03c3\u03af\u03b1 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u03a3\u03c4\u03b7\u03bd \u03b4\u03b5\u03cd\u03c4\u03b5\u03c1\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf set_link() \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03bf\u03c1\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf\u03bd \u03c0\u03c1\u03bf\u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03bf\u03c5 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03bf\u03c5 \u03c0\u03bf\u03c5 \u03bc\u03cc\u03bb\u03b9\u03c2 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03b1\u03bc\u03b5. \u0393\u03b9\u03b1 \u03bd\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1\u03bd \u03b5\u03be\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf \u03bc\u03ad\u03c3\u03c9 \u03bc\u03b9\u03b1\u03c2 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1\u03c2, \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf image() . \u0391\u03c5\u03c4\u03ae \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03bc\u03b1\u03c2 \u03b4\u03af\u03bd\u03b5\u03b9 \u03c4\u03b7\u03bd \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03bd\u03b1 \u03c0\u03b5\u03c1\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1\u03bd \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf \u03c9\u03c2 \u03c4\u03b9\u03bc\u03ae \u03c3\u03b5 \u03bc\u03af\u03b1 \u03b1\u03c0\u03cc \u03c4\u03b9\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bc\u03ad\u03c4\u03c1\u03bf\u03c5\u03c2 \u03c4\u03b7\u03c2. \u039f \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf\u03c2 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03c3\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc\u03c2 \u03ae \u03b5\u03be\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc\u03c2. \u0395\u03bd\u03b1\u03bb\u03bb\u03b1\u03ba\u03c4\u03b9\u03ba\u03ac, \u03bc\u03af\u03b1 \u03b1\u03ba\u03cc\u03bc\u03b7 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03b1\u03bb\u03bb\u03ac\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03bf\u03c5\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 write_html() . \u0397 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03b1\u03c5\u03c4\u03ae, \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03ad\u03bd\u03b1\u03bd \u03b1\u03bd\u03b1\u03bb\u03c5\u03c4\u03ae html \u03bf \u03bf\u03c0\u03bf\u03af\u03bf\u03c2 \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5, \u03c4\u03b7\u03bd \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03bc\u03b5 \u03c4\u03b7\u03bd \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 html.","title":"\u03a0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u0395\u03ba\u03bc\u03ac\u03b8\u03b7\u03c3\u03b7\u03c2 #"},{"location":"Tutorial-gr.html#_1","text":"\u03a0\u03bb\u03ae\u03c1\u03b7\u03c2 \u03c4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03c9\u03c3\u03b7 \u03c4\u03c9\u03bd \u03bc\u03b5\u03b8\u03cc\u03b4\u03c9\u03bd: fpdf.FPDF API doc \u03a0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u0395\u03ba\u03bc\u03ac\u03b8\u03b7\u03c3\u03b7\u03c2 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 1 - \u0391\u03c0\u03bb\u03cc \u03a0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 2 - \u0395\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1, \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf, \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03ba\u03b1\u03b9 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 3 - \u0391\u03bb\u03bb\u03b1\u03b3\u03ad\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 4 - \u03a0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03ad\u03c2 \u03a3\u03c4\u03ae\u03bb\u03b5\u03c2 \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 5 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03a0\u03b9\u03bd\u03ac\u03ba\u03c9\u03bd \u039c\u03ac\u03b8\u03b7\u03bc\u03b1 6 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03ba\u03b1\u03b9 \u03bc\u03af\u03be\u03b7 \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5","title":"\u03a0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u0395\u03ba\u03bc\u03ac\u03b8\u03b7\u03c3\u03b7\u03c2"},{"location":"Tutorial-gr.html#1-","text":"\u0391\u03c2 \u03be\u03b5\u03ba\u03b9\u03bd\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03b5 \u03ad\u03bd\u03b1 \u03ba\u03bb\u03b1\u03c3\u03c3\u03b9\u03ba\u03cc \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u0391\u03c6\u03bf\u03cd \u03c3\u03c5\u03bc\u03c0\u03b5\u03c1\u03b9\u03bb\u03ac\u03b2\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03b2\u03b9\u03b2\u03bb\u03b9\u03bf\u03b8\u03ae\u03ba\u03b7\u03c2, \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03bf\u03cd\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03b1\u03bd\u03c4\u03b9\u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf FPDF . \u039f \u03ba\u03b1\u03c4\u03b1\u03c3\u03ba\u03b5\u03c5\u03b1\u03c3\u03c4\u03ae\u03c2 FPDF \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03bc\u03b5 \u03c4\u03b9\u03c2 \u03c0\u03c1\u03bf\u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03b5\u03c2 \u03c4\u03b9\u03bc\u03ad\u03c2: \u03bf\u03b9 \u03c3\u03b5\u03bb\u03af\u03b4\u03b5\u03c2 \u03ad\u03c7\u03bf\u03c5\u03bd \u03b4\u03b9\u03b1\u03c3\u03c4\u03ac\u03c3\u03b5\u03b9\u03c2 \u03914 \u03ba\u03b1\u03b9 \u03b7 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b1\u03c2 \u03bc\u03ad\u03c4\u03c1\u03b7\u03c3\u03b7\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c4\u03bf \u03c7\u03b9\u03bb\u03b9\u03bf\u03c3\u03c4\u03cc\u03bc\u03b5\u03c4\u03c1\u03bf. \u039f\u03b9 \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b5\u03c2 \u03c4\u03b9\u03bc\u03ad\u03c2 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bd \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b4\u03b9\u03bf\u03c1\u03b9\u03c3\u03c4\u03bf\u03cd\u03bd \u03b1\u03bd\u03b1\u03bb\u03c5\u03c4\u03b9\u03ba\u03ac \u03c9\u03c2 \u03b5\u03be\u03ae\u03c2: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u0394\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03b7 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03bd\u03b1 \u03bf\u03c1\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf PDF \u03c3\u03b5 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03c4\u03bf\u03c0\u03af\u03bf\u03c5 ( L ) \u03ae \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ac\u03bb\u03bb\u03b5\u03c2 \u03bc\u03bf\u03c1\u03c6\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b5\u03b9\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 (\u03cc\u03c0\u03c9\u03c2 Letter \u03ba\u03b1\u03b9 Legal ) \u03ba\u03b1\u03b9 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b5\u03c2 \u03bc\u03ad\u03c4\u03c1\u03b7\u03c3\u03b7\u03c2 ( pt , cm , in ). \u03a0\u03c1\u03bf\u03c2 \u03c4\u03bf \u03c0\u03b1\u03c1\u03cc\u03bd \u03b4\u03b5\u03bd \u03c5\u03c0\u03ac\u03c1\u03c7\u03b5\u03b9 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1, \u03bf\u03c0\u03cc\u03c4\u03b5 \u03b8\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03af\u03b1 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf add_page . \u0397 \u03b1\u03c1\u03c7\u03ae \u03b2\u03c1\u03af\u03c3\u03ba\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ae \u03ac\u03bd\u03c9 \u03b3\u03c9\u03bd\u03af\u03b1 \u03ba\u03b1\u03b9 \u03b7 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7 \u03c4\u03bf\u03c0\u03bf\u03b8\u03b5\u03c4\u03b5\u03af\u03c4\u03b1\u03b9, \u03b1\u03c0\u03cc \u03c0\u03c1\u03bf\u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae, \u03c3\u03b5 \u03b1\u03c0\u03cc\u03c3\u03c4\u03b1\u03c3\u03b7 1 cm \u03b1\u03c0\u03cc \u03c4\u03bf \u03c0\u03b5\u03c1\u03af\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1. \u03a4\u03b1 \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03b1 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bd \u03bd\u03b1 \u03bf\u03c1\u03b9\u03c3\u03c4\u03bf\u03cd\u03bd \u03bc\u03b5 set_margins . \u03a0\u03c1\u03c9\u03c4\u03bf\u03cd \u03bc\u03c0\u03bf\u03c1\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf, \u03b5\u03af\u03bd\u03b1\u03b9 \u03c5\u03c0\u03bf\u03c7\u03c1\u03b5\u03c9\u03c4\u03b9\u03ba\u03cc \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac \u03bc\u03b5 set_font , \u03b1\u03bb\u03bb\u03b9\u03ce\u03c2 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03b4\u03b5\u03bd \u03b8\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03b3\u03ba\u03c5\u03c1\u03bf. \u0395\u03c0\u03b9\u03bb\u03ad\u03b3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) \u039c\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03c0\u03bb\u03ac\u03b3\u03b9\u03b1 \u03b3\u03c1\u03b1\u03c6\u03ae \u03bc\u03b5 I , \u03c5\u03c0\u03bf\u03b3\u03c1\u03ac\u03bc\u03bc\u03b9\u03c3\u03b7 \u03bc\u03b5 U \u03b7 \u03bc\u03af\u03b1 \u03b1\u03c0\u03bb\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac \u03bc\u03b5 \u03bc\u03af\u03b1 \u03ba\u03b5\u03bd\u03ae \u03c3\u03c5\u03bc\u03b2\u03bf\u03bb\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac (\u03ae \u03bf\u03c0\u03bf\u03b9\u03bf\u03bd\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03c3\u03c5\u03bd\u03b4\u03b9\u03b1\u03c3\u03bc\u03cc). \u0391\u03be\u03af\u03b6\u03b5\u03b9 \u03bd\u03b1 \u03c3\u03b7\u03bc\u03b5\u03b9\u03c9\u03b8\u03b5\u03af \u03cc\u03c4\u03b9 \u03c4\u03bf \u03bc\u03ad\u03b3\u03b5\u03b8\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03b4\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03c3\u03b7\u03bc\u03b5\u03af\u03b1, \u03cc\u03c7\u03b9 \u03c7\u03b9\u03bb\u03b9\u03bf\u03c3\u03c4\u03cc\u03bc\u03b5\u03c4\u03c1\u03b1 (\u03ae \u03ba\u03ac\u03c0\u03bf\u03b9\u03b1 \u03ac\u03bb\u03bb\u03b7 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b1 \u03bc\u03ad\u03c4\u03c1\u03b7\u03c3\u03b7\u03c2). \u03a4\u03bf \u03c0\u03b1\u03c1\u03b1\u03c0\u03ac\u03bd\u03c9 \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03c4\u03b7 \u03bc\u03bf\u03bd\u03b1\u03b4\u03b9\u03ba\u03ae \u03b5\u03be\u03b1\u03af\u03c1\u03b5\u03c3\u03b7. \u039f\u03b9 \u03c5\u03c0\u03cc\u03bb\u03bf\u03b9\u03c0\u03b5\u03c2 \u03b5\u03bd\u03c3\u03c9\u03bc\u03b1\u03c4\u03c9\u03bc\u03ad\u03bd\u03b5\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03af\u03c1\u03b5\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 Times , Courier , Symbol and ZapfDingbats . \u03a0\u03bb\u03ad\u03bf\u03bd, \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03ba\u03b5\u03bb\u03af cell . \u0388\u03bd\u03b1 \u03ba\u03b5\u03bb\u03af \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03bc\u03af\u03b1 \u03bf\u03c1\u03b8\u03bf\u03b3\u03ce\u03bd\u03b9\u03b1 \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1, \u03c0\u03b9\u03b8\u03b1\u03bd\u03ce\u03c2 \u03c0\u03bb\u03b1\u03b9\u03c3\u03b9\u03c9\u03bc\u03ad\u03bd\u03b7, \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03b5\u03b9 \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf. \u0391\u03c0\u03b5\u03b9\u03ba\u03bf\u03bd\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7. \u039f\u03c1\u03af\u03b6\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9\u03c2 \u03b4\u03b9\u03b1\u03c3\u03c4\u03ac\u03c3\u03b5\u03b9\u03c2 \u03c4\u03b7\u03c2, \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03cc \u03c4\u03b7\u03c2 (\u03ba\u03b5\u03bd\u03c4\u03c1\u03b1\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf \u03ae \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf), \u03b5\u03ac\u03bd \u03b5\u03c0\u03b9\u03b8\u03c5\u03bc\u03bf\u03cd\u03bc\u03b5 \u03b5\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03c4\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03bf\u03c2, \u03ba\u03b1\u03b9 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03bc\u03b5\u03c4\u03b1\u03ba\u03b9\u03bd\u03b7\u03b8\u03b5\u03af \u03b7 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7 \u03bc\u03b5\u03c4\u03ac \u03b1\u03c0\u03cc \u03b1\u03c5\u03c4\u03ae (\u03c3\u03c4\u03b1 \u03b4\u03b5\u03be\u03b9\u03ac \u03c4\u03b7\u03c2 \u03bf\u03c1\u03b8\u03bf\u03b3\u03ce\u03bd\u03b9\u03b1\u03c2 \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1\u03c2, \u03b1\u03c0\u03cc \u03ba\u03ac\u03c4\u03c9 \u03c4\u03b7\u03c2 \u03ae \u03c3\u03c4\u03b7\u03bd \u03b1\u03c6\u03b5\u03c4\u03b7\u03c1\u03af\u03b1 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2). \u039c\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03c0\u03bb\u03b1\u03af\u03c3\u03b9\u03bf \u03c9\u03c2 \u03b5\u03be\u03ae\u03c2: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) \u0393\u03b9\u03b1 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03bd\u03ad\u03bf \u03ba\u03b5\u03bb\u03af \u03b4\u03af\u03c0\u03bb\u03b1 \u03c3\u03c4\u03bf \u03b1\u03c1\u03c7\u03b9\u03ba\u03cc \u03bc\u03b5 \u03ba\u03b5\u03bd\u03c4\u03c1\u03b1\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03ba\u03b1\u03b9 \u03c3\u03c4\u03b7 \u03c3\u03c5\u03bd\u03ad\u03c7\u03b5\u03b9\u03b1 \u03bd\u03b1 \u03bc\u03b5\u03c4\u03b1\u03b2\u03bf\u03cd\u03bc\u03b5 \u03c3\u03c4\u03b7\u03bd \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae, \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03bf\u03cd\u03bc\u03b5: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) \u03a0\u03b1\u03c1\u03b1\u03c4\u03ae\u03c1\u03b7\u03c3\u03b7 : \u03b7 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03b5\u03af \u03ba\u03b1\u03b9 \u03bc\u03b5 ln . \u0391\u03c5\u03c4\u03ae \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03b5\u03c0\u03af\u03c3\u03b7\u03c2 \u03c4\u03bf\u03bd \u03c0\u03c1\u03bf\u03c3\u03b4\u03b9\u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03bf\u03c5 \u03cd\u03c8\u03bf\u03c5\u03c2 \u03c4\u03b7\u03c2 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2. \u0395\u03bd \u03c4\u03ad\u03bb\u03b5\u03b9, \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03bc\u03b1\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ba\u03bb\u03b5\u03b9\u03c3\u03c4\u03cc \u03ba\u03b1\u03b9 \u03ad\u03c7\u03b5\u03b9 \u03b1\u03c0\u03bf\u03b8\u03b7\u03ba\u03b5\u03c5\u03c4\u03b5\u03af \u03c3\u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03b5\u03c7\u03cc\u03bc\u03b5\u03bd\u03b7 \u03b4\u03b9\u03b1\u03b4\u03c1\u03bf\u03bc\u03ae \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ce\u03bd\u03c4\u03b1\u03c2 output . \u0391\u03bd \u03b4\u03b5\u03bd \u03c0\u03b1\u03c1\u03ad\u03c7\u03bf\u03c5\u03bc\u03b5 \u03c0\u03b1\u03c1\u03b1\u03bc\u03ad\u03c4\u03c1\u03bf\u03c5\u03c2, \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 output() \u03b5\u03c0\u03b9\u03c3\u03c4\u03c1\u03ad\u03c6\u03b5\u03b9 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf PDF \u03c3\u03b5 \u03bc\u03bf\u03c1\u03c6\u03ae bytearray .","title":"\u039c\u03ac\u03b8\u03b7\u03bc\u03b1 1 - \u0391\u03c0\u03bb\u03cc \u03a0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1"},{"location":"Tutorial-gr.html#2-","text":"\u03a0\u03b1\u03c1\u03b1\u03ba\u03ac\u03c4\u03c9, \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03bc\u03b5 \u03c4\u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03b5\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1\u03c2, \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bb\u03bf\u03b3\u03cc\u03c4\u03c5\u03c0\u03bf\u03c5: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u03a3\u03c4\u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b3\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03c9\u03bd \u03bc\u03b5\u03b8\u03cc\u03b4\u03c9\u03bd header \u03ba\u03b1\u03b9 footer \u03ad\u03c4\u03c3\u03b9 \u03ce\u03c3\u03c4\u03b5 \u03bd\u03b1 \u03b5\u03c0\u03b5\u03be\u03b5\u03c1\u03b3\u03b1\u03c3\u03c4\u03bf\u03cd\u03bc\u03b5 \u03c4\u03b9\u03c2 \u03b5\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b5\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03b1 \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03b1 \u03c4\u03c9\u03bd \u03c3\u03b5\u03bb\u03af\u03b4\u03c9\u03bd \u03b5\u03bd\u03cc\u03c2 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u0397 \u03ba\u03bb\u03ae\u03c3\u03b7 \u03c4\u03bf\u03c5\u03c2 \u03b3\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1. \u03a5\u03c0\u03ac\u03c1\u03c7\u03bf\u03c5\u03bd \u03ae\u03b4\u03b7 \u03c3\u03c4\u03b7\u03bd \u03ba\u03bb\u03ac\u03c3\u03b7 FPDF \u03b1\u03bb\u03bb\u03ac \u03b4\u03b5\u03bd \u03c0\u03c1\u03bf\u03c3\u03c6\u03ad\u03c1\u03bf\u03c5\u03bd \u03ba\u03b1\u03bc\u03af\u03b1 \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1, \u03b5\u03c0\u03bf\u03bc\u03ad\u03bd\u03c9\u03c2 \u03c7\u03c1\u03b5\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03c0\u03b5\u03ba\u03c4\u03b5\u03af\u03bd\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03ba\u03bb\u03ac\u03c3\u03b7 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c4\u03b9\u03c2 \u03c5\u03c0\u03b5\u03c1\u03ba\u03b1\u03bb\u03cd\u03c8\u03bf\u03c5\u03bc\u03b5. \u03a4\u03bf \u03bb\u03bf\u03b3\u03cc\u03c4\u03c5\u03c0\u03bf \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf image \u03b4\u03b9\u03b5\u03c5\u03ba\u03c1\u03b9\u03bd\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03b7\u03bd \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ae \u03ac\u03bd\u03c9 \u03b3\u03c9\u03bd\u03af\u03b1 \u03ba\u03b1\u03b9 \u03c4\u03bf \u03c0\u03bb\u03ac\u03c4\u03bf\u03c2 \u03c4\u03bf\u03c5. \u03a4\u03bf \u03cd\u03c8\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1 \u03bb\u03b1\u03bc\u03b2\u03ac\u03bd\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c5\u03c0\u03cc\u03c8\u03b7 \u03c4\u03b9\u03c2 \u03b1\u03bd\u03b1\u03bb\u03bf\u03b3\u03af\u03b5\u03c2 \u03c4\u03b7\u03c2 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1\u03c2. \u0393\u03b9\u03b1 \u03bd\u03b1 \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf\u03bd \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2, \u03c7\u03c1\u03b5\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03c0\u03b5\u03c1\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03b7\u03b4\u03b5\u03bd\u03b9\u03ba\u03ae \u03c4\u03b9\u03bc\u03ae \u03c3\u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf \u03c4\u03bf\u03c5 \u03c0\u03bb\u03ac\u03c4\u03bf\u03c5\u03c2 \u03ba\u03b5\u03bb\u03b9\u03bf\u03cd. \u0391\u03c5\u03c4\u03cc \u03c3\u03b7\u03bc\u03b1\u03af\u03bd\u03b5\u03b9 \u03cc\u03c4\u03b9 \u03c4\u03bf \u03ba\u03b5\u03bb\u03af \u03b8\u03b1 \u03b5\u03c0\u03b5\u03ba\u03c4\u03b1\u03b8\u03b5\u03af \u03bc\u03ad\u03c7\u03c1\u03b9 \u03ba\u03b1\u03b9 \u03c4\u03bf \u03b4\u03b5\u03be\u03af \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03bf \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2, \u03c4\u03bf \u03bf\u03c0\u03bf\u03af\u03bf \u03b2\u03bf\u03bb\u03b5\u03cd\u03b5\u03b9 \u03c3\u03c4\u03bf \u03ba\u03b5\u03bd\u03c4\u03c1\u03ac\u03c1\u03b9\u03c3\u03bc\u03b1 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5. \u039f \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 \u03c4\u03b7\u03c2 \u03c4\u03c9\u03c1\u03b9\u03bd\u03ae\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03c0\u03b1\u03c1\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf page_no . \u039f \u03c3\u03c5\u03bd\u03bf\u03bb\u03b9\u03ba\u03cc\u03c2 \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03c9\u03bd \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b4\u03b9\u03b1\u03b8\u03ad\u03c3\u03b9\u03bc\u03bf\u03c2 \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03b5\u03b9\u03b4\u03b9\u03ba\u03ae\u03c2 \u03bc\u03b5\u03c4\u03b1\u03b2\u03bb\u03b7\u03c4\u03ae\u03c2 {nb} , \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03bf\u03c1\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03bf \u03ba\u03bb\u03b5\u03af\u03c3\u03b9\u03bc\u03bf \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u0391\u03c5\u03c4\u03ae \u03b7 \u03b5\u03b9\u03b4\u03b9\u03ba\u03ae \u03c4\u03b9\u03bc\u03ae \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c4\u03c1\u03bf\u03c0\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03b5\u03af \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 alias_nb_pages() . \u0391\u03be\u03af\u03b6\u03b5\u03b9 \u03bd\u03b1 \u03c3\u03b7\u03bc\u03b5\u03b9\u03c9\u03b8\u03b5\u03af \u03cc\u03c4\u03b9 \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 set_y \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03c4\u03bf\u03bd \u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03b7\u03c2 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1\u03c2 \u03b8\u03ad\u03c3\u03b7\u03c2 \u03c3\u03b5 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03c4\u03bf\u03c0\u03bf\u03b8\u03b5\u03c3\u03af\u03b1 \u03c3\u03c4\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1, \u03be\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03ba\u03bf\u03c1\u03c5\u03c6\u03ae \u03ae \u03c4\u03bf \u03c4\u03ad\u03bb\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2. \u0388\u03bd\u03b1 \u03b1\u03ba\u03cc\u03bc\u03b7 \u03b5\u03bd\u03b4\u03b9\u03b1\u03c6\u03ad\u03c1\u03bf\u03bd \u03c7\u03b1\u03c1\u03b1\u03ba\u03c4\u03b7\u03c1\u03b9\u03c3\u03c4\u03b9\u03ba\u03cc \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7: \u03b7 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b7 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2. \u039c\u03cc\u03bb\u03b9\u03c2 \u03ad\u03bd\u03b1 \u03ba\u03b5\u03bb\u03af \u03be\u03b5\u03c0\u03b5\u03c1\u03ac\u03c3\u03b5\u03b9 \u03ad\u03bd\u03b1 \u03c0\u03c1\u03bf\u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf \u03cc\u03c1\u03b9\u03bf \u03c3\u03c4\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1 (2 \u03b5\u03ba\u03b1\u03c4\u03bf\u03c3\u03c4\u03ac \u03b1\u03c0\u03cc \u03c4\u03bf \u03ba\u03ac\u03c4\u03c9 \u03bc\u03ad\u03c1\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03b5\u03be \u03bf\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd), \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac \u03b5\u03c0\u03b1\u03bd\u03b1\u03c6\u03ad\u03c1\u03b5\u03c4\u03b1\u03b9. \u03a0\u03b1\u03c1\u03cc\u03bb\u03bf \u03c0\u03bf\u03c5 \u03b7 \u03b5\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1 \u03ba\u03b1\u03b9 \u03c4\u03bf \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf \u03b5\u03c0\u03b9\u03bb\u03ad\u03b3\u03bf\u03c5\u03bd \u03c4\u03b7\u03bd \u03b4\u03b9\u03ba\u03b9\u03ac \u03c4\u03bf\u03c5\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac ( helvetica ), \u03c4\u03bf \u03ba\u03cd\u03c1\u03b9\u03bf \u03c4\u03bc\u03ae\u03bc\u03b1 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03c3\u03c5\u03bd\u03b5\u03c7\u03af\u03b6\u03b5\u03b9 \u03bc\u03b5 \u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac Times . \u0391\u03c5\u03c4\u03cc\u03c2 \u03bf \u03bc\u03b7\u03c7\u03b1\u03bd\u03b9\u03c3\u03bc\u03cc\u03c2 \u03c4\u03b7\u03c2 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b7\u03c2 \u03b5\u03c0\u03b1\u03bd\u03b1\u03c6\u03bf\u03c1\u03ac\u03c2 \u03b5\u03c6\u03b1\u03c1\u03bc\u03cc\u03b6\u03b5\u03c4\u03b1\u03b9 \u03b5\u03c0\u03b9\u03c0\u03bb\u03ad\u03bf\u03bd \u03c3\u03c4\u03bf \u03c7\u03c1\u03ce\u03bc\u03b1 \u03ba\u03b1\u03b9 \u03c3\u03c4\u03bf \u03c0\u03bb\u03ac\u03c4\u03bf\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2. \u03a4\u03bf \u03cc\u03c1\u03b9\u03bf \u03c0\u03bf\u03c5 \u03c0\u03c1\u03bf\u03ba\u03b1\u03bb\u03b5\u03af \u03c4\u03b7\u03bd \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03bf\u03c1\u03b9\u03c3\u03c4\u03b5\u03af \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 set_auto_page_break .","title":"\u039c\u03ac\u03b8\u03b7\u03bc\u03b1 2 - \u0395\u03c0\u03b9\u03ba\u03b5\u03c6\u03b1\u03bb\u03af\u03b4\u03b1, \u03c5\u03c0\u03bf\u03c3\u03ad\u03bb\u03b9\u03b4\u03bf, \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03ba\u03b1\u03b9 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1"},{"location":"Tutorial-gr.html#3-","text":"\u0391\u03c2 \u03c3\u03c5\u03bd\u03b5\u03c7\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03b5 \u03ad\u03bd\u03b1 \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03c4\u03bf \u03bf\u03c0\u03bf\u03af\u03bf \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03bd\u03b5\u03b9 \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03b9\u03c3\u03bc\u03ad\u03bd\u03b5\u03c2 \u03c0\u03b1\u03c1\u03b1\u03b3\u03c1\u03ac\u03c6\u03bf\u03c5\u03c2. \u0395\u03c0\u03af\u03c3\u03b7\u03c2 \u03b5\u03c0\u03b5\u03be\u03b7\u03b3\u03b5\u03af \u03c4\u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c7\u03c1\u03c9\u03bc\u03ac\u03c4\u03c9\u03bd. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u039a\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03c4\u03bf\u03c5 Jules Verne \u0397 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 get_string_width \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03c4\u03bf\u03bd \u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03bf\u03c5 \u03bc\u03ae\u03ba\u03bf\u03c5\u03c2 \u03bc\u03af\u03b1\u03c2 \u03c3\u03c5\u03bc\u03b2\u03bf\u03bb\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03c3\u03c4\u03b7\u03bd \u03c4\u03c9\u03c1\u03b9\u03bd\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac, \u03c4\u03bf \u03bf\u03c0\u03bf\u03af\u03bf \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7 \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03b3\u03b9\u03b1 \u03c4\u03bf\u03bd \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03bc\u03cc \u03c4\u03b7\u03c2 \u03b8\u03ad\u03c3\u03b7\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03bf\u03c5 \u03c0\u03bb\u03ac\u03c4\u03bf\u03c5\u03c2 \u03c4\u03bf\u03c5 \u03c0\u03bb\u03b1\u03b9\u03c3\u03af\u03bf\u03c5 \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03b2\u03ac\u03bb\u03bb\u03b5\u03b9 \u03c4\u03bf\u03bd \u03c4\u03af\u03c4\u03bb\u03bf. \u0388\u03c0\u03b5\u03b9\u03c4\u03b1 \u03bf\u03c1\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c4\u03b1 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1 (\u03bc\u03ad\u03c3\u03c9 set_draw_color , set_fill_color \u03ba\u03b1\u03b9 set_text_color ) \u03ba\u03b1\u03b9 \u03c4\u03bf \u03c0\u03ac\u03c7\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03bf\u03c1\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03c9\u03c2 1 \u03c7\u03b9\u03bb\u03b9\u03bf\u03c3\u03c4\u03cc\u03bc\u03b5\u03c4\u03c1\u03bf (\u03b1\u03bd\u03c4\u03b9\u03b8\u03ad\u03c4\u03c9\u03c2 \u03c4\u03b7\u03c2 \u03c0\u03c1\u03bf\u03ba\u03b1\u03b8\u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03b7\u03c2 \u03c4\u03b9\u03bc\u03ae\u03c2 0.2) \u03bc\u03ad\u03c3\u03c9 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 set_line_width . \u03a4\u03b5\u03bb\u03b9\u03ba\u03ac, \u03b5\u03ba\u03c4\u03c5\u03c0\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03ba\u03b5\u03bb\u03af (\u03b7 \u03c4\u03b5\u03bb\u03b5\u03c5\u03c4\u03b1\u03af\u03b1 \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf\u03c2 \u03af\u03c3\u03b7 \u03bc\u03b5 true \u03c5\u03c0\u03bf\u03b4\u03b7\u03bb\u03ce\u03bd\u03b5\u03b9 \u03c4\u03b7\u03bd \u03ba\u03ac\u03bb\u03c5\u03c8\u03b7 \u03c4\u03bf\u03c5 \u03c5\u03c0\u03cc\u03b2\u03b1\u03b8\u03c1\u03bf\u03c5). \u0393\u03b9\u03b1 \u03c4\u03b7\u03bd \u03b5\u03ba\u03c4\u03cd\u03c0\u03c9\u03c3\u03b7 \u03c4\u03c9\u03bd \u03c0\u03b1\u03c1\u03b1\u03b3\u03c1\u03ac\u03c6\u03c9\u03bd \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf multi_cell . \u03a4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1. \u039a\u03ac\u03b8\u03b5 \u03c6\u03bf\u03c1\u03ac \u03c0\u03bf\u03c5 \u03bc\u03af\u03b1 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03c6\u03c4\u03ac\u03bd\u03b5\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b1\u03ba\u03c1\u03b1\u03af\u03b1 \u03b4\u03b5\u03be\u03b9\u03ac \u03b8\u03ad\u03c3\u03b7 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03bb\u03b9\u03bf\u03cd \u03ae \u03c3\u03c5\u03bd\u03b1\u03bd\u03c4\u03ac\u03c4\u03b1\u03b9 \u03c7\u03b1\u03c1\u03b1\u03ba\u03c4\u03ae\u03c1\u03b1\u03c2 \u03b5\u03c0\u03b9\u03c3\u03c4\u03c1\u03bf\u03c6\u03ae\u03c2 \u03c6\u03bf\u03c1\u03ad\u03b1 ( \\n ), \u03ba\u03b1\u03bb\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03bd\u03ad\u03bf \u03ba\u03b5\u03bb\u03af \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1 \u03ba\u03ac\u03c4\u03c9 \u03b1\u03c0\u03cc \u03c4\u03bf \u03c4\u03c9\u03c1\u03b9\u03bd\u03cc. \u039c\u03af\u03b1 \u03b1\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b7 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03bf \u03c3\u03b7\u03bc\u03b5\u03af\u03bf \u03bc\u03b5 \u03c4\u03bf \u03c0\u03bb\u03b7\u03c3\u03b9\u03ad\u03c3\u03c4\u03b5\u03c1\u03bf \u03c7\u03b1\u03c1\u03b1\u03ba\u03c4\u03ae\u03c1\u03b1 \u03ba\u03b5\u03bd\u03bf\u03cd \u03ae \u03b5\u03bd\u03c9\u03c4\u03b9\u03ba\u03bf\u03cd \u03c3\u03c5\u03bb\u03bb\u03b1\u03b2\u03ae\u03c2 ( \\u00ad ) \u03c0\u03c1\u03b9\u03bd \u03c4\u03b7\u03bd \u03b1\u03ba\u03c1\u03b1\u03af\u03b1 \u03b4\u03b5\u03be\u03b9\u03ac \u03b8\u03ad\u03c3\u03b7. \u0388\u03bd\u03b1 \u03b5\u03bd\u03c9\u03c4\u03b9\u03ba\u03cc \u03c3\u03c5\u03bb\u03bb\u03b1\u03b2\u03ae\u03c2 \u03b8\u03b1 \u03b1\u03bd\u03c4\u03b9\u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03b1\u03b8\u03b5\u03af \u03b1\u03c0\u03cc \u03ad\u03bd\u03b1 \u03b1\u03c0\u03bb\u03cc \u03b5\u03bd\u03c9\u03c4\u03b9\u03ba\u03cc \u03cc\u03c4\u03b1\u03bd \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2, \u03b1\u03bb\u03bb\u03b9\u03ce\u03c2 \u03b8\u03b1 \u03b1\u03b3\u03bd\u03bf\u03b7\u03b8\u03b5\u03af. \u039f\u03c1\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03b9 \u03b4\u03cd\u03bf \u03b9\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5: \u03bf \u03c4\u03af\u03c4\u03bb\u03bf\u03c2 ( set_title ) \u03ba\u03b1\u03b9 \u03bf \u03c3\u03c5\u03b3\u03b3\u03c1\u03b1\u03c6\u03ad\u03b1\u03c2 ( set_author ). \u039f\u03b9 \u03b9\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bd \u03bd\u03b1 \u03c0\u03c1\u03bf\u03b2\u03bb\u03b7\u03b8\u03bf\u03cd\u03bd \u03bc\u03b5 \u03b4\u03cd\u03bf \u03c4\u03c1\u03cc\u03c0\u03bf\u03c5\u03c2. \u03a0\u03c1\u03ce\u03c4\u03bf\u03bd, \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b1\u03bd\u03bf\u03af\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf \u03b1\u03c0\u03b5\u03c5\u03b8\u03b5\u03af\u03b1\u03c2 \u03bc\u03ad\u03c3\u03c9 Acrobat Reader, \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b5\u03c5\u03b8\u03c5\u03bd\u03b8\u03bf\u03cd\u03bc\u03b5 \u03c3\u03c4\u03bf \u039c\u03b5\u03bd\u03bf\u03cd \u0391\u03c1\u03c7\u03b5\u03af\u03c9\u03bd \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u0399\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u0391\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u0394\u03b5\u03cd\u03c4\u03b5\u03c1\u03bf\u03bd, \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03b1\u03c0\u03b5\u03c5\u03b8\u03b5\u03af\u03b1\u03c2 \u03bd\u03b1 \u03ba\u03ac\u03bd\u03bf\u03c5\u03bc\u03b5 \u03b4\u03b5\u03be\u03af \u03ba\u03bb\u03b9\u03ba \u03c3\u03c4\u03bf \u03b5\u03b9\u03ba\u03bf\u03bd\u03af\u03b4\u03b9\u03bf \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9\u03c2 \u0399\u03b4\u03b9\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 \u0391\u03c1\u03c7\u03b5\u03af\u03bf\u03c5.","title":"\u039c\u03ac\u03b8\u03b7\u03bc\u03b1 3 - \u0391\u03bb\u03bb\u03b1\u03b3\u03ad\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03ba\u03b1\u03b9 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1"},{"location":"Tutorial-gr.html#4-","text":"\u0391\u03c5\u03c4\u03cc \u03c4\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03bc\u03af\u03b1 \u03c0\u03b1\u03c1\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c4\u03bf\u03c5 \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bc\u03b1\u03c2 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03b9 \u03c0\u03c9\u03c2 \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03bd\u03ad\u03bc\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03cc \u03bc\u03b1\u03c2 \u03c3\u03b5 \u03c0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03ad\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b5\u03c2. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF \u039a\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03c4\u03bf\u03c5 Jules Verne \u0397 \u03ba\u03cd\u03c1\u03b9\u03b1 \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03ac \u03b1\u03c0\u03cc \u03c4\u03bf \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03c9\u03bd \u03bc\u03b5\u03b8\u03cc\u03b4\u03c9\u03bd accept_page_break \u03ba\u03b1\u03b9 set_col. \u03a7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf accept_page_break , \u03bc\u03cc\u03bb\u03b9\u03c2 \u03c4\u03bf \u03ba\u03b5\u03bb\u03af \u03be\u03b5\u03c0\u03b5\u03c1\u03ac\u03c3\u03b5\u03b9 \u03c4\u03bf \u03ba\u03ac\u03c4\u03c9 \u03cc\u03c1\u03b9\u03bf \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2, \u03b3\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03ad\u03bb\u03b5\u03b3\u03c7\u03bf\u03c2 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03b9\u03b8\u03bc\u03bf\u03cd \u03c4\u03b7\u03c2 \u03c4\u03c9\u03c1\u03b9\u03bd\u03ae\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2. \u0395\u03ac\u03bd \u03bf \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 \u03b1\u03c5\u03c4\u03cc\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03bc\u03b9\u03ba\u03c1\u03cc\u03c4\u03b5\u03c1\u03bf\u03c2 \u03c4\u03bf\u03c5 2 (\u03b5\u03c0\u03b9\u03bb\u03ad\u03be\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03ba\u03b1\u03c4\u03b1\u03bd\u03bf\u03bc\u03ae \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03c3\u03b5 \u03c4\u03c1\u03b5\u03b9\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b5\u03c2) \u03b8\u03b1 \u03ba\u03bb\u03b7\u03b8\u03b5\u03af \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 set_col, \u03b1\u03c5\u03be\u03ac\u03bd\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf\u03bd \u03b1\u03c1\u03b9\u03b8\u03bc\u03cc \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2 \u03ba\u03b1\u03b9 \u03b1\u03bb\u03bb\u03ac\u03b6\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03b7\u03bd \u03b8\u03ad\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b1\u03bc\u03ad\u03c3\u03c9\u03c2 \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2 \u03ad\u03c4\u03c3\u03b9 \u03ce\u03c3\u03c4\u03b5 \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03bd\u03b1 \u03c3\u03c5\u03bd\u03b5\u03c7\u03b9\u03c3\u03c4\u03b5\u03af \u03b5\u03ba\u03b5\u03af. \u039c\u03cc\u03bb\u03b9\u03c2 \u03c6\u03c4\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c3\u03c4\u03bf \u03c4\u03bf \u03ba\u03ac\u03c4\u03c9 \u03cc\u03c1\u03b9\u03bf \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03c4\u03b7\u03c2 \u03c4\u03c1\u03af\u03c4\u03b7\u03c2 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2, \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 accept_page_break \u03b5\u03c0\u03b1\u03bd\u03b1\u03c6\u03ad\u03c1\u03b5\u03c4\u03b1\u03b9 \u03ba\u03b1\u03b9 \u03bc\u03b5\u03c4\u03b1\u03c6\u03b5\u03c1\u03cc\u03bc\u03b1\u03c3\u03c4\u03b5 \u03be\u03b1\u03bd\u03ac \u03c0\u03af\u03c3\u03c9 \u03c3\u03c4\u03b7\u03bd \u03c0\u03c1\u03ce\u03c4\u03b7 \u03c3\u03c4\u03ae\u03bb\u03b7 \u03cc\u03c0\u03bf\u03c5 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2.","title":"\u039c\u03ac\u03b8\u03b7\u03bc\u03b1 4 - \u03a0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03ad\u03c2 \u03a3\u03c4\u03ae\u03bb\u03b5\u03c2"},{"location":"Tutorial-gr.html#5-","text":"\u03a3\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03bc\u03ac\u03b8\u03b7\u03bc\u03b1 \u03b8\u03b1 \u03b5\u03be\u03b7\u03b3\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c0\u03c9\u03c2 \u03bd\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03bf\u03cd\u03bc\u03b5 \u03b5\u03cd\u03ba\u03bf\u03bb\u03b1 \u03c0\u03af\u03bd\u03b1\u03ba\u03b5\u03c2. \u039f \u03ba\u03ce\u03b4\u03b9\u03ba\u03b1\u03c2 \u03b8\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03b5\u03b9 \u03c4\u03c1\u03b5\u03b9\u03c2 \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03b5\u03c4\u03b9\u03ba\u03bf\u03cd\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b5\u03c2 \u03ad\u03c4\u03c3\u03b9 \u03ce\u03c3\u03c4\u03b5 \u03bd\u03b1 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03b5\u03c0\u03b9\u03c4\u03b5\u03c5\u03c7\u03b8\u03b5\u03af \u03bc\u03b5 \u03bc\u03b5\u03c1\u03b9\u03ba\u03ad\u03c2 \u03b1\u03c0\u03bb\u03ad\u03c2 \u03c0\u03c1\u03bf\u03c3\u03b1\u03c1\u03bc\u03bf\u03b3\u03ad\u03c2. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF - \u039a\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03a7\u03c9\u03c1\u03ce\u03bd \u0395\u03c6\u03cc\u03c3\u03bf\u03bd \u03ad\u03bd\u03b1\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1\u03c2 \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03bc\u03af\u03b1 \u03c3\u03c5\u03bb\u03bb\u03bf\u03b3\u03ae \u03b1\u03c0\u03cc \u03ba\u03b5\u03bb\u03b9\u03ac, \u03b5\u03af\u03bd\u03b1\u03b9 \u03c6\u03c5\u03c3\u03b9\u03ba\u03cc \u03bd\u03b1 \u03c4\u03bf\u03bd \u03ba\u03b1\u03c4\u03b1\u03c3\u03ba\u03b5\u03c5\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b1\u03c0\u03cc \u03b1\u03c5\u03c4\u03ac. \u03a4\u03bf \u03c0\u03c1\u03ce\u03c4\u03bf \u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1 \u03b5\u03c0\u03b9\u03c4\u03c5\u03b3\u03c7\u03ac\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03bf\u03bd \u03c0\u03b9\u03bf \u03b1\u03c0\u03bb\u03cc \u03c4\u03c1\u03cc\u03c0\u03bf: \u03c0\u03bb\u03b1\u03b9\u03c3\u03b9\u03c9\u03bc\u03ad\u03bd\u03b1 \u03ba\u03b5\u03bb\u03b9\u03ac, \u03af\u03b4\u03b9\u03bf\u03c5 \u03bc\u03b5\u03b3\u03ad\u03b8\u03bf\u03c5\u03c2 \u03ba\u03b1\u03b9 \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ac \u03c3\u03c4\u03bf\u03b9\u03c7\u03b9\u03c3\u03bc\u03ad\u03bd\u03b1. \u03a4\u03bf \u03b1\u03c0\u03bf\u03c4\u03ad\u03bb\u03b5\u03c3\u03bc\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c5\u03c0\u03bf\u03c4\u03c5\u03c0\u03ce\u03b4\u03b5\u03c2 \u03b1\u03bb\u03bb\u03ac \u03b1\u03c0\u03bf\u03ba\u03c4\u03ac\u03c4\u03b1\u03b9 \u03b1\u03c1\u03ba\u03b5\u03c4\u03ac \u03b5\u03cd\u03ba\u03bf\u03bb\u03b1. \u039f \u03b4\u03b5\u03cd\u03c4\u03b5\u03c1\u03bf\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1\u03c2 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03b9 \u03bf\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03b5\u03c2 \u03b2\u03b5\u03bb\u03c4\u03b9\u03ce\u03c3\u03b5\u03b9\u03c2: \u03ba\u03ac\u03b8\u03b5 \u03c3\u03c4\u03ae\u03bb\u03b7 \u03ad\u03c7\u03b5\u03b9 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c4\u03b7\u03c2 \u03c0\u03bb\u03ac\u03c4\u03bf\u03c2, \u03bf\u03b9 \u03c4\u03af\u03c4\u03bb\u03bf\u03b9 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ba\u03b5\u03bd\u03c4\u03c1\u03b1\u03c1\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf\u03b9 \u03ba\u03b1\u03b9 \u03bf\u03b9 \u03b1\u03c1\u03b9\u03b8\u03bc\u03bf\u03af \u03b4\u03b5\u03be\u03b9\u03ac \u03c3\u03c4\u03bf\u03b9\u03c7\u03b9\u03c3\u03bc\u03ad\u03bd\u03bf\u03b9. \u0395\u03c0\u03b9\u03c0\u03bb\u03ad\u03bf\u03bd, \u03bf\u03c1\u03b9\u03b6\u03cc\u03bd\u03c4\u03b9\u03b5\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ad\u03c2 \u03ad\u03c7\u03bf\u03c5\u03bd \u03b1\u03c6\u03b1\u03b9\u03c1\u03b5\u03b8\u03b5\u03af. \u0391\u03c5\u03c4\u03cc \u03b5\u03c0\u03b9\u03c4\u03c5\u03b3\u03c7\u03ac\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf border \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 Cell(), \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03bf\u03c1\u03af\u03b6\u03b5\u03b9 \u03c0\u03bf\u03b9\u03b5\u03c2 \u03c0\u03bb\u03b5\u03c5\u03c1\u03ad\u03c2 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03bb\u03b9\u03bf\u03cd \u03c7\u03c1\u03b5\u03b9\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03c7\u03b5\u03b4\u03b9\u03b1\u03c3\u03c4\u03bf\u03cd\u03bd. \u03a3\u03c4\u03b7 \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03b7 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03b8\u03ad\u03bb\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b9\u03c2 \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03ad\u03c2 (L) \u03ba\u03b1\u03b9 \u03c4\u03b9\u03c2 \u03b4\u03b5\u03be\u03b9\u03ad\u03c2 (R). \u03a4\u03ce\u03c1\u03b1 \u03b1\u03c0\u03bf\u03bc\u03ad\u03bd\u03b5\u03b9 \u03bc\u03cc\u03bd\u03bf \u03c4\u03bf \u03c0\u03c1\u03cc\u03b2\u03bb\u03b7\u03bc\u03b1 \u03c4\u03c9\u03bd \u03bf\u03c1\u03b9\u03b6\u03cc\u03bd\u03c4\u03b9\u03c9\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ce\u03bd. \u039c\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03c4\u03bf \u03bb\u03cd\u03c3\u03bf\u03c5\u03bc\u03b5 \u03bc\u03b5 \u03b4\u03cd\u03bf \u03c4\u03c1\u03cc\u03c0\u03bf\u03c5\u03c2: \u03bd\u03b1 \u03b5\u03bb\u03ad\u03b3\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03c4\u03b5\u03bb\u03b5\u03c5\u03c4\u03b1\u03af\u03b1 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03c3\u03c4\u03bf \u03b2\u03c1\u03cc\u03c7\u03bf \u03b5\u03c0\u03b1\u03bd\u03b1\u03bb\u03ae\u03c8\u03b5\u03c9\u03bd, \u03bf\u03c0\u03cc\u03c4\u03b5 \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 LRB \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03ac\u03bc\u03b5\u03c4\u03c1\u03bf border \u03ae, \u03cc\u03c0\u03c9\u03c2 \u03c0\u03c1\u03ac\u03be\u03b1\u03bc\u03b5 \u03b5\u03b4\u03ce, \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03cc\u03c4\u03b1\u03bd \u03c4\u03b5\u03bb\u03b5\u03b9\u03ce\u03c3\u03b5\u03b9 \u03bf \u03b2\u03c1\u03cc\u03c7\u03bf\u03c2 \u03b5\u03c0\u03b1\u03bd\u03b1\u03bb\u03ae\u03c8\u03b5\u03c9\u03bd. \u039f \u03c4\u03c1\u03af\u03c4\u03bf\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c0\u03b1\u03c1\u03cc\u03bc\u03bf\u03b9\u03bf\u03c2 \u03bc\u03b5 \u03c4\u03bf\u03bd \u03b4\u03b5\u03cd\u03c4\u03b5\u03c1\u03bf \u03b1\u03bb\u03bb\u03ac \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1. \u03a4\u03b1 \u03c7\u03c1\u03ce\u03bc\u03b1\u03c4\u03b1 \u03c4\u03bf\u03c5 \u03b3\u03b5\u03bc\u03af\u03c3\u03bc\u03b1\u03c4\u03bf\u03c2, \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ce\u03bd \u03bf\u03c1\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03b9 \u03be\u03b5\u03c7\u03c9\u03c1\u03b9\u03c3\u03c4\u03ac. \u039f \u03b5\u03bd\u03b1\u03bb\u03bb\u03b1\u03c3\u03c3\u03cc\u03bc\u03b5\u03bd\u03bf\u03c2 \u03c7\u03c1\u03c9\u03bc\u03b1\u03c4\u03b9\u03c3\u03bc\u03cc\u03c2 \u03c4\u03c9\u03bd \u03b3\u03c1\u03b1\u03bc\u03bc\u03ce\u03bd \u03c4\u03bf\u03c5 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1 \u03b5\u03c0\u03b9\u03c4\u03c5\u03b3\u03c7\u03ac\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03c4\u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03b4\u03b9\u03b1\u03c6\u03b1\u03bd\u03ce\u03bd \u03ba\u03b1\u03b9 \u03b3\u03b5\u03bc\u03b9\u03c3\u03bc\u03ad\u03bd\u03c9\u03bd \u03ba\u03b5\u03bb\u03b9\u03ce\u03bd.","title":"\u039c\u03ac\u03b8\u03b7\u03bc\u03b1 5 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03a0\u03b9\u03bd\u03ac\u03ba\u03c9\u03bd"},{"location":"Tutorial-gr.html#6-","text":"\u03a3\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03bc\u03ac\u03b8\u03b7\u03bc\u03b1 \u03b8\u03b1 \u03b5\u03be\u03b7\u03b3\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c0\u03bf\u03bb\u03bb\u03b1\u03c0\u03bb\u03bf\u03cd\u03c2 \u03c4\u03c1\u03cc\u03c0\u03bf\u03c5\u03c2 \u03b5\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae\u03c2 \u03b5\u03c3\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03ce\u03bd \u03b1\u03bb\u03bb\u03b1 \u03ba\u03b1\u03b9 \u03b5\u03be\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03ce\u03bd \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03c3\u03b5 \u03ad\u03bd\u03b1 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf pdf. \u0398\u03b1 \u03b1\u03bd\u03b1\u03bb\u03cd\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b5\u03c0\u03af\u03c3\u03b7\u03c2 \u03c0\u03c9\u03c2 \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b4\u03b9\u03ac\u03c6\u03bf\u03c1\u03b1 \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 (\u03ad\u03bd\u03c4\u03bf\u03bd\u03b7 \u03b3\u03c1\u03b1\u03c6\u03ae, \u03c0\u03bb\u03ac\u03b3\u03b9\u03b1 \u03b3\u03c1\u03b1\u03c6\u03ae, \u03c5\u03c0\u03bf\u03b3\u03c1\u03ac\u03bc\u03bc\u03b9\u03c3\u03b7) \u03b5\u03bd\u03c4\u03cc\u03c2 \u03c4\u03bf\u03c5 \u03af\u03b4\u03b9\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) \u03a0\u03b1\u03c1\u03b1\u03b3\u03cc\u03bc\u03b5\u03bd\u03bf PDF - fpdf2-logo \u03a0\u03b1\u03c1\u03b1\u03c4\u03b7\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bc\u03af\u03b1 \u03bd\u03ad\u03b1 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03b5\u03ba\u03c4\u03cd\u03c0\u03c9\u03c3\u03b7 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5, \u03c4\u03b7\u03bd write() . \u0397 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03b1\u03c5\u03c4\u03ae, \u03b8\u03c5\u03bc\u03af\u03b6\u03b5\u03b9 \u03b1\u03c1\u03ba\u03b5\u03c4\u03ac \u03c4\u03b7\u03bd multi_cell() , \u03c0\u03b1\u03c1\u03cc\u03bb\u03b1 \u03b1\u03c5\u03c4\u03ac \u03b5\u03bc\u03c6\u03b1\u03bd\u03af\u03b6\u03b5\u03b9 \u03c4\u03b9\u03c2 \u03b5\u03be\u03ae\u03c2 \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03ad\u03c2: \u03a4\u03bf \u03c4\u03ad\u03bb\u03bf\u03c2 \u03c4\u03b7\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03b2\u03c1\u03af\u03c3\u03ba\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03bf \u03b4\u03b5\u03be\u03af \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03bf \u03ba\u03b1\u03b9 \u03b7 \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u03be\u03b5\u03ba\u03b9\u03bd\u03ac\u03b5\u03b9 \u03c3\u03c4\u03bf \u03b1\u03c1\u03b9\u03c3\u03c4\u03b5\u03c1\u03cc \u03c0\u03b5\u03c1\u03b9\u03b8\u03ce\u03c1\u03b9\u03bf. \u0397 \u03c4\u03c1\u03ad\u03c7\u03bf\u03c5\u03c3\u03b1 \u03b8\u03ad\u03c3\u03b7 \u03bc\u03b5\u03c4\u03b1\u03ba\u03b9\u03bd\u03b5\u03af\u03c4\u03b1\u03b9 \u03c3\u03c4\u03bf \u03c4\u03ad\u03bb\u03bf\u03c2 \u03c4\u03bf\u03c5 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5. \u0391\u03c5\u03c4\u03ae \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2, \u03b5\u03c0\u03bf\u03bc\u03ad\u03bd\u03c9\u03c2 \u03bc\u03b1\u03c2 \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03bd\u03b1 \u03b3\u03c1\u03ac\u03c8\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1 \u03ba\u03bf\u03bc\u03bc\u03ac\u03c4\u03b9 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5, \u03bd\u03b1 \u03b1\u03bb\u03bb\u03ac\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac, \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03c5\u03bd\u03b5\u03c7\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03b1\u03ba\u03c1\u03b9\u03b2\u03ce\u03c2 \u03c3\u03c4\u03bf \u03c3\u03b7\u03bc\u03b5\u03af\u03bf \u03c0\u03bf\u03c5 \u03b5\u03af\u03c7\u03b1\u03bc\u03b5 \u03b1\u03c0\u03bf\u03bc\u03b5\u03af\u03bd\u03b5\u03b9. \u0391\u03c0\u03cc \u03c4\u03b7\u03bd \u03ac\u03bb\u03bb\u03b7 \u03c0\u03bb\u03b5\u03c5\u03c1\u03ac, \u03c4\u03bf \u03b2\u03b1\u03c3\u03b9\u03ba\u03cc \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b9\u03bf\u03bd\u03ad\u03ba\u03c4\u03b7\u03bc\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03cc\u03c4\u03b9 \u03b4\u03b5\u03bd \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03c5\u03b8\u03c5\u03b3\u03c1\u03b1\u03bc\u03bc\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf \u03cc\u03c0\u03c9\u03c2 \u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf multi_cell() . \u03a3\u03c4\u03b7\u03bd \u03c0\u03c1\u03ce\u03c4\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1 \u03c4\u03bf\u03c5 \u03c0\u03b1\u03c1\u03b1\u03b4\u03b5\u03af\u03b3\u03bc\u03b1\u03c4\u03bf\u03c2 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf write() \u03b3\u03b9\u03b1 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03c3\u03ba\u03bf\u03c0\u03cc. \u03a4\u03bf \u03c0\u03c1\u03ce\u03c4\u03bf \u03ba\u03bf\u03bc\u03bc\u03ac\u03c4\u03b9 \u03c4\u03b7\u03c2 \u03c0\u03c1\u03cc\u03c4\u03b1\u03c3\u03b7\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ad\u03bd\u03bf \u03c9\u03c2 \u03b1\u03c0\u03bb\u03cc \u03ba\u03b5\u03af\u03bc\u03b5\u03bd\u03bf, \u03b5\u03bd\u03ce \u03c3\u03c4\u03b7 \u03c3\u03c5\u03bd\u03ad\u03c7\u03b5\u03b9\u03b1, \u03b1\u03c6\u03bf\u03cd \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf set_font() , \u03b1\u03bb\u03bb\u03ac\u03be\u03b1\u03bc\u03b5 \u03c4\u03bf \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03c3\u03b5 \u03c5\u03c0\u03bf\u03b3\u03c1\u03ac\u03bc\u03bc\u03b9\u03c3\u03b7 \u03ba\u03b1\u03b9 \u03ba\u03bb\u03b5\u03af\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03c0\u03c1\u03cc\u03c4\u03b1\u03c3\u03b7. \u0393\u03b9\u03b1 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1\u03bd \u03b5\u03c3\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf \u03bf \u03bf\u03c0\u03bf\u03af\u03bf\u03c2 \u03b8\u03b1 \u03ba\u03b1\u03c4\u03b5\u03c5\u03b8\u03cd\u03bd\u03b5\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1, \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf add_link() , \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03b5\u03af \u03bc\u03af\u03b1 \u03b5\u03c0\u03b9\u03c6\u03b1\u03bd\u03b5\u03af\u03b1 \u03bc\u03b5 \u03cc\u03bd\u03bf\u03bc\u03b1 \"link\". \u0391\u03bd \u03ba\u03bb\u03b9\u03ba\u03ac\u03c1\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03b5\u03c0\u03b9\u03c6\u03ac\u03bd\u03b5\u03b9\u03b1 \u03b1\u03c5\u03c4\u03ae \u03bc\u03b5\u03c4\u03b1\u03c6\u03b5\u03c1\u03cc\u03bc\u03b1\u03c3\u03c4\u03b5 \u03c3\u03b5 \u03bc\u03af\u03b1 \u03ac\u03bb\u03bb\u03b7 \u03c4\u03bf\u03c0\u03bf\u03b8\u03b5\u03c3\u03af\u03b1 \u03c4\u03bf\u03c5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf\u03c5. \u03a3\u03c4\u03b7\u03bd \u03b4\u03b5\u03cd\u03c4\u03b5\u03c1\u03b7 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b1\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf set_link() \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03bf\u03c1\u03af\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf\u03bd \u03c0\u03c1\u03bf\u03bf\u03c1\u03b9\u03c3\u03bc\u03cc \u03c4\u03bf\u03c5 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03bf\u03c5 \u03c0\u03bf\u03c5 \u03bc\u03cc\u03bb\u03b9\u03c2 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03b1\u03bc\u03b5. \u0393\u03b9\u03b1 \u03bd\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1\u03bd \u03b5\u03be\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf \u03bc\u03ad\u03c3\u03c9 \u03bc\u03b9\u03b1\u03c2 \u03b5\u03b9\u03ba\u03cc\u03bd\u03b1\u03c2, \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c4\u03b7\u03bd \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf image() . \u0391\u03c5\u03c4\u03ae \u03b7 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03bc\u03b1\u03c2 \u03b4\u03af\u03bd\u03b5\u03b9 \u03c4\u03b7\u03bd \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03bd\u03b1 \u03c0\u03b5\u03c1\u03ac\u03c3\u03bf\u03c5\u03bc\u03b5 \u03ad\u03bd\u03b1\u03bd \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf \u03c9\u03c2 \u03c4\u03b9\u03bc\u03ae \u03c3\u03b5 \u03bc\u03af\u03b1 \u03b1\u03c0\u03cc \u03c4\u03b9\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bc\u03ad\u03c4\u03c1\u03bf\u03c5\u03c2 \u03c4\u03b7\u03c2. \u039f \u03c3\u03cd\u03bd\u03b4\u03b5\u03c3\u03bc\u03bf\u03c2 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03c3\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc\u03c2 \u03ae \u03b5\u03be\u03c9\u03c4\u03b5\u03c1\u03b9\u03ba\u03cc\u03c2. \u0395\u03bd\u03b1\u03bb\u03bb\u03b1\u03ba\u03c4\u03b9\u03ba\u03ac, \u03bc\u03af\u03b1 \u03b1\u03ba\u03cc\u03bc\u03b7 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03b1\u03bb\u03bb\u03ac\u03be\u03bf\u03c5\u03bc\u03b5 \u03c4\u03bf \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03b8\u03ad\u03c3\u03bf\u03c5\u03bc\u03b5 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03bf\u03c5\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b7 \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03bc\u03b5\u03b8\u03cc\u03b4\u03bf\u03c5 write_html() . \u0397 \u03bc\u03ad\u03b8\u03bf\u03b4\u03bf\u03c2 \u03b1\u03c5\u03c4\u03ae, \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03b5\u03af \u03ad\u03bd\u03b1\u03bd \u03b1\u03bd\u03b1\u03bb\u03c5\u03c4\u03ae html \u03bf \u03bf\u03c0\u03bf\u03af\u03bf\u03c2 \u03b5\u03c0\u03b9\u03c4\u03c1\u03ad\u03c0\u03b5\u03b9 \u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5, \u03c4\u03b7\u03bd \u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03bf\u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03bc\u03b5 \u03c4\u03b7\u03bd \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 html.","title":"\u039c\u03ac\u03b8\u03b7\u03bc\u03b1 6 - \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03c3\u03c5\u03bd\u03b4\u03ad\u03c3\u03bc\u03c9\u03bd \u03ba\u03b1\u03b9 \u03bc\u03af\u03be\u03b7 \u03c3\u03c4\u03c5\u03bb \u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03bf\u03c5"},{"location":"Tutorial-it.html","text":"Tutorial Documentazione completa dei metodi: fpdf.FPDF API doc Tutorial Tuto 1 - Esempio base Tuto 2 - Intestazione, pi\u00e8 di pagina, interruzione di pagina ed immagini Tuto 3 - Interruzioni di riga e colori Tuto 4 - Colonne multiple Tuto 5 - Creare tabelle Tuto 6 - Creare link e mescolare stili di testo Tuto 1 - Esempio base Iniziamo con un esempio comune: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Risultato PDF Dopo aver incluso la libreria, creiamo un oggetto FPDF . Cos\u00ec facendo il costruttore FPDF viene utilizzato con i suoi valori di default: le pagine sono in A4 verticale e l'unit\u00e0 di misura \u00e8 millimetri. Avremmo potuto specificarle esplicitamente facendo: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u00c8 possibile impostare il PDF in modalit\u00e0 orizzontale ( L ) o utilizzare altri formati (come Letter e Legal ) e unit\u00e0 di misura ( pt , cm , in ). Non esiste una pagina al momento, quindi dobbiamo aggiungerne una con add_page . L'origine \u00e8 in alto a sinistra e la posizione corrente \u00e8 a 1cm dai bordi; i margini possono essere cambiati con set_margins . Prima di poter stampare del testo, \u00e8 obbligatorio selezionare un font con set_font , altrimenti il documento risulterebbe non valido. Scegliamo Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) Avremmo potuto scegliere il corsivo con I , sottolineato con U o un font regolare lasciando la stringa vuota (o ogni combinazione). Notare che la dimensione dei caratteri \u00e8 specificata in punti, non millimetri (o altre unit\u00e0 di misura); questa \u00e8 l'unica eccezione. Gli altri font disponibili sono Times , Courier , Symbol and ZapfDingbats . Adesso possiamo disegnare una cella con cell . Una cella \u00e8 un'area rettangolare, in caso con bordo, che contiene del testo. \u00c8 disegnata nella attuale posizione. Specifichiamo le sue dimensioni, il suo testo (centrato o allineato), se i bordi devono essere mostrati, e dove verr\u00e0 spostata la posizione quando avremo finito (a destra, sotto, o all'inizio della riga successiva). Faremmo cos\u00ec: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Per aggiungere una nuova cella di fianco alla precedente con testo centrato e poi spostarci alla riga successiva, faremmo: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) NB : si pu\u00f2 andare a capo anche con ln . Questo metodo permette di specificare l'altezza dello spazio. In fine, il documento \u00e8 chiuso e salvato nella destinazione fornita attraverso output . Senza alcun parametro, output() ritorna il PDF in un buffer bytearray . Tuto 2 - Intestazione, pi\u00e8 di pagina, interruzione di pagina ed immagini Ecco un esempio composto da due pagine con intestazione, pi\u00e8 di pagina e logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Risultato PDF Questo esempio sfrutta i metodi header e footer per processare intestazioni e pi\u00e8 di pagina. Vengono chiamati automaticamente. Esistono nella classe FPDF ma non eseguono operazioni, quindi \u00e8 necessario estendere la classe e sovrascriverli. Il logo \u00e8 stampato con il metodo image specificando la posizione del suo angolo in alto a sinistra e la sua larghezza. L'altezza \u00e8 calcolata automaticamente per rispettare le proporzioni dell'immagine. Per stampare il numero della pagina, un valore nullo pu\u00f2 essere passato come larghezza della cella. Significa che la cella \"crescer\u00e0\" fino al margine destro della pagina; \u00e8 utile per centrare il testo. Il numero di pagina \u00e8 ritornato da page_no ; mentre per il numero totale di pagine, si ottiene attraverso il valore speciale {nb} che verr\u00e0 sostituito quando le pagine saranno generate. Importante menzionare il metodo set_y che permette di selezionare una posizione assoluta all'interno della pagina, incominciando dall'alto o dal basso. Un'altra feature interessante: l'interruzione di pagina automatica. Non appena una cella dovesse superare il limite nella pagina (a 2 centimetri dal fondo di default), ci sarebbe un'interruzione e un reset del font. Nonostante l'intestazione e il pi\u00e8 di pagina scelgano il proprio font ( helvetica ), il contenuto continua in Times . Questo meccanismo di reset automatico si applica anche ai colori e allo spessore della linea. Il limite pu\u00f2 essere scelto con set_auto_page_break . Tuto 3 - Interruzioni di riga e colori Continuiamo con un esempio che stampa paragrafi giustificati. Mostreremo anche l'utilizzo dei colori. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Risultato PDF Testo Jules Verne Il metodo get_string_width permette di determinare la lunghezza di una stringa nel font selezionato, e viene utilizzato per calcolare la posizione e la larghezza della cornice intorno al titolo. Successivamente selezioniamo i colori (utilizzando set_draw_color , set_fill_color e set_text_color ) e aumentiamo la larghezza della linea a 1mm (invece dei 0.2 di default) con set_line_width . In fine, stampiamo la cella (l'ultimo parametro a true indica che lo sfondo dovr\u00e0 essere riempito). Il metodo utilizzato per stampare i paragrafi \u00e8 multi_cell . Ogni volta che una linea raggiunge l'estremit\u00e0 destra della cella o c'\u00e8 un carattere carriage return, avremo un'interruzione di linea e una nuova cella verr\u00e0 automaticamente creata. Il testo \u00e8 giustificato di default. Due propriet\u00e0 del documento vengono definite: il titolo ( set_title ) e l'autore ( set_author ). Le propriet\u00e0 possono essere controllate in due modi. Il primo \u00e8 aprire direttamente il documento con Acrobat Reader, cliccare sul men\u00f9 File e scegliere l'opzione Propriet\u00e0 del documento. la seconda, \u00e8 di cliccare con il tasto destro e scegliere Propriet\u00e0 del documento. Tuto 4 - Colonne multiple Questo esempio \u00e8 una variante del precedente, mostra come disporre il test attraverso colonne multiple. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Risultato PDF Testo Jules Verne La differenza dal precedente tutoria \u00e8 l'utilizzo dei metodi accept_page_break e set_col. Usando accept_page_break , una volta che la cella oltrepasser\u00e0 il limite basso della pagina, il numero della colonna corrente verr\u00e0 controllato. Se sar\u00e0 meno di 2 (abbiamo deciso di dividere la pagina in 3 colonne) chiamer\u00e0 il metodo set_cal, incrementando il numero della colonna e modificando la posizione della prossima colonna in modo e il testo continui l\u00ec. Una volta che il limite inferiore della terza colonna sar\u00e0 raggiunto, accept_page_break resetter\u00e0 e andr\u00e0 alla prima colonna provocando una interruzione di pagina. Tuto 5 - Creare tabelle Questo tutoria spiegher\u00e0 come creare facilmente tabelle. Creeremo tre diverse tabelle per spiegare cosa si pu\u00f2 ottenere con piccolo cambiamenti. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Risultato PDF - Testo delle nazioni Dato che una tabella \u00e8 un insieme di celle, viene natura crearne una partendo da loro. Il primo esempio \u00e8 la via pi\u00f9 elementare: semplici celle con cornice, tutte della stessa dimensione e allineate a sinistra. Il risultato \u00e8 rudimentale ma molto veloce da ottenere. La seconda tabella contiene dei miglioramenti: ogni colonna ha la propria larghezza, i titoli sono centrati e i numeri allineati a destra. Inoltre, le linee orizzontale sono state rimosse. Questo \u00e8 stato possibile grazie al parametro border del metodo Cell(), che specifica quali lati della cella saranno disegnati. In questo caso vogliamo il sinistro (L) e il destro (R). Rimane il problema delle linee orizzontali. Ci sono due possibilit\u00e0 per risolverlo: controllare di essere nell'ultimo giro del ciclo, nel qual caso utilizziamo LRB per il parametro border; oppure, come fatto in questo esempio, aggiungiamo una linea dopo il completamento del ciclo. La terza tabella \u00e8 molto simile alla seconda, ma utilizza i colori. Il colore di sfondo, testo e linee sono semplicemente specificati. L'alternanza dei colori delle righe \u00e8 ottenuta utilizzando celle con sfondo colorato e trasparente alternativamente. Tuto 6 - Creare link e mescolare stili di testo Questo tutorial spiegher\u00e0 molti modi di inserire link interni al pdf, e come inserirne a sorgenti esterne. Saranno mostrati anche molti modi di utilizzare diversi stili di testo (grassetto, corsivo e sottolineato) nello stesso testo. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Risultato PDF - fpdf2-logo Il nuovo metodo qui utilizzato per stampare testo \u00e8 write() . \u00c8 molto simile a multi_cell() , ma con delle differenze: La fine della linea \u00e8 al margine destro e la linea successiva inizia al margine sinistro. La posizione attuale si sposta alla fine del testo stampato. Il metodo quindi ci permette di scrivere un blocco di testo, cambiare lo stile del testo, e continuare a scrivere esattamente da dove eravamo rimasti. D'altro canto, il suo peggior svantaggio \u00e8 che non possiamo giustificare il testo come con multi_cell() method. Nella prima pagina dell'esempio, abbiamo usato write() per questo scopo. L'inizio della frase \u00e8 scritta in font normale, poi utilizzando set_font() siamo passati al sottolineato e abbiamo finito la frase. Per aggiungere un link interno che puntasse alla seconda pagina, abbiamo utilizzato add_link() che crea un area cliccabile che abbiamo chiamato \"link\" che redirige ad un altro punto del documento. Nella seconda pagina abbiamo usato set_link() per definire un'area di destinazione per il link creato in precedenza. Per creare un link esterno utilizzando un'immagine, abbiamo usato image() . Il metodo ha l'opzione di passare un link come argomento. Il link pu\u00f2 essere sia interno che esterno. In alternativa, un'altra opzione per cambiare lo stile e aggiungere link \u00e8 di utilizzare write_html() . \u00c8 un parser hrml che permette di aggiungere testo, cambiare stile e aggiungere link utilizzando html.","title":"Tutorial in italiano"},{"location":"Tutorial-it.html#tutorial","text":"Documentazione completa dei metodi: fpdf.FPDF API doc Tutorial Tuto 1 - Esempio base Tuto 2 - Intestazione, pi\u00e8 di pagina, interruzione di pagina ed immagini Tuto 3 - Interruzioni di riga e colori Tuto 4 - Colonne multiple Tuto 5 - Creare tabelle Tuto 6 - Creare link e mescolare stili di testo","title":"Tutorial"},{"location":"Tutorial-it.html#tuto-1-esempio-base","text":"Iniziamo con un esempio comune: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Risultato PDF Dopo aver incluso la libreria, creiamo un oggetto FPDF . Cos\u00ec facendo il costruttore FPDF viene utilizzato con i suoi valori di default: le pagine sono in A4 verticale e l'unit\u00e0 di misura \u00e8 millimetri. Avremmo potuto specificarle esplicitamente facendo: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u00c8 possibile impostare il PDF in modalit\u00e0 orizzontale ( L ) o utilizzare altri formati (come Letter e Legal ) e unit\u00e0 di misura ( pt , cm , in ). Non esiste una pagina al momento, quindi dobbiamo aggiungerne una con add_page . L'origine \u00e8 in alto a sinistra e la posizione corrente \u00e8 a 1cm dai bordi; i margini possono essere cambiati con set_margins . Prima di poter stampare del testo, \u00e8 obbligatorio selezionare un font con set_font , altrimenti il documento risulterebbe non valido. Scegliamo Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) Avremmo potuto scegliere il corsivo con I , sottolineato con U o un font regolare lasciando la stringa vuota (o ogni combinazione). Notare che la dimensione dei caratteri \u00e8 specificata in punti, non millimetri (o altre unit\u00e0 di misura); questa \u00e8 l'unica eccezione. Gli altri font disponibili sono Times , Courier , Symbol and ZapfDingbats . Adesso possiamo disegnare una cella con cell . Una cella \u00e8 un'area rettangolare, in caso con bordo, che contiene del testo. \u00c8 disegnata nella attuale posizione. Specifichiamo le sue dimensioni, il suo testo (centrato o allineato), se i bordi devono essere mostrati, e dove verr\u00e0 spostata la posizione quando avremo finito (a destra, sotto, o all'inizio della riga successiva). Faremmo cos\u00ec: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Per aggiungere una nuova cella di fianco alla precedente con testo centrato e poi spostarci alla riga successiva, faremmo: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) NB : si pu\u00f2 andare a capo anche con ln . Questo metodo permette di specificare l'altezza dello spazio. In fine, il documento \u00e8 chiuso e salvato nella destinazione fornita attraverso output . Senza alcun parametro, output() ritorna il PDF in un buffer bytearray .","title":"Tuto 1 - Esempio base"},{"location":"Tutorial-it.html#tuto-2-intestazione-pie-di-pagina-interruzione-di-pagina-ed-immagini","text":"Ecco un esempio composto da due pagine con intestazione, pi\u00e8 di pagina e logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Risultato PDF Questo esempio sfrutta i metodi header e footer per processare intestazioni e pi\u00e8 di pagina. Vengono chiamati automaticamente. Esistono nella classe FPDF ma non eseguono operazioni, quindi \u00e8 necessario estendere la classe e sovrascriverli. Il logo \u00e8 stampato con il metodo image specificando la posizione del suo angolo in alto a sinistra e la sua larghezza. L'altezza \u00e8 calcolata automaticamente per rispettare le proporzioni dell'immagine. Per stampare il numero della pagina, un valore nullo pu\u00f2 essere passato come larghezza della cella. Significa che la cella \"crescer\u00e0\" fino al margine destro della pagina; \u00e8 utile per centrare il testo. Il numero di pagina \u00e8 ritornato da page_no ; mentre per il numero totale di pagine, si ottiene attraverso il valore speciale {nb} che verr\u00e0 sostituito quando le pagine saranno generate. Importante menzionare il metodo set_y che permette di selezionare una posizione assoluta all'interno della pagina, incominciando dall'alto o dal basso. Un'altra feature interessante: l'interruzione di pagina automatica. Non appena una cella dovesse superare il limite nella pagina (a 2 centimetri dal fondo di default), ci sarebbe un'interruzione e un reset del font. Nonostante l'intestazione e il pi\u00e8 di pagina scelgano il proprio font ( helvetica ), il contenuto continua in Times . Questo meccanismo di reset automatico si applica anche ai colori e allo spessore della linea. Il limite pu\u00f2 essere scelto con set_auto_page_break .","title":"Tuto 2 - Intestazione, pi\u00e8 di pagina, interruzione di pagina ed immagini"},{"location":"Tutorial-it.html#tuto-3-interruzioni-di-riga-e-colori","text":"Continuiamo con un esempio che stampa paragrafi giustificati. Mostreremo anche l'utilizzo dei colori. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Risultato PDF Testo Jules Verne Il metodo get_string_width permette di determinare la lunghezza di una stringa nel font selezionato, e viene utilizzato per calcolare la posizione e la larghezza della cornice intorno al titolo. Successivamente selezioniamo i colori (utilizzando set_draw_color , set_fill_color e set_text_color ) e aumentiamo la larghezza della linea a 1mm (invece dei 0.2 di default) con set_line_width . In fine, stampiamo la cella (l'ultimo parametro a true indica che lo sfondo dovr\u00e0 essere riempito). Il metodo utilizzato per stampare i paragrafi \u00e8 multi_cell . Ogni volta che una linea raggiunge l'estremit\u00e0 destra della cella o c'\u00e8 un carattere carriage return, avremo un'interruzione di linea e una nuova cella verr\u00e0 automaticamente creata. Il testo \u00e8 giustificato di default. Due propriet\u00e0 del documento vengono definite: il titolo ( set_title ) e l'autore ( set_author ). Le propriet\u00e0 possono essere controllate in due modi. Il primo \u00e8 aprire direttamente il documento con Acrobat Reader, cliccare sul men\u00f9 File e scegliere l'opzione Propriet\u00e0 del documento. la seconda, \u00e8 di cliccare con il tasto destro e scegliere Propriet\u00e0 del documento.","title":"Tuto 3 - Interruzioni di riga e colori"},{"location":"Tutorial-it.html#tuto-4-colonne-multiple","text":"Questo esempio \u00e8 una variante del precedente, mostra come disporre il test attraverso colonne multiple. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Risultato PDF Testo Jules Verne La differenza dal precedente tutoria \u00e8 l'utilizzo dei metodi accept_page_break e set_col. Usando accept_page_break , una volta che la cella oltrepasser\u00e0 il limite basso della pagina, il numero della colonna corrente verr\u00e0 controllato. Se sar\u00e0 meno di 2 (abbiamo deciso di dividere la pagina in 3 colonne) chiamer\u00e0 il metodo set_cal, incrementando il numero della colonna e modificando la posizione della prossima colonna in modo e il testo continui l\u00ec. Una volta che il limite inferiore della terza colonna sar\u00e0 raggiunto, accept_page_break resetter\u00e0 e andr\u00e0 alla prima colonna provocando una interruzione di pagina.","title":"Tuto 4 - Colonne multiple"},{"location":"Tutorial-it.html#tuto-5-creare-tabelle","text":"Questo tutoria spiegher\u00e0 come creare facilmente tabelle. Creeremo tre diverse tabelle per spiegare cosa si pu\u00f2 ottenere con piccolo cambiamenti. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Risultato PDF - Testo delle nazioni Dato che una tabella \u00e8 un insieme di celle, viene natura crearne una partendo da loro. Il primo esempio \u00e8 la via pi\u00f9 elementare: semplici celle con cornice, tutte della stessa dimensione e allineate a sinistra. Il risultato \u00e8 rudimentale ma molto veloce da ottenere. La seconda tabella contiene dei miglioramenti: ogni colonna ha la propria larghezza, i titoli sono centrati e i numeri allineati a destra. Inoltre, le linee orizzontale sono state rimosse. Questo \u00e8 stato possibile grazie al parametro border del metodo Cell(), che specifica quali lati della cella saranno disegnati. In questo caso vogliamo il sinistro (L) e il destro (R). Rimane il problema delle linee orizzontali. Ci sono due possibilit\u00e0 per risolverlo: controllare di essere nell'ultimo giro del ciclo, nel qual caso utilizziamo LRB per il parametro border; oppure, come fatto in questo esempio, aggiungiamo una linea dopo il completamento del ciclo. La terza tabella \u00e8 molto simile alla seconda, ma utilizza i colori. Il colore di sfondo, testo e linee sono semplicemente specificati. L'alternanza dei colori delle righe \u00e8 ottenuta utilizzando celle con sfondo colorato e trasparente alternativamente.","title":"Tuto 5 - Creare tabelle"},{"location":"Tutorial-it.html#tuto-6-creare-link-e-mescolare-stili-di-testo","text":"Questo tutorial spiegher\u00e0 molti modi di inserire link interni al pdf, e come inserirne a sorgenti esterne. Saranno mostrati anche molti modi di utilizzare diversi stili di testo (grassetto, corsivo e sottolineato) nello stesso testo. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Risultato PDF - fpdf2-logo Il nuovo metodo qui utilizzato per stampare testo \u00e8 write() . \u00c8 molto simile a multi_cell() , ma con delle differenze: La fine della linea \u00e8 al margine destro e la linea successiva inizia al margine sinistro. La posizione attuale si sposta alla fine del testo stampato. Il metodo quindi ci permette di scrivere un blocco di testo, cambiare lo stile del testo, e continuare a scrivere esattamente da dove eravamo rimasti. D'altro canto, il suo peggior svantaggio \u00e8 che non possiamo giustificare il testo come con multi_cell() method. Nella prima pagina dell'esempio, abbiamo usato write() per questo scopo. L'inizio della frase \u00e8 scritta in font normale, poi utilizzando set_font() siamo passati al sottolineato e abbiamo finito la frase. Per aggiungere un link interno che puntasse alla seconda pagina, abbiamo utilizzato add_link() che crea un area cliccabile che abbiamo chiamato \"link\" che redirige ad un altro punto del documento. Nella seconda pagina abbiamo usato set_link() per definire un'area di destinazione per il link creato in precedenza. Per creare un link esterno utilizzando un'immagine, abbiamo usato image() . Il metodo ha l'opzione di passare un link come argomento. Il link pu\u00f2 essere sia interno che esterno. In alternativa, un'altra opzione per cambiare lo stile e aggiungere link \u00e8 di utilizzare write_html() . \u00c8 un parser hrml che permette di aggiungere testo, cambiare stile e aggiungere link utilizzando html.","title":"Tuto 6 - Creare link e mescolare stili di testo"},{"location":"Tutorial-pt.html","text":"Tutorial Methods full documentation: fpdf.FPDF API doc Tutorial Tuto 1 - Exemplo M\u00ednimo Tuto 2 - Cabe\u00e7alho, rodap\u00e9, quebra de p\u00e1gina e imagem Tuto 3 - Quebras de linha e cores Tuto 4 - Multi Colunas Tuto 5 - Criar Tabelas Tuto 6 - Criar links e misturar estilos de texto Tuto 1 - Exemplo M\u00ednimo Vamos come\u00e7ar com um exemplo cl\u00e1ssico: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) PDF resultante Ap\u00f3s incluirmos o ficheiro da biblioteca, criamos um objeto FPDF . O FPDF construtor \u00e9 constru\u00eddo com os seguintes par\u00e2metros por omiss\u00e3o: P\u00e1ginas s\u00e3o em formato A4 vertical e a unidade de medida \u00e9 o mil\u00edmetro. Pode ser especificado explicitamente atrav\u00e9s de: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u00c9 poss\u00edvel colocar o PDF em modo horizontal ( L ) ou em outros formatos de p\u00e1gina (como Letter e Legal ) e em outras unidades de medida ( pt , cm , in ). Neste momento, n\u00e3o h\u00e1 nenhuma p\u00e1gina, ent\u00e3o temos que adicionar uma com add_page . A origem est\u00e1 no canto superior esquerdo e a posi\u00e7\u00e3o atual \u00e9, por padr\u00e3o, colocada a 1 cm das bordas; as margens podem ser alteradas com set_margins . Antes de imprimirmos o texto, \u00e9 obrigat\u00f3rio selecionar uma fonte com set_font , caso contr\u00e1rio, o documento ser\u00e1 inv\u00e1lido. N\u00f3s escolhemos Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) Podemos formatar em it\u00e1lico com I , sublinhar com U ou uma fonte normal com uma string vazia (ou qualquer combina\u00e7\u00e3o). Observe que o tamanho da fonte \u00e9 fornecido em pontos, n\u00e3o mil\u00edmetros (ou outra unidade do utilizador); esta \u00e9 a \u00fanica exce\u00e7\u00e3o. As outras fontes integradas s\u00e3o Times , Courier , Symbol e ZapfDingbats . Agora podemos imprimir uma c\u00e9lula com cell . Uma c\u00e9lula \u00e9 uma \u00e1rea retangular, possivelmente emoldurada, que cont\u00e9m algum texto. \u00c9 renderizado na posi\u00e7\u00e3o atual. N\u00f3s especificamos as suas dimens\u00f5es, o seu texto (centrado ou alinhado), se as bordas devem ser desenhadas, e para onde a posi\u00e7\u00e3o atual se deve mover depois desta altera\u00e7\u00e3o (para a direita, abaixo ou no in\u00edcio da pr\u00f3xima linha). Para adicionar uma moldura, temos de fazer o seguinte: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Para adicionar uma nova c\u00e9lula ao lado desta, com texto centralizado e ir para a pr\u00f3xima linha, ter\u00edamos de fazer: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Nota : a quebra de linha tamb\u00e9m pode ser feita com ln . Esse m\u00e9todo permite especificar, adicionalmente, a altura da quebra. Finalmente, o documento \u00e9 fechado e guardado no caminho do arquivo fornecido utilizando output . Sem termos qualquer par\u00e2metro fornecido, output () retorna o buffer PDF bytearray . Tuto 2 - Cabe\u00e7alho, rodap\u00e9, quebra de p\u00e1gina e imagem Aqui temos um exemplo de duas p\u00e1ginas com cabe\u00e7alho, rodap\u00e9 e log\u00f3tipo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) PDF resultante Este exemplo usa os header e o footer para processar cabe\u00e7alhos e rodap\u00e9s de p\u00e1gina. Estes s\u00e3o chamados automaticamente. Eles j\u00e1 existem na classe FPDF, mas n\u00e3o fazem nada, portanto, temos que os estender a classe e substitu\u00ed-los. O log\u00f3tipo \u00e9 impresso utilizando o m\u00e9todo image , especificando o seu canto superior esquerdo e sua largura. A altura \u00e9 calculada automaticamente para respeitar as propor\u00e7\u00f5es da imagem. Para imprimir o n\u00famero da p\u00e1gina, um valor nulo \u00e9 passado como a largura da c\u00e9lula. Isso significa que a c\u00e9lula deve se estender at\u00e9 a margem direita da p\u00e1gina; \u00e9 \u00fatil para centralizar texto. O n\u00famero da p\u00e1gina atual \u00e9 retornado pelo m\u00e9todo page_no ; quanto ao n\u00famero total de p\u00e1ginas, \u00e9 obtido por meio do valor especial {nb} que ser\u00e1 substitu\u00eddo quando se fecha o documento. Observe que o uso do m\u00e9todo set_y permite definir a posi\u00e7\u00e3o em um local absoluto da p\u00e1gina, come\u00e7ando do in\u00edcio ou do fim. Outro recurso interessante que se usa aqui \u00e9 a quebra de p\u00e1gina autom\u00e1tica. Desde do momento em que uma c\u00e9lula cruza o limite da p\u00e1gina (a 2 cent\u00edmetros da parte inferior por padr\u00e3o), uma pausa \u00e9 executada e a fonte restaurada. Embora o cabe\u00e7alho e rodap\u00e9s selecionam a sua pr\u00f3pria fonte ( helvetica ), o corpo continua com Times . Este mecanismo de restaura\u00e7\u00e3o autom\u00e1tica tamb\u00e9m se aplica a cores e largura de linha. O limite que dispara quebras de p\u00e1gina pode ser definido com set_auto_page_break . Tuto 3 - Quebras de linha e cores Vamos continuar com um exemplo que imprime par\u00e1grafos justificados e o uso de cores. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) PDF resultante Texto de J\u00falio Verne O m\u00e9todo get_string_width permite determinar o comprimento de uma string na fonte atual, e que \u00e9 usada aqui para calcular a posi\u00e7\u00e3o e a largura do quadro ao redor do t\u00edtulo. Em seguida, as cores s\u00e3o definidas (via set_draw_color , set_fill_color e set_text_color ) e a espessura da linha \u00e9 definida como 1 mm (contra 0,2 por padr\u00e3o) com set_line_width . Finalmente, produzimos a c\u00e9lula (se o \u00faltimo par\u00e2metro for verdadeiro, indica que o plano de fundo deve ser preenchido). O m\u00e9todo usado para imprimir os par\u00e1grafos \u00e9 multi_cell . Cada vez que uma linha atinge a extremidade direita da c\u00e9lula ou um c\u00f3digo de fim de linha \u00e9 encontrado, uma quebra de linha \u00e9 emitida e uma nova c\u00e9lula \u00e9 criada automaticamente sob a atual. O texto \u00e9 justificado por padr\u00e3o. Duas propriedades do documento s\u00e3o definidas: o t\u00edtulo ( set_title ) e o autor ( set_author ). As propriedades podem ser visualizadas de duas maneiras: A primeira \u00e9 abrir o documento diretamente com o Acrobat Reader, v\u00e1 para o menu Arquivo e escolha a op\u00e7\u00e3o Propriedades do documento. O segundo, tamb\u00e9m dispon\u00edvel no plug-in, \u00e9 clicar com o bot\u00e3o direito e selecionar Propriedades do documento. Tuto 4 - Multi Colunas Este exemplo \u00e9 uma variante do anterior, mostrando como colocar o texto em v\u00e1rias colunas. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) PDF resultante Texto de J\u00falio Verne A principal diferen\u00e7a em rela\u00e7\u00e3o ao tutorial anterior \u00e9 o uso do accept_page_break e os m\u00e9todos set_col. Usando o m\u00e9todo accept_page_break , quando a c\u00e9lula ultrapassar o limite inferior da p\u00e1gina, ela verificar\u00e1 o n\u00famero da coluna atual. Se isso for menor que 2 (optamos por dividir a p\u00e1gina em tr\u00eas colunas), chamando o m\u00e9todo set_col, aumentando o n\u00famero da coluna e alterando a posi\u00e7\u00e3o da pr\u00f3xima coluna para que o texto continue a\u00ed. Quando o limite inferior da terceira coluna \u00e9 alcan\u00e7ado, o m\u00e9todo accept_page_break ser\u00e1 redefinido e vai voltar para a primeira coluna e adicionar uma quebra de p\u00e1gina. Tuto 5 - Criar Tabelas Este tutorial ir\u00e1 explicar como criar tabelas facilmente. O c\u00f3digo seguinte cria tr\u00eas tabelas diferentes para explicar o que pode ser alcan\u00e7ado com alguns ajustes simples. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) PDF resultante - Texto dos pa\u00edses Uma vez que uma tabela \u00e9 apenas uma cole\u00e7\u00e3o de c\u00e9lulas, \u00e9 natural construir uma a partir delas. O primeiro exemplo \u00e9 obtido da maneira mais b\u00e1sica poss\u00edvel: moldura simples c\u00e9lulas, todas do mesmo tamanho e alinhadas \u00e0 esquerda. O resultado \u00e9 rudimentar, mas muito r\u00e1pido de obter. A segunda tabela traz algumas melhorias: cada coluna tem sua largura pr\u00f3pria, os t\u00edtulos est\u00e3o centrados e as figuras alinhadas \u00e0 direita. Al\u00e9m disso, as linhas horizontais foram removidas. Isto \u00e9 feito por meio do par\u00e2metro border do m\u00e9todo Cell(), que especifica quais lados da c\u00e9lula devem ser desenhados. Aqui n\u00f3s queremos os esquerdo (L) e direito (R). Agora apenas o problema da linha horizontal para terminar a mesa permanece. Existem duas possibilidades para resolv\u00ea-lo: verificar para a \u00faltima linha do loop, caso este em que usamos LRB para o par\u00e2metro da borda; ou, como foi feito aqui, adicione a linha assim que o loop terminar. A terceira tabela \u00e9 semelhante \u00e0 segunda, mas usa cores. Preenchimento, texto e as cores das linhas s\u00e3o simplesmente especificadas. Colora\u00e7\u00e3o alternativa para linhas \u00e9 obtida usando c\u00e9lulas alternativamente transparentes e preenchidas. Tuto 6 - Criar links e misturar estilos de texto Este tutorial ir\u00e1 explicar v\u00e1rias maneiras de inserir links dentro de um documento PDF, bem como adicionar links para fontes externas. Tamb\u00e9m mostrar\u00e1 v\u00e1rias maneiras de usar diferentes estilos de texto, (negrito, it\u00e1lico, sublinhado) no mesmo texto. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) PDF resultante - fpdf2-logo O novo m\u00e9todo mostrado aqui para imprimir texto \u00e9 write() . \u00c9 muito parecido com multi_cell () , sendo as principais diferen\u00e7as: O fim da linha est\u00e1 na margem direita e a pr\u00f3xima linha come\u00e7a na margem esquerda. A posi\u00e7\u00e3o atual move-se para o final do texto. O m\u00e9todo, portanto, nos permite escrever um peda\u00e7o de texto, alterar o estilo da fonte, e continuar do ponto exato em que paramos. Por outro lado, a sua principal desvantagem \u00e9 que n\u00e3o podemos justificar o texto como n\u00f3s fazemos com o m\u00e9todo [multi_cell()(https://pyfpdf.github.io/fpdf2/fpdf/fpdf.html#fpdf.fpdf.FPDF.multi_cell) . Na primeira p\u00e1gina do exemplo, us\u00e1mos write() para este prop\u00f3sito. O in\u00edcio da frase est\u00e1 escrita no estilo de texto normal, depois usando o m\u00e9todo set_font() , trocamos para sublinhado e acab\u00e1mos a frase. Para adicionar o link externo a apontar para a segunda p\u00e1gina, n\u00f3s us\u00e1mos o m\u00e9todo add_link() , que cria uma \u00e1rea clic\u00e1vel \u00e0 qual demos o nome de \u201clink\u201d que direciona para outra parte do documento. Na segunda p\u00e1gina, us\u00e1mos set_link() para definir uma \u00e1rea de destino para o link que acab\u00e1mos de criar. Para criar o link externo usando uma imagem, us\u00e1mos image() . O m\u00e9todo tem a op\u00e7\u00e3o de passar um link como um dos seus argumentos. O link pode ser interno ou externo. Como alternativa, outra op\u00e7\u00e3o para mudar o estilo da fonte e adicionar links \u00e9 usar o m\u00e9todo write_html() . \u00c9 um \u201cparser\u201d que permite adicionar texto, mudar o estilo da fonte e adicionar links usando html.","title":"Tutorial em portugu\u00eas"},{"location":"Tutorial-pt.html#tutorial","text":"Methods full documentation: fpdf.FPDF API doc Tutorial Tuto 1 - Exemplo M\u00ednimo Tuto 2 - Cabe\u00e7alho, rodap\u00e9, quebra de p\u00e1gina e imagem Tuto 3 - Quebras de linha e cores Tuto 4 - Multi Colunas Tuto 5 - Criar Tabelas Tuto 6 - Criar links e misturar estilos de texto","title":"Tutorial"},{"location":"Tutorial-pt.html#tuto-1-exemplo-minimo","text":"Vamos come\u00e7ar com um exemplo cl\u00e1ssico: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) PDF resultante Ap\u00f3s incluirmos o ficheiro da biblioteca, criamos um objeto FPDF . O FPDF construtor \u00e9 constru\u00eddo com os seguintes par\u00e2metros por omiss\u00e3o: P\u00e1ginas s\u00e3o em formato A4 vertical e a unidade de medida \u00e9 o mil\u00edmetro. Pode ser especificado explicitamente atrav\u00e9s de: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u00c9 poss\u00edvel colocar o PDF em modo horizontal ( L ) ou em outros formatos de p\u00e1gina (como Letter e Legal ) e em outras unidades de medida ( pt , cm , in ). Neste momento, n\u00e3o h\u00e1 nenhuma p\u00e1gina, ent\u00e3o temos que adicionar uma com add_page . A origem est\u00e1 no canto superior esquerdo e a posi\u00e7\u00e3o atual \u00e9, por padr\u00e3o, colocada a 1 cm das bordas; as margens podem ser alteradas com set_margins . Antes de imprimirmos o texto, \u00e9 obrigat\u00f3rio selecionar uma fonte com set_font , caso contr\u00e1rio, o documento ser\u00e1 inv\u00e1lido. N\u00f3s escolhemos Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) Podemos formatar em it\u00e1lico com I , sublinhar com U ou uma fonte normal com uma string vazia (ou qualquer combina\u00e7\u00e3o). Observe que o tamanho da fonte \u00e9 fornecido em pontos, n\u00e3o mil\u00edmetros (ou outra unidade do utilizador); esta \u00e9 a \u00fanica exce\u00e7\u00e3o. As outras fontes integradas s\u00e3o Times , Courier , Symbol e ZapfDingbats . Agora podemos imprimir uma c\u00e9lula com cell . Uma c\u00e9lula \u00e9 uma \u00e1rea retangular, possivelmente emoldurada, que cont\u00e9m algum texto. \u00c9 renderizado na posi\u00e7\u00e3o atual. N\u00f3s especificamos as suas dimens\u00f5es, o seu texto (centrado ou alinhado), se as bordas devem ser desenhadas, e para onde a posi\u00e7\u00e3o atual se deve mover depois desta altera\u00e7\u00e3o (para a direita, abaixo ou no in\u00edcio da pr\u00f3xima linha). Para adicionar uma moldura, temos de fazer o seguinte: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) Para adicionar uma nova c\u00e9lula ao lado desta, com texto centralizado e ir para a pr\u00f3xima linha, ter\u00edamos de fazer: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Nota : a quebra de linha tamb\u00e9m pode ser feita com ln . Esse m\u00e9todo permite especificar, adicionalmente, a altura da quebra. Finalmente, o documento \u00e9 fechado e guardado no caminho do arquivo fornecido utilizando output . Sem termos qualquer par\u00e2metro fornecido, output () retorna o buffer PDF bytearray .","title":"Tuto 1 - Exemplo M\u00ednimo"},{"location":"Tutorial-pt.html#tuto-2-cabecalho-rodape-quebra-de-pagina-e-imagem","text":"Aqui temos um exemplo de duas p\u00e1ginas com cabe\u00e7alho, rodap\u00e9 e log\u00f3tipo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) PDF resultante Este exemplo usa os header e o footer para processar cabe\u00e7alhos e rodap\u00e9s de p\u00e1gina. Estes s\u00e3o chamados automaticamente. Eles j\u00e1 existem na classe FPDF, mas n\u00e3o fazem nada, portanto, temos que os estender a classe e substitu\u00ed-los. O log\u00f3tipo \u00e9 impresso utilizando o m\u00e9todo image , especificando o seu canto superior esquerdo e sua largura. A altura \u00e9 calculada automaticamente para respeitar as propor\u00e7\u00f5es da imagem. Para imprimir o n\u00famero da p\u00e1gina, um valor nulo \u00e9 passado como a largura da c\u00e9lula. Isso significa que a c\u00e9lula deve se estender at\u00e9 a margem direita da p\u00e1gina; \u00e9 \u00fatil para centralizar texto. O n\u00famero da p\u00e1gina atual \u00e9 retornado pelo m\u00e9todo page_no ; quanto ao n\u00famero total de p\u00e1ginas, \u00e9 obtido por meio do valor especial {nb} que ser\u00e1 substitu\u00eddo quando se fecha o documento. Observe que o uso do m\u00e9todo set_y permite definir a posi\u00e7\u00e3o em um local absoluto da p\u00e1gina, come\u00e7ando do in\u00edcio ou do fim. Outro recurso interessante que se usa aqui \u00e9 a quebra de p\u00e1gina autom\u00e1tica. Desde do momento em que uma c\u00e9lula cruza o limite da p\u00e1gina (a 2 cent\u00edmetros da parte inferior por padr\u00e3o), uma pausa \u00e9 executada e a fonte restaurada. Embora o cabe\u00e7alho e rodap\u00e9s selecionam a sua pr\u00f3pria fonte ( helvetica ), o corpo continua com Times . Este mecanismo de restaura\u00e7\u00e3o autom\u00e1tica tamb\u00e9m se aplica a cores e largura de linha. O limite que dispara quebras de p\u00e1gina pode ser definido com set_auto_page_break .","title":"Tuto 2 - Cabe\u00e7alho, rodap\u00e9, quebra de p\u00e1gina e imagem"},{"location":"Tutorial-pt.html#tuto-3-quebras-de-linha-e-cores","text":"Vamos continuar com um exemplo que imprime par\u00e1grafos justificados e o uso de cores. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) PDF resultante Texto de J\u00falio Verne O m\u00e9todo get_string_width permite determinar o comprimento de uma string na fonte atual, e que \u00e9 usada aqui para calcular a posi\u00e7\u00e3o e a largura do quadro ao redor do t\u00edtulo. Em seguida, as cores s\u00e3o definidas (via set_draw_color , set_fill_color e set_text_color ) e a espessura da linha \u00e9 definida como 1 mm (contra 0,2 por padr\u00e3o) com set_line_width . Finalmente, produzimos a c\u00e9lula (se o \u00faltimo par\u00e2metro for verdadeiro, indica que o plano de fundo deve ser preenchido). O m\u00e9todo usado para imprimir os par\u00e1grafos \u00e9 multi_cell . Cada vez que uma linha atinge a extremidade direita da c\u00e9lula ou um c\u00f3digo de fim de linha \u00e9 encontrado, uma quebra de linha \u00e9 emitida e uma nova c\u00e9lula \u00e9 criada automaticamente sob a atual. O texto \u00e9 justificado por padr\u00e3o. Duas propriedades do documento s\u00e3o definidas: o t\u00edtulo ( set_title ) e o autor ( set_author ). As propriedades podem ser visualizadas de duas maneiras: A primeira \u00e9 abrir o documento diretamente com o Acrobat Reader, v\u00e1 para o menu Arquivo e escolha a op\u00e7\u00e3o Propriedades do documento. O segundo, tamb\u00e9m dispon\u00edvel no plug-in, \u00e9 clicar com o bot\u00e3o direito e selecionar Propriedades do documento.","title":"Tuto 3 - Quebras de linha e cores"},{"location":"Tutorial-pt.html#tuto-4-multi-colunas","text":"Este exemplo \u00e9 uma variante do anterior, mostrando como colocar o texto em v\u00e1rias colunas. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) PDF resultante Texto de J\u00falio Verne A principal diferen\u00e7a em rela\u00e7\u00e3o ao tutorial anterior \u00e9 o uso do accept_page_break e os m\u00e9todos set_col. Usando o m\u00e9todo accept_page_break , quando a c\u00e9lula ultrapassar o limite inferior da p\u00e1gina, ela verificar\u00e1 o n\u00famero da coluna atual. Se isso for menor que 2 (optamos por dividir a p\u00e1gina em tr\u00eas colunas), chamando o m\u00e9todo set_col, aumentando o n\u00famero da coluna e alterando a posi\u00e7\u00e3o da pr\u00f3xima coluna para que o texto continue a\u00ed. Quando o limite inferior da terceira coluna \u00e9 alcan\u00e7ado, o m\u00e9todo accept_page_break ser\u00e1 redefinido e vai voltar para a primeira coluna e adicionar uma quebra de p\u00e1gina.","title":"Tuto 4 - Multi Colunas"},{"location":"Tutorial-pt.html#tuto-5-criar-tabelas","text":"Este tutorial ir\u00e1 explicar como criar tabelas facilmente. O c\u00f3digo seguinte cria tr\u00eas tabelas diferentes para explicar o que pode ser alcan\u00e7ado com alguns ajustes simples. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) PDF resultante - Texto dos pa\u00edses Uma vez que uma tabela \u00e9 apenas uma cole\u00e7\u00e3o de c\u00e9lulas, \u00e9 natural construir uma a partir delas. O primeiro exemplo \u00e9 obtido da maneira mais b\u00e1sica poss\u00edvel: moldura simples c\u00e9lulas, todas do mesmo tamanho e alinhadas \u00e0 esquerda. O resultado \u00e9 rudimentar, mas muito r\u00e1pido de obter. A segunda tabela traz algumas melhorias: cada coluna tem sua largura pr\u00f3pria, os t\u00edtulos est\u00e3o centrados e as figuras alinhadas \u00e0 direita. Al\u00e9m disso, as linhas horizontais foram removidas. Isto \u00e9 feito por meio do par\u00e2metro border do m\u00e9todo Cell(), que especifica quais lados da c\u00e9lula devem ser desenhados. Aqui n\u00f3s queremos os esquerdo (L) e direito (R). Agora apenas o problema da linha horizontal para terminar a mesa permanece. Existem duas possibilidades para resolv\u00ea-lo: verificar para a \u00faltima linha do loop, caso este em que usamos LRB para o par\u00e2metro da borda; ou, como foi feito aqui, adicione a linha assim que o loop terminar. A terceira tabela \u00e9 semelhante \u00e0 segunda, mas usa cores. Preenchimento, texto e as cores das linhas s\u00e3o simplesmente especificadas. Colora\u00e7\u00e3o alternativa para linhas \u00e9 obtida usando c\u00e9lulas alternativamente transparentes e preenchidas.","title":"Tuto 5 - Criar Tabelas"},{"location":"Tutorial-pt.html#tuto-6-criar-links-e-misturar-estilos-de-texto","text":"Este tutorial ir\u00e1 explicar v\u00e1rias maneiras de inserir links dentro de um documento PDF, bem como adicionar links para fontes externas. Tamb\u00e9m mostrar\u00e1 v\u00e1rias maneiras de usar diferentes estilos de texto, (negrito, it\u00e1lico, sublinhado) no mesmo texto. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) PDF resultante - fpdf2-logo O novo m\u00e9todo mostrado aqui para imprimir texto \u00e9 write() . \u00c9 muito parecido com multi_cell () , sendo as principais diferen\u00e7as: O fim da linha est\u00e1 na margem direita e a pr\u00f3xima linha come\u00e7a na margem esquerda. A posi\u00e7\u00e3o atual move-se para o final do texto. O m\u00e9todo, portanto, nos permite escrever um peda\u00e7o de texto, alterar o estilo da fonte, e continuar do ponto exato em que paramos. Por outro lado, a sua principal desvantagem \u00e9 que n\u00e3o podemos justificar o texto como n\u00f3s fazemos com o m\u00e9todo [multi_cell()(https://pyfpdf.github.io/fpdf2/fpdf/fpdf.html#fpdf.fpdf.FPDF.multi_cell) . Na primeira p\u00e1gina do exemplo, us\u00e1mos write() para este prop\u00f3sito. O in\u00edcio da frase est\u00e1 escrita no estilo de texto normal, depois usando o m\u00e9todo set_font() , trocamos para sublinhado e acab\u00e1mos a frase. Para adicionar o link externo a apontar para a segunda p\u00e1gina, n\u00f3s us\u00e1mos o m\u00e9todo add_link() , que cria uma \u00e1rea clic\u00e1vel \u00e0 qual demos o nome de \u201clink\u201d que direciona para outra parte do documento. Na segunda p\u00e1gina, us\u00e1mos set_link() para definir uma \u00e1rea de destino para o link que acab\u00e1mos de criar. Para criar o link externo usando uma imagem, us\u00e1mos image() . O m\u00e9todo tem a op\u00e7\u00e3o de passar um link como um dos seus argumentos. O link pode ser interno ou externo. Como alternativa, outra op\u00e7\u00e3o para mudar o estilo da fonte e adicionar links \u00e9 usar o m\u00e9todo write_html() . \u00c9 um \u201cparser\u201d que permite adicionar texto, mudar o estilo da fonte e adicionar links usando html.","title":"Tuto 6 - Criar links e misturar estilos de texto"},{"location":"Tutorial-ru.html","text":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u041f\u043e\u043b\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u043a\u043b\u0430\u0441\u0441\u0430 FPDF : fpdf.FPDF API doc \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 1 - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 2 - \u0412\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 3 - \u041f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0441\u0442\u0440\u043e\u043a \u0438 \u0446\u0432\u0435\u0442\u0430 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 4 - \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0420\u0443\u043a\u043e\u0432\u0434\u0441\u0442\u0432\u043e 5 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 6 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0438\u043b\u0435\u0439 \u0442\u0435\u043a\u0441\u0442\u0430 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 1 - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 FPDF . \u0417\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 FPDF \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0444\u043e\u0440\u043c\u0430\u0442\u0430 A4 \u043f\u043e\u0440\u0442\u0440\u0435\u0442\u043d\u044b\u0435, \u0435\u0434\u0438\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f - \u043c\u0438\u043b\u043b\u0438\u043c\u0435\u0442\u0440. pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u041c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c PDF \u0432 \u0430\u043b\u044c\u0431\u043e\u043c\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 ( L ) \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Letter \u0438\u043b\u0438 Legal ) \u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f ( pt , cm , in ). \u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b add_page . \u041d\u0430\u0447\u0430\u043b\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043b\u0435\u0432\u043e\u043c \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0443\u0433\u043b\u0443, \u0430 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 1 \u0441\u043c \u043e\u0442 \u0433\u0440\u0430\u043d\u0438\u0446; \u043f\u043e\u043b\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b set_margins . \u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0448\u0440\u0438\u0444\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e set_font , \u0438\u043d\u0430\u0447\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c. \u041c\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u0443\u0440\u0441\u0438\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e I , \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u043d\u0443\u0442\u044b\u0439 \u0448\u0440\u0438\u0444\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e U \u0438\u043b\u0438 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0448\u0440\u0438\u0444\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 (\u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e). \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0440\u0430\u0437\u043c\u0435\u0440 \u0448\u0440\u0438\u0444\u0442\u0430 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0443\u043d\u043a\u0442\u0430\u0445, \u0430 \u043d\u0435 \u0432 \u043c\u0438\u043b\u043b\u0438\u043c\u0435\u0442\u0440\u0430\u0445 (\u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439); \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. \u0414\u0440\u0443\u0433\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0448\u0440\u0438\u0444\u0442\u044b: Times , Courier , Symbol \u0438 ZapfDingbats . \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u044f\u0447\u0435\u0439\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e cell . \u042f\u0447\u0435\u0439\u043a\u0430 - \u044d\u0442\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043e\u0431\u0440\u0430\u043c\u043b\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u043c\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0435\u043a\u0441\u0442. \u041e\u043d\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u041c\u044b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b, \u0442\u0435\u043a\u0441\u0442 (\u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u043b\u0438 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0439), \u0434\u043e\u043b\u0436\u043d\u044b \u043b\u0438 \u0431\u044b\u0442\u044c \u043d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u043d\u044b \u0440\u0430\u043c\u043a\u0438, \u0438 \u043a\u0443\u0434\u0430 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0435 (\u0432\u043f\u0440\u0430\u0432\u043e, \u0432\u043d\u0438\u0437 \u0438\u043b\u0438 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438). \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u043c\u043a\u0443, \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u044f\u0447\u0435\u0439\u043a\u0443 \u0441 \u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 : \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ln . \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u044b\u0441\u043e\u0442\u0443 \u0440\u0430\u0437\u0440\u044b\u0432\u0430. \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 output . \u0411\u0435\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 output() \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u0443\u0444\u0435\u0440 PDF bytearray . \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 2 - \u0412\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0432\u0435\u0440\u0445\u043d\u0438\u043c \u0438 \u043d\u0438\u0436\u043d\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b\u0430\u043c\u0438 \u0438 \u043b\u043e\u0433\u043e\u0442\u0438\u043f\u043e\u043c: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u044b header \u0438 footer \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b\u043e\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041e\u043d\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. \u041e\u043d\u0438 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 FPDF, \u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u044e\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445. \u041b\u043e\u0433\u043e\u0442\u0438\u043f \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c image \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0435\u0433\u043e \u043b\u0435\u0432\u043e\u0433\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430 \u0438 \u0448\u0438\u0440\u0438\u043d\u044b. \u0412\u044b\u0441\u043e\u0442\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0431\u043b\u044e\u0441\u0442\u0438 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u043f\u0435\u0447\u0430\u0442\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0448\u0438\u0440\u0438\u043d\u044b \u044f\u0447\u0435\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u044f\u0447\u0435\u0439\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0438\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b; \u044d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430. \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c page_no ; \u0447\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0442\u043e \u043e\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f {nb} , \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u0440\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 set_y , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u0432\u0435\u0440\u0445\u0443 \u0438\u043b\u0438 \u0441\u043d\u0438\u0437\u0443. \u0417\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0435\u0449\u0435 \u043e\u0434\u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f: \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u044f\u0447\u0435\u0439\u043a\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442 \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 2 \u0441\u0430\u043d\u0442\u0438\u043c\u0435\u0442\u0440\u0430 \u043e\u0442 \u043d\u0438\u0437\u0430), \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0430\u0437\u0440\u044b\u0432 \u0438 \u0448\u0440\u0438\u0444\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f. \u0425\u043e\u0442\u044f \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u0438 \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u044e\u0442 \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0448\u0440\u0438\u0444\u0442 ( helvetica ), \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Times . \u042d\u0442\u043e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u0446\u0432\u0435\u0442\u0430\u043c \u0438 \u0448\u0438\u0440\u0438\u043d\u0435 \u043b\u0438\u043d\u0438\u0439. \u041f\u0440\u0435\u0434\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e set_auto_page_break . \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 3 - \u041f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0441\u0442\u0440\u043e\u043a \u0438 \u0446\u0432\u0435\u0442\u0430 \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0435 \u0430\u0431\u0437\u0430\u0446\u044b. \u041e\u043d \u0442\u0430\u043a\u0436\u0435 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u043e\u0432. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u0422\u0435\u043a\u0441\u0442 \u0416\u044e\u043b\u044f \u0412\u0435\u0440\u043d\u0430 \u041c\u0435\u0442\u043e\u0434 get_string_width \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u043b\u0438\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0448\u0440\u0438\u0444\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0448\u0438\u0440\u0438\u043d\u044b \u0440\u0430\u043c\u043a\u0438, \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a. \u0417\u0430\u0442\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0446\u0432\u0435\u0442\u0430 (\u0447\u0435\u0440\u0435\u0437 set_draw_color , set_fill_color \u0438 set_text_color ), \u0430 \u0442\u043e\u043b\u0449\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 1 \u043c\u043c (\u043f\u0440\u043e\u0442\u0438\u0432 0,2 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e set_line_width . \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u043c\u044b \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u044f\u0447\u0435\u0439\u043a\u0443 (\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 True \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0444\u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d). \u0414\u043b\u044f \u043f\u0435\u0447\u0430\u0442\u0438 \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 multi_cell . \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0438 \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u0430\u0440\u0435\u0442\u043a\u0438, \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0430 \u043f\u043e\u0434 \u0442\u0435\u043a\u0443\u0449\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0435\u043a\u0441\u0442 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0448\u0438\u0440\u0438\u043d\u0435. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0434\u0432\u0430 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a ( set_title ) \u0438 \u0430\u0432\u0442\u043e\u0440 ( set_author ). \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u041f\u0435\u0440\u0432\u044b\u0439 - \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Acrobat Reader, \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u043c\u0435\u043d\u044e \u0424\u0430\u0439\u043b \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0443\u043d\u043a\u0442 \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. \u0412\u0442\u043e\u0440\u043e\u0439, \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0438\u0437 \u043f\u043b\u0430\u0433\u0438\u043d\u0430, - \u0449\u0435\u043b\u043a\u043d\u0443\u0442\u044c \u043f\u0440\u0430\u0432\u043e\u0439 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u043c\u044b\u0448\u0438 \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0443\u043d\u043a\u0442 \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 4 - \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u0422\u0435\u043a\u0441\u0442 \u0416\u044e\u043b\u044f \u0412\u0435\u0440\u043d\u0430 \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u043e\u0442\u043b\u0438\u0447\u0438\u0435\u043c \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0443\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 accept_page_break \u0438 set_col. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 accept_page_break , \u0432 \u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u044f\u0447\u0435\u0439\u043a\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438. \u0415\u0441\u043b\u0438 \u043e\u043d \u043c\u0435\u043d\u044c\u0448\u0435 2 (\u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043d\u0430 \u0442\u0440\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438), \u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043c\u0435\u0442\u043e\u0434 set_col, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0442\u0435\u043a\u0441\u0442 \u043c\u043e\u0433 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d \u0432 \u043d\u0435\u0439. \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u0430 \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043c\u0435\u0442\u043e\u0434 accept_page_break \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u0442 \u0441\u0431\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0438 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0420\u0443\u043a\u043e\u0432\u0434\u0441\u0442\u0432\u043e 5 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446 \u0412 \u044d\u0442\u043e\u043c \u0443\u0440\u043e\u043a\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u041a\u043e\u0434 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c, \u0447\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF - \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u043d \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 - \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u044f\u0447\u0435\u0435\u043a, \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438\u0437 \u043d\u0438\u0445. \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u044b\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c: \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u0432 \u0440\u0430\u043c\u043a\u0435, \u0432\u0441\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0438 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u043b\u0435\u0432\u043e\u043c\u0443 \u043a\u0440\u0430\u044e. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u0435\u043d, \u043d\u043e \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e. \u0412\u0442\u043e\u0440\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f: \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u044e \u0448\u0438\u0440\u0438\u043d\u0443, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u044b \u043f\u043e \u0446\u0435\u043d\u0442\u0440\u0443, \u0430 \u0446\u0438\u0444\u0440\u044b - \u043f\u043e \u043f\u0440\u0430\u0432\u043e\u043c\u0443 \u043a\u0440\u0430\u044e. \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043b\u0438\u043d\u0438\u0438 \u0431\u044b\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b. \u042d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 border \u043c\u0435\u0442\u043e\u0434\u0430 Cell(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u044f\u0447\u0435\u0439\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u043d\u044b. \u0417\u0434\u0435\u0441\u044c \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u043b\u0435\u0432\u0430\u044f (L) \u0438 \u043f\u0440\u0430\u0432\u0430\u044f (R). \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0438\u0442\u044c \u0435\u0435: \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0446\u0438\u043a\u043b\u0435, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c LRB \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b; \u0438\u043b\u0438, \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0437\u0434\u0435\u0441\u044c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043b\u0438\u043d\u0438\u044e \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430. \u0422\u0440\u0435\u0442\u044c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0445\u043e\u0436\u0430 \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e, \u043d\u043e \u0432 \u043d\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0446\u0432\u0435\u0442\u0430. \u0426\u0432\u0435\u0442\u0430 \u0437\u0430\u043b\u0438\u0432\u043a\u0438, \u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u043b\u0438\u043d\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f. \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u043a\u0440\u0430\u0441\u043a\u0430 \u0441\u0442\u0440\u043e\u043a \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u044b\u0445 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u044f\u0447\u0435\u0435\u043a. \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 6 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0438\u043b\u0435\u0439 \u0442\u0435\u043a\u0441\u0442\u0430 \u0412 \u044d\u0442\u043e\u043c \u0443\u0440\u043e\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u0445 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u0441\u044b\u043b\u043e\u043a \u0432\u043d\u0443\u0442\u0440\u0438 pdf \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438. \u0422\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u0442\u0435\u043a\u0441\u0442\u0430 (\u0436\u0438\u0440\u043d\u044b\u0439, \u043a\u0443\u0440\u0441\u0438\u0432, \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435) \u0432 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0442\u0435\u043a\u0441\u0442\u0435. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF - fpdf2-logo \u041d\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0437\u0434\u0435\u0441\u044c \u0434\u043b\u044f \u043f\u0435\u0447\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 - \u044d\u0442\u043e write() . \u041e\u043d \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 multi_cell() , \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c: \u041a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u0430\u0432\u043e\u043c \u043f\u043e\u043b\u0435, \u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043b\u0435\u0432\u043e\u043c \u043f\u043e\u043b\u0435. \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0435\u0446 \u0442\u0435\u043a\u0441\u0442\u0430. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0442\u0435\u043a\u0441\u0442\u0430, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u044c \u0448\u0440\u0438\u0444\u0442\u0430 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u0441 \u0442\u043e\u0433\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438\u0441\u044c. \u0421 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b, \u0435\u0433\u043e \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0440\u043e\u0432\u043d\u044f\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u043a\u0430\u043a \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 multi_cell() . \u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u0446\u0435\u043b\u0438 write() . \u041d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f, \u0437\u0430\u0442\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 set_font() , \u043c\u044b \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u043b\u0438\u0441\u044c \u043d\u0430 \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0441\u0441\u044b\u043b\u043a\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 add_link() , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u043b\u0438\u043a\u0430\u0431\u0435\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430\u0437\u0432\u0430\u043d\u043d\u0443\u044e \u043d\u0430\u043c\u0438 \"link\", \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0435\u0434\u0435\u0442 \u0432 \u0434\u0440\u0443\u0433\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. \u041d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 set_link() , \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0437\u043e\u043d\u0443 \u0434\u043b\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0438. \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u044e\u044e \u0441\u0441\u044b\u043b\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 image() . \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u0421\u0441\u044b\u043b\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439, \u0442\u0430\u043a \u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0439. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0438\u043b\u044f \u0448\u0440\u0438\u0444\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0441\u044b\u043b\u043e\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 write_html() . \u042d\u0442\u043e \u043f\u0430\u0440\u0441\u0435\u0440 html, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0441\u0442\u0438\u043b\u044c \u0448\u0440\u0438\u0444\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e html.","title":"\u0423\u0447\u0435\u0431\u043d\u0438\u043a \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435"},{"location":"Tutorial-ru.html#_1","text":"\u041f\u043e\u043b\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u043a\u043b\u0430\u0441\u0441\u0430 FPDF : fpdf.FPDF API doc \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 1 - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 2 - \u0412\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 3 - \u041f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0441\u0442\u0440\u043e\u043a \u0438 \u0446\u0432\u0435\u0442\u0430 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 4 - \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0420\u0443\u043a\u043e\u0432\u0434\u0441\u0442\u0432\u043e 5 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 6 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0438\u043b\u0435\u0439 \u0442\u0435\u043a\u0441\u0442\u0430","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e"},{"location":"Tutorial-ru.html#1-","text":"\u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 FPDF . \u0417\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 FPDF \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0444\u043e\u0440\u043c\u0430\u0442\u0430 A4 \u043f\u043e\u0440\u0442\u0440\u0435\u0442\u043d\u044b\u0435, \u0435\u0434\u0438\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f - \u043c\u0438\u043b\u043b\u0438\u043c\u0435\u0442\u0440. pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u041c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c PDF \u0432 \u0430\u043b\u044c\u0431\u043e\u043c\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 ( L ) \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Letter \u0438\u043b\u0438 Legal ) \u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f ( pt , cm , in ). \u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b add_page . \u041d\u0430\u0447\u0430\u043b\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043b\u0435\u0432\u043e\u043c \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0443\u0433\u043b\u0443, \u0430 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 1 \u0441\u043c \u043e\u0442 \u0433\u0440\u0430\u043d\u0438\u0446; \u043f\u043e\u043b\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b set_margins . \u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0448\u0440\u0438\u0444\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e set_font , \u0438\u043d\u0430\u0447\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c. \u041c\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u0443\u0440\u0441\u0438\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e I , \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u043d\u0443\u0442\u044b\u0439 \u0448\u0440\u0438\u0444\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e U \u0438\u043b\u0438 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0448\u0440\u0438\u0444\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 (\u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e). \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0440\u0430\u0437\u043c\u0435\u0440 \u0448\u0440\u0438\u0444\u0442\u0430 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0443\u043d\u043a\u0442\u0430\u0445, \u0430 \u043d\u0435 \u0432 \u043c\u0438\u043b\u043b\u0438\u043c\u0435\u0442\u0440\u0430\u0445 (\u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439); \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. \u0414\u0440\u0443\u0433\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0448\u0440\u0438\u0444\u0442\u044b: Times , Courier , Symbol \u0438 ZapfDingbats . \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u044f\u0447\u0435\u0439\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e cell . \u042f\u0447\u0435\u0439\u043a\u0430 - \u044d\u0442\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043e\u0431\u0440\u0430\u043c\u043b\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u043c\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0435\u043a\u0441\u0442. \u041e\u043d\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u041c\u044b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b, \u0442\u0435\u043a\u0441\u0442 (\u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u043b\u0438 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0439), \u0434\u043e\u043b\u0436\u043d\u044b \u043b\u0438 \u0431\u044b\u0442\u044c \u043d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u043d\u044b \u0440\u0430\u043c\u043a\u0438, \u0438 \u043a\u0443\u0434\u0430 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0435 (\u0432\u043f\u0440\u0430\u0432\u043e, \u0432\u043d\u0438\u0437 \u0438\u043b\u0438 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438). \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u043c\u043a\u0443, \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u044f\u0447\u0435\u0439\u043a\u0443 \u0441 \u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 : \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ln . \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u044b\u0441\u043e\u0442\u0443 \u0440\u0430\u0437\u0440\u044b\u0432\u0430. \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 output . \u0411\u0435\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 output() \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u0443\u0444\u0435\u0440 PDF bytearray .","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 1 - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440"},{"location":"Tutorial-ru.html#2-","text":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0432\u0435\u0440\u0445\u043d\u0438\u043c \u0438 \u043d\u0438\u0436\u043d\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b\u0430\u043c\u0438 \u0438 \u043b\u043e\u0433\u043e\u0442\u0438\u043f\u043e\u043c: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u044b header \u0438 footer \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b\u043e\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041e\u043d\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. \u041e\u043d\u0438 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 FPDF, \u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u044e\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445. \u041b\u043e\u0433\u043e\u0442\u0438\u043f \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c image \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0435\u0433\u043e \u043b\u0435\u0432\u043e\u0433\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430 \u0438 \u0448\u0438\u0440\u0438\u043d\u044b. \u0412\u044b\u0441\u043e\u0442\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0431\u043b\u044e\u0441\u0442\u0438 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u043f\u0435\u0447\u0430\u0442\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0448\u0438\u0440\u0438\u043d\u044b \u044f\u0447\u0435\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u044f\u0447\u0435\u0439\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0438\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b; \u044d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430. \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c page_no ; \u0447\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0442\u043e \u043e\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f {nb} , \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u0440\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 set_y , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u0432\u0435\u0440\u0445\u0443 \u0438\u043b\u0438 \u0441\u043d\u0438\u0437\u0443. \u0417\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0435\u0449\u0435 \u043e\u0434\u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f: \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u044f\u0447\u0435\u0439\u043a\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442 \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 2 \u0441\u0430\u043d\u0442\u0438\u043c\u0435\u0442\u0440\u0430 \u043e\u0442 \u043d\u0438\u0437\u0430), \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0430\u0437\u0440\u044b\u0432 \u0438 \u0448\u0440\u0438\u0444\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f. \u0425\u043e\u0442\u044f \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u0438 \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u044e\u0442 \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0448\u0440\u0438\u0444\u0442 ( helvetica ), \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Times . \u042d\u0442\u043e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u0446\u0432\u0435\u0442\u0430\u043c \u0438 \u0448\u0438\u0440\u0438\u043d\u0435 \u043b\u0438\u043d\u0438\u0439. \u041f\u0440\u0435\u0434\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e set_auto_page_break .","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 2 - \u0412\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u043d\u0438\u0436\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u0442\u0438\u0442\u0443\u043b, \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430"},{"location":"Tutorial-ru.html#3-","text":"\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0435 \u0430\u0431\u0437\u0430\u0446\u044b. \u041e\u043d \u0442\u0430\u043a\u0436\u0435 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u043e\u0432. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u0422\u0435\u043a\u0441\u0442 \u0416\u044e\u043b\u044f \u0412\u0435\u0440\u043d\u0430 \u041c\u0435\u0442\u043e\u0434 get_string_width \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u043b\u0438\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0448\u0440\u0438\u0444\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0448\u0438\u0440\u0438\u043d\u044b \u0440\u0430\u043c\u043a\u0438, \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a. \u0417\u0430\u0442\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0446\u0432\u0435\u0442\u0430 (\u0447\u0435\u0440\u0435\u0437 set_draw_color , set_fill_color \u0438 set_text_color ), \u0430 \u0442\u043e\u043b\u0449\u0438\u043d\u0430 \u043b\u0438\u043d\u0438\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 1 \u043c\u043c (\u043f\u0440\u043e\u0442\u0438\u0432 0,2 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e set_line_width . \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u043c\u044b \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u044f\u0447\u0435\u0439\u043a\u0443 (\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 True \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0444\u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d). \u0414\u043b\u044f \u043f\u0435\u0447\u0430\u0442\u0438 \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 multi_cell . \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0438 \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u0430\u0440\u0435\u0442\u043a\u0438, \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0430 \u043f\u043e\u0434 \u0442\u0435\u043a\u0443\u0449\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0435\u043a\u0441\u0442 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0448\u0438\u0440\u0438\u043d\u0435. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0434\u0432\u0430 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430: \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a ( set_title ) \u0438 \u0430\u0432\u0442\u043e\u0440 ( set_author ). \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u041f\u0435\u0440\u0432\u044b\u0439 - \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Acrobat Reader, \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u043c\u0435\u043d\u044e \u0424\u0430\u0439\u043b \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0443\u043d\u043a\u0442 \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. \u0412\u0442\u043e\u0440\u043e\u0439, \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0438\u0437 \u043f\u043b\u0430\u0433\u0438\u043d\u0430, - \u0449\u0435\u043b\u043a\u043d\u0443\u0442\u044c \u043f\u0440\u0430\u0432\u043e\u0439 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u043c\u044b\u0448\u0438 \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0443\u043d\u043a\u0442 \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430.","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 3 - \u041f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0441\u0442\u0440\u043e\u043a \u0438 \u0446\u0432\u0435\u0442\u0430"},{"location":"Tutorial-ru.html#4-","text":"\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF \u0422\u0435\u043a\u0441\u0442 \u0416\u044e\u043b\u044f \u0412\u0435\u0440\u043d\u0430 \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u043e\u0442\u043b\u0438\u0447\u0438\u0435\u043c \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0443\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 accept_page_break \u0438 set_col. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 accept_page_break , \u0432 \u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u044f\u0447\u0435\u0439\u043a\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438. \u0415\u0441\u043b\u0438 \u043e\u043d \u043c\u0435\u043d\u044c\u0448\u0435 2 (\u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043d\u0430 \u0442\u0440\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438), \u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043c\u0435\u0442\u043e\u0434 set_col, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0442\u0435\u043a\u0441\u0442 \u043c\u043e\u0433 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d \u0432 \u043d\u0435\u0439. \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u0430 \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043c\u0435\u0442\u043e\u0434 accept_page_break \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u0442 \u0441\u0431\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0438 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 4 - \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a"},{"location":"Tutorial-ru.html#5-","text":"\u0412 \u044d\u0442\u043e\u043c \u0443\u0440\u043e\u043a\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u041a\u043e\u0434 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c, \u0447\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF - \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u043d \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 - \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u044f\u0447\u0435\u0435\u043a, \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438\u0437 \u043d\u0438\u0445. \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u044b\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c: \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u0432 \u0440\u0430\u043c\u043a\u0435, \u0432\u0441\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0438 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u043b\u0435\u0432\u043e\u043c\u0443 \u043a\u0440\u0430\u044e. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u0435\u043d, \u043d\u043e \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e. \u0412\u0442\u043e\u0440\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f: \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u044e \u0448\u0438\u0440\u0438\u043d\u0443, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u044b \u043f\u043e \u0446\u0435\u043d\u0442\u0440\u0443, \u0430 \u0446\u0438\u0444\u0440\u044b - \u043f\u043e \u043f\u0440\u0430\u0432\u043e\u043c\u0443 \u043a\u0440\u0430\u044e. \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043b\u0438\u043d\u0438\u0438 \u0431\u044b\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b. \u042d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 border \u043c\u0435\u0442\u043e\u0434\u0430 Cell(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u044f\u0447\u0435\u0439\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u043d\u044b. \u0417\u0434\u0435\u0441\u044c \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u043b\u0435\u0432\u0430\u044f (L) \u0438 \u043f\u0440\u0430\u0432\u0430\u044f (R). \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0438\u0442\u044c \u0435\u0435: \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0446\u0438\u043a\u043b\u0435, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c LRB \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b; \u0438\u043b\u0438, \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0437\u0434\u0435\u0441\u044c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043b\u0438\u043d\u0438\u044e \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430. \u0422\u0440\u0435\u0442\u044c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0445\u043e\u0436\u0430 \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e, \u043d\u043e \u0432 \u043d\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0446\u0432\u0435\u0442\u0430. \u0426\u0432\u0435\u0442\u0430 \u0437\u0430\u043b\u0438\u0432\u043a\u0438, \u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u043b\u0438\u043d\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f. \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u043a\u0440\u0430\u0441\u043a\u0430 \u0441\u0442\u0440\u043e\u043a \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u044b\u0445 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u044f\u0447\u0435\u0435\u043a.","title":"\u0420\u0443\u043a\u043e\u0432\u0434\u0441\u0442\u0432\u043e 5 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446"},{"location":"Tutorial-ru.html#6-","text":"\u0412 \u044d\u0442\u043e\u043c \u0443\u0440\u043e\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043d\u043e \u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u0445 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u0441\u044b\u043b\u043e\u043a \u0432\u043d\u0443\u0442\u0440\u0438 pdf \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438. \u0422\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u0442\u0435\u043a\u0441\u0442\u0430 (\u0436\u0438\u0440\u043d\u044b\u0439, \u043a\u0443\u0440\u0441\u0438\u0432, \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435) \u0432 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0442\u0435\u043a\u0441\u0442\u0435. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 PDF - fpdf2-logo \u041d\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0437\u0434\u0435\u0441\u044c \u0434\u043b\u044f \u043f\u0435\u0447\u0430\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 - \u044d\u0442\u043e write() . \u041e\u043d \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 multi_cell() , \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c: \u041a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u0430\u0432\u043e\u043c \u043f\u043e\u043b\u0435, \u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043b\u0435\u0432\u043e\u043c \u043f\u043e\u043b\u0435. \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0435\u0446 \u0442\u0435\u043a\u0441\u0442\u0430. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0442\u0435\u043a\u0441\u0442\u0430, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u044c \u0448\u0440\u0438\u0444\u0442\u0430 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u0441 \u0442\u043e\u0433\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438\u0441\u044c. \u0421 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b, \u0435\u0433\u043e \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0440\u043e\u0432\u043d\u044f\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u043a\u0430\u043a \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 multi_cell() . \u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u0446\u0435\u043b\u0438 write() . \u041d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f, \u0437\u0430\u0442\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 set_font() , \u043c\u044b \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u043b\u0438\u0441\u044c \u043d\u0430 \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0441\u0441\u044b\u043b\u043a\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 add_link() , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u043b\u0438\u043a\u0430\u0431\u0435\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430\u0437\u0432\u0430\u043d\u043d\u0443\u044e \u043d\u0430\u043c\u0438 \"link\", \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0435\u0434\u0435\u0442 \u0432 \u0434\u0440\u0443\u0433\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. \u041d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 set_link() , \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0437\u043e\u043d\u0443 \u0434\u043b\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0438. \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u044e\u044e \u0441\u0441\u044b\u043b\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043c\u0435\u0442\u043e\u0434 image() . \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u0421\u0441\u044b\u043b\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439, \u0442\u0430\u043a \u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0439. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0438\u043b\u044f \u0448\u0440\u0438\u0444\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0441\u044b\u043b\u043e\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 write_html() . \u042d\u0442\u043e \u043f\u0430\u0440\u0441\u0435\u0440 html, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0441\u0442\u0438\u043b\u044c \u0448\u0440\u0438\u0444\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e html.","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e 6 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u0441\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0438\u043b\u0435\u0439 \u0442\u0435\u043a\u0441\u0442\u0430"},{"location":"Tutorial-%E0%A4%B9%E0%A4%BF%E0%A4%82%E0%A4%A6%E0%A5%80.html","text":"\u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u0909\u0926\u093e\u0939\u0930\u0923 \u091c\u0932\u094d\u0926\u0940 \u0938\u0947 \u0926\u093f\u0916\u093e\u0924\u0947 \u0939\u0948\u0902 \u0915\u093f fpdf2 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0948\u0938\u0947 \u0915\u0930\u0947\u0902\u0964 \u0906\u092a\u0915\u094b \u0938\u092d\u0940 \u092e\u0941\u0916\u094d\u092f \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u0913\u0902 \u0915\u0940 \u0935\u094d\u092f\u093e\u0916\u094d\u092f\u093e \u092e\u093f\u0932 \u091c\u093e\u090f\u0917\u0940\u0964 Methods full documentation / \u0924\u0930\u0940\u0915\u0947 \u092a\u0942\u0930\u094d\u0923 \u092a\u094d\u0930\u0932\u0947\u0916\u0928: fpdf.FPDF API doc Tuto 1 - \u092e\u0942\u0932 \u0909\u0926\u093e\u0939\u0930\u0923 Tuto 2 - \u0936\u0940\u0930\u094d\u0937\u0932\u0947\u0916 (Header), \u092a\u093e\u0926 \u0932\u0947\u0916 (Footer), \u092a\u0943\u0937\u094d\u0920 \u0935\u093f\u0930\u093e\u092e (Page Break) \u0914\u0930 \u091b\u0935\u093f (Image) Tuto 3 - \u0932\u093e\u0907\u0928 \u092c\u094d\u0930\u0947\u0915 \u0914\u0930 \u0930\u0902\u0917 Tuto 4 - \u092e\u0932\u094d\u091f\u0940 \u0915\u0949\u0932\u092e Tuto 5 - \u091f\u0947\u092c\u0932 \u092c\u0928\u093e\u0928\u093e Tuto 6 - \u0932\u093f\u0902\u0915 \u092c\u0928\u093e\u0928\u093e \u0914\u0930 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0936\u0948\u0932\u093f\u092f\u094b\u0902 \u0915\u094b \u092e\u093f\u0932\u093e\u0928\u093e Tuto 1 - \u092e\u0942\u0932 \u0909\u0926\u093e\u0939\u0930\u0923 \u0906\u0907\u090f \u0915\u094d\u0932\u093e\u0938\u093f\u0915 \u0909\u0926\u093e\u0939\u0930\u0923 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0915\u0930\u0947\u0902: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Resulting PDF \u0932\u093e\u0907\u092c\u094d\u0930\u0947\u0930\u0940 \u092b\u093c\u093e\u0907\u0932 \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926, \u0939\u092e \u090f\u0915 FPDF \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u092c\u0928\u093e\u0924\u0947 \u0939\u0948\u0902\u0964 FPDF \u0915\u0902\u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u092f\u0939\u093e\u0902 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u092e\u093e\u0928\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948: \u092a\u0943\u0937\u094d\u0920 A4 \u092a\u094b\u0930\u094d\u091f\u094d\u0930\u0947\u091f \u092e\u0947\u0902 \u0939\u0948\u0902 \u0914\u0930 \u092e\u093e\u092a \u0907\u0915\u093e\u0908 \u092e\u093f\u0932\u0940\u092e\u0940\u091f\u0930 \u0939\u0948\u0964 \u0907\u0938\u0915\u0947 \u0938\u093e\u0925 \u0938\u094d\u092a\u0937\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u093f\u092f\u0947 \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u092a\u0940\u0921\u0940\u090f\u092b \u0915\u094b \u0932\u0948\u0902\u0921\u0938\u094d\u0915\u0947\u092a \u092e\u094b\u0921 \u092e\u0947\u0902 \u0938\u0947\u091f \u0915\u0930\u0928\u093e \u0938\u0902\u092d\u0935 \u0939\u0948 ( L ) \u092f\u093e \u0905\u0928\u094d\u092f \u092a\u0947\u091c \u092a\u094d\u0930\u093e\u0930\u0942\u092a\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f (\u091c\u0948\u0938\u0947 \u0915\u093f Letter \u0924\u0925\u093e Legal ) \u0914\u0930 \u0907\u0915\u093e\u0907\u092f\u094b\u0902 \u0915\u094b \u092e\u093e\u092a\u0947\u0902 ( pt , cm , in )\u0964 \u092b\u093f\u0932\u0939\u093e\u0932 \u0915\u094b\u0908 \u092a\u0947\u091c \u0928\u0939\u0940\u0902 \u0939\u0948, \u0907\u0938\u0932\u093f\u090f \u0939\u092e\u0947\u0902 \u0907\u0938\u092e\u0947\u0902 \u090f\u0915 add_page \u091c\u094b\u0921\u093c\u0928\u093e \u0939\u094b\u0917\u093e \u0964 \u092e\u0942\u0932 \u090a\u092a\u0930\u0940-\u092c\u093e\u090f\u0901 \u0915\u094b\u0928\u0947 \u092e\u0947\u0902 \u0939\u0948 \u0914\u0930 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0938\u0940\u092e\u093e\u0913\u0902 \u0938\u0947 1 cm \u092a\u0930 \u0930\u0916\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948; \u092e\u093e\u0930\u094d\u091c\u093f\u0928 \u0915\u094b set_margins \u0915\u0947 \u0938\u093e\u0925 \u092c\u0926\u0932\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948 \u0964 \u0907\u0938\u0938\u0947 \u092a\u0939\u0932\u0947 \u0915\u093f \u0939\u092e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930 \u0938\u0915\u0947\u0902, \u0907\u0938\u0915\u0947 \u0938\u093e\u0925 \u090f\u0915 \u092b\u0949\u0928\u094d\u091f \u0915\u093e \u091a\u092f\u0928 set_font \u0938\u0947 \u0915\u0930\u0928\u093e \u0905\u0928\u093f\u0935\u093e\u0930\u094d\u092f \u0939\u0948, \u0905\u0928\u094d\u092f\u0925\u093e \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c (Document) \u0905\u092e\u093e\u0928\u094d\u092f \u0939\u094b\u0917\u093e\u0964 \u0939\u092e Helvetica bold 16 \u091a\u0941\u0928\u0924\u0947 \u0939\u0948\u0902: pdf . set_font ( 'helvetica' , 'B' , 16 ) \u0939\u092e I \u0915\u0947 \u0938\u093e\u0925 \u0907\u091f\u0948\u0932\u093f\u0915 (Italic) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902, U \u0915\u0947 \u0938\u093e\u0925 \u0930\u0947\u0916\u093e\u0902\u0915\u093f\u0924 (Underlined) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902 \u092f\u093e \u090f\u0915 \u0928\u093f\u092f\u092e\u093f\u0924 \u092b\u093c\u0949\u0928\u094d\u091f \u090f\u0915 \u0916\u093e\u0932\u0940 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0915\u0947 \u0938\u093e\u0925 (\u092f\u093e \u0915\u094b\u0908 \u0938\u0902\u092f\u094b\u091c\u0928) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u0927\u094d\u092f\u093e\u0928 \u0926\u0947\u0902 \u0915\u093f \u092b\u093c\u0949\u0928\u094d\u091f \u0915\u093e \u0906\u0915\u093e\u0930 \u0905\u0902\u0915\u094b\u0902 \u092e\u0947\u0902 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u092e\u093f\u0932\u0940\u092e\u0940\u091f\u0930 \u092e\u0947\u0902 \u0928\u0939\u0940\u0902 (\u092f\u093e \u0905\u0928\u094d\u092f \u0909\u092a\u092f\u094b\u0917\u0915\u0930\u094d\u0924\u093e \u0907\u0915\u093e\u0908); \u092f\u0939 \u090f\u0915\u092e\u093e\u0924\u094d\u0930 \u0905\u092a\u0935\u093e\u0926 \u0939\u0948\u0964 \u0905\u0928\u094d\u092f \u092c\u093f\u0932\u094d\u091f-\u0907\u0928 \u092b\u0949\u0928\u094d\u091f Times , Courier , Symbol \u0914\u0930 ZapfDingbats \u0939\u0948\u0902\u0964 \u0905\u092c \u0939\u092e cell \u0915\u0947 \u0938\u093e\u0925 cell print \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u090f\u0915 \u0938\u0947\u0932 (cell) \u090f\u0915 \u0906\u092f\u0924\u093e\u0915\u093e\u0930 \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u0939\u0948, \u0938\u0902\u092d\u0935\u0924\u0903 \u0924\u0948\u092f\u093e\u0930 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0915\u0941\u091b \u092a\u093e\u0920 \u0939\u0948\u0964 \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u092e\u0947\u0902 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0939\u092e \u0907\u0938\u0915\u0947 \u0906\u092f\u093e\u092e, \u0907\u0938\u0915\u0947 \u092a\u093e\u0920 (\u0915\u0947\u0902\u0926\u094d\u0930\u093f\u0924 \u092f\u093e \u0938\u0902\u0930\u0947\u0916\u093f\u0924) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0905\u0917\u0930 \u0938\u0940\u092e\u093e\u090f\u0902 \u0916\u0940\u0902\u091a\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f,\u0914\u0930 \u091c\u0939\u093e\u0902 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u0907\u0938\u0915\u0947 \u092c\u093e\u0926 \u091a\u0932\u0924\u0940 \u0939\u0948 (\u0926\u093e\u0908\u0902 \u0913\u0930, \u0928\u0940\u091a\u0947 \u092f\u093e \u0905\u0917\u0932\u0940 \u092a\u0902\u0915\u094d\u0924\u093f \u0915\u0940 \u0936\u0941\u0930\u0941\u0906\u0924 \u092e\u0947\u0902)\u0964 \u090f\u0915 \u092b\u094d\u0930\u0947\u092e \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e \u092f\u0939 \u0915\u0930\u0947\u0902\u0917\u0947: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) \u0915\u0947\u0928\u094d\u0926\u094d\u0930\u093f\u0924 \u092a\u093e\u0920 (centered text) \u0915\u0947 \u0938\u093e\u0925 \u0907\u0938\u0915\u0947 \u0906\u0917\u0947 \u090f\u0915 \u0928\u092f\u093e \u0938\u0947\u0932 (cell) \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0914\u0930 \u0905\u0917\u0932\u0940 \u092a\u0902\u0915\u094d\u0924\u093f \u092a\u0930 \u091c\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e \u0915\u0930\u0947\u0902\u0917\u0947: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) \u091f\u093f\u092a\u094d\u092a\u0923\u0940 : \u0932\u093e\u0907\u0928 \u092c\u094d\u0930\u0947\u0915 ln \u0915\u0947 \u0938\u093e\u0925 \u092d\u0940 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0902\u0964 \u0907\u0938 \u0935\u093f\u0927\u093f \u092c\u094d\u0930\u0947\u0915 \u0915\u0940 \u090a\u0902\u091a\u093e\u0908 \u0915\u0947 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u0940 \u0939\u0948\u0964 \u0905\u0902\u0924 \u092e\u0947\u0902, \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u094b \u092c\u0902\u0926 \u0915\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0914\u0930 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u093f\u090f \u0917\u090f \u092b\u093c\u093e\u0907\u0932 \u092a\u0925 \u0915\u0947 \u0924\u0939\u0924 \u0938\u0939\u0947\u091c\u093e \u0917\u092f\u093e \u0939\u0948 output .\u092c\u093f\u0928\u093e \u0915\u093f\u0938\u0940 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947, output() PDF bytearray \u092c\u092b\u093c\u0930 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964 Tuto 2 - \u0936\u0940\u0930\u094d\u0937\u0932\u0947\u0916 (Header), \u092a\u093e\u0926 \u0932\u0947\u0916 (Footer), \u092a\u0943\u0937\u094d\u0920 \u0935\u093f\u0930\u093e\u092e (Page Break) \u0914\u0930 \u091b\u0935\u093f (Image) \u092f\u0939\u093e\u0901 \u0936\u0940\u0930\u094d\u0937 \u0932\u0947\u0916 (Header), \u092a\u093e\u0926\u0932\u0947\u0916 (Footer) \u0914\u0930 \u0932\u094b\u0917\u094b (Logo) \u0915\u0947 \u0938\u093e\u0925 \u0926\u094b \u092a\u0943\u0937\u094d\u0920 \u0915\u093e \u0909\u0926\u093e\u0939\u0930\u0923 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Resulting PDF \u092f\u0939 \u0909\u0926\u093e\u0939\u0930\u0923 header \u0914\u0930 footer \u0915\u094b \u0938\u0902\u0938\u093e\u0927\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f header \u0914\u0930 footer \u0932\u0947\u0916 \u0935\u093f\u0927\u093f\u092f\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0909\u0928\u094d\u0939\u0947\u0902 \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 (automatically) \u092c\u0941\u0932\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0935\u0947 \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 FPDF \u0935\u0930\u094d\u0917 \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u0932\u0947\u0915\u093f\u0928 \u0915\u0941\u091b \u0928\u0939\u0940\u0902 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0907\u0938\u0932\u093f\u090f \u0939\u092e\u0947\u0902 class \u0915\u093e \u0935\u093f\u0938\u094d\u0924\u093e\u0930 \u0915\u0930\u0928\u093e \u0939\u094b\u0917\u093e \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 override \u0915\u0930\u0928\u093e \u0939\u094b\u0917\u093e\u0964 Logo \u0915\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0915\u0947 image \u0935\u093f\u0927\u093f \u0938\u0947 \u0907\u0938\u0915\u093e \u090a\u092a\u0930\u0940-\u092c\u093e\u090f\u0901 \u0915\u094b\u0928\u093e \u0914\u0930 \u0907\u0938\u0915\u0940 \u091a\u094c\u0921\u093c\u093e\u0908 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0915\u0947 \u092e\u0941\u0926\u094d\u0930\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u091b\u0935\u093f \u0905\u0928\u0941\u092a\u093e\u0924 \u0915\u093e \u0938\u092e\u094d\u092e\u093e\u0928 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u090a\u0902\u091a\u093e\u0908 \u0915\u0940 \u0917\u0923\u0928\u093e \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u092a\u0943\u0937\u094d\u0920 \u0938\u0902\u0916\u094d\u092f\u093e (Page number) \u092e\u0941\u0926\u094d\u0930\u093f\u0924 (print) \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0938\u0947\u0932 \u091a\u094c\u0921\u093c\u093e\u0908 (cell width) \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u090f\u0915 \u0936\u0942\u0928\u094d\u092f \u092e\u093e\u0928(null value) \u092a\u093e\u0938 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0938\u0947\u0932 \u0915\u094b \u092a\u0947\u091c \u0915\u0947 \u0926\u093e\u0939\u093f\u0928\u0947 \u0939\u093e\u0936\u093f\u092f\u0947 (right margin) \u0924\u0915 \u092c\u0922\u093c\u093e\u092f\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f; \u092f\u0939 \u092a\u093e\u0920 \u0915\u094b \u0915\u0947\u0902\u0926\u094d\u0930(center) \u092e\u0947\u0902 \u0930\u0916\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0906\u0938\u093e\u0928 \u0939\u0948\u0964 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092a\u0943\u0937\u094d\u0920 \u0938\u0902\u0916\u094d\u092f\u093e page_no \u0935\u093f\u0927\u093f \u0926\u094d\u0935\u093e\u0930\u093e \u0935\u093e\u092a\u0938 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948; \u092a\u0943\u0937\u094d\u0920\u094b\u0902 \u0915\u0940 \u0915\u0941\u0932 \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u0947 \u0932\u093f\u090f, \u092f\u0939 \u0935\u093f\u0936\u0947\u0937 \u092e\u0942\u0932\u094d\u092f {nb} \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u093f\u0938\u0947 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u092c\u0902\u0926 \u0939\u094b\u0928\u0947 \u092a\u0930 \u092a\u094d\u0930\u0924\u093f\u0938\u094d\u0925\u093e\u092a\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u090f\u0917\u093e \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948)\u0964 set_y \u092a\u0926\u094d\u0927\u0924\u093f \u0915\u0947 \u0909\u092a\u092f\u094b\u0917 \u092a\u0930 \u0927\u094d\u092f\u093e\u0928 \u0926\u0947\u0902 \u091c\u094b \u092a\u0943\u0937\u094d\u0920 \u092e\u0947\u0902 \u090f\u0915 \u092a\u0942\u0930\u094d\u0923 \u0938\u094d\u0925\u093e\u0928 \u092a\u0930 \u0938\u094d\u0925\u093f\u0924\u093f \u0938\u0947\u091f \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948, \u090a\u092a\u0930 \u092f\u093e \u0928\u0940\u091a\u0947 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092f\u0939\u093e\u0901 \u090f\u0915 \u0914\u0930 \u0926\u093f\u0932\u091a\u0938\u094d\u092a \u0935\u093f\u0936\u0947\u0937\u0924\u093e \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948: the automatic page breaking. \u091c\u0948\u0938\u0947 \u0939\u0940 \u0915\u094b\u0908 \u0938\u0947\u0932 \u092a\u0943\u0937\u094d\u0920 \u092e\u0947\u0902 \u090f\u0915 \u0938\u0940\u092e\u093e \u0915\u094b \u092a\u093e\u0930 \u0915\u0930\u0947\u0917\u093e (\u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0928\u0940\u091a\u0947 \u0938\u0947 2 \u0938\u0947\u0902\u091f\u0940\u092e\u0940\u091f\u0930 \u092a\u0930), \u090f\u0915 \u092c\u094d\u0930\u0947\u0915 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u092b\u093c\u0949\u0928\u094d\u091f \u0915\u094b \u092a\u0941\u0928\u0930\u094d\u0938\u094d\u0925\u093e\u092a\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0939\u093e\u0932\u093e\u0902\u0915\u093f \u0936\u0940\u0930\u094d\u0937 \u0932\u0947\u0916 (Header) \u0914\u0930 \u092a\u093e\u0926 \u0932\u0947\u0916 (Footer) \u0905\u092a\u0928\u0947 \u0938\u094d\u0935\u092f\u0902 \u0915\u0947 \u092b\u093c\u0949\u0928\u094d\u091f ( Helvetica ) \u0915\u093e \u091a\u092f\u0928 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, body Times \u0915\u0947 \u0938\u093e\u0925 \u091c\u093e\u0930\u0940 \u0930\u0939\u0924\u093e \u0939\u0948\u0964 \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u092c\u0939\u093e\u0932\u0940 \u0915\u093e \u092f\u0939 \u0924\u0902\u0924\u094d\u0930 \u0930\u0902\u0917\u094b\u0902 \u0914\u0930 \u0930\u0947\u0916\u093e \u0915\u0940 \u091a\u094c\u0921\u093c\u093e\u0908 \u092a\u0930 \u092d\u0940 \u0932\u093e\u0917\u0942 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092a\u0943\u0937\u094d\u0920 \u0935\u093f\u0930\u093e\u092e \u0915\u094b \u091f\u094d\u0930\u093f\u0917\u0930 \u0915\u0930\u0928\u0947 \u0935\u093e\u0932\u0940 \u0938\u0940\u092e\u093e \u0915\u094b set_auto_page_break \u0915\u0947 \u0938\u093e\u0925 \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964 Tuto 3 - \u0932\u093e\u0907\u0928 \u092c\u094d\u0930\u0947\u0915 \u0914\u0930 \u0930\u0902\u0917 \u0906\u0907\u090f \u090f\u0915 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0938\u093e\u0925 \u091c\u093e\u0930\u0940 \u0930\u0916\u0947\u0902 \u091c\u094b Justified \u0905\u0928\u0941\u091a\u094d\u091b\u0947\u0926\u094b\u0902 \u0915\u094b \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0930\u0902\u0917\u094b\u0902 \u0915\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u094b \u092d\u0940 \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948\u0964 from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Resulting PDF Jules Verne text get_string_width \u0935\u093f\u0927\u093f \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092b\u093c\u0949\u0928\u094d\u091f \u092e\u0947\u0902 \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0915\u0940 \u0932\u0902\u092c\u093e\u0908 \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u0940 \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0936\u0940\u0930\u094d\u0937\u0915 \u0915\u0947 \u0906\u0938\u092a\u093e\u0938 \u0915\u0947 \u092b\u094d\u0930\u0947\u092e \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f \u0914\u0930 \u091a\u094c\u0921\u093c\u093e\u0908 \u0915\u0940 \u0917\u0923\u0928\u093e \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092f\u0939\u093e\u0902 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092b\u093f\u0930 \u0930\u0902\u0917 \u0938\u0947\u091f \u0915\u093f\u090f \u091c\u093e\u0924\u0947 \u0939\u0948\u0902 ( set_draw_color , \u0938\u0947\u091f \u092b\u093f\u0932 \u0915\u0932\u0930 \u0914\u0930 \u0938\u0947\u091f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0932\u0930 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947) \u0914\u0930 \u0932\u093e\u0907\u0928 \u0915\u0940 \u092e\u094b\u091f\u093e\u0908 \u0938\u0947\u091f\u0932\u093e\u0907\u0928 \u091a\u094c\u0921\u093c\u093e\u0908 \u0915\u0947 \u0938\u093e\u0925 1 \u092e\u093f\u092e\u0940 (\u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 0.2 \u0915\u0947 \u0916\u093f\u0932\u093e\u092b) \u092a\u0930 \u0938\u0947\u091f \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u092b\u093f\u0930 \u0930\u0902\u0917 \u0938\u0947\u091f \u0915\u093f\u090f \u091c\u093e\u0924\u0947 \u0939\u0948\u0902 ( set_draw_color , set_fill_color \u0914\u0930 set_text_color \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947) \u0914\u0930 \u0932\u093e\u0907\u0928 \u0915\u0940 \u092e\u094b\u091f\u093e\u0908 set_line_width \u0915\u0947 \u0938\u093e\u0925 1 \u092e\u093f\u092e\u0940 (\u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 0.2 \u0915\u0947 \u0935\u093f\u0930\u0941\u0926\u094d\u0927) \u092a\u0930 \u0938\u0947\u091f \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u0905\u0902\u0924 \u092e\u0947\u0902, \u0939\u092e \u0938\u0947\u0932 \u0915\u094b \u0906\u0909\u091f\u092a\u0941\u091f \u0915\u0930\u0924\u0947 \u0939\u0948\u0902 (\u0905\u0902\u0924\u093f\u092e \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947 true \u0939\u094b\u0928\u0947 \u0938\u0947 \u0939\u092e\u0947 \u092a\u0924\u093e \u091a\u0932\u0924\u093e \u0939\u0948 \u0915\u093f \u092a\u0943\u0937\u094d\u0920\u092d\u0942\u092e\u093f \u0915\u094b \u092d\u0930\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f)\u0964 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u094b \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0907\u0938\u094d\u0924\u0947\u092e\u093e\u0932 \u0915\u0940 \u091c\u093e\u0928\u0947 \u0935\u093e\u0932\u0940 \u0935\u093f\u0927\u093f multi_cell \u0939\u0948\u0964 \u0939\u0930 \u092c\u093e\u0930 \u091c\u092c \u0915\u094b\u0908 \u0932\u093e\u0907\u0928 cell \u0915\u0947 \u0926\u093e\u0939\u093f\u0928\u0947 \u091b\u094b\u0930 \u0924\u0915 \u092a\u0939\u0941\u0901\u091a\u0924\u0940 \u0939\u0948 \u092f\u093e carriage return \u0915\u0948\u0930\u0947\u0915\u094d\u091f\u0930 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u090f\u0915 \u0932\u093e\u0907\u0928 \u092c\u094d\u0930\u0947\u0915 \u091c\u093e\u0930\u0940 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 current cell \u0915\u0947 \u0924\u0939\u0924 \u090f\u0915 \u0928\u092f\u093e \u0938\u0947\u0932 \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 \u092c\u0928\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 Text \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 Justified \u0939\u0948\u0964 \u0926\u094b \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0917\u0941\u0923 \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0939\u0948\u0902: \u0936\u0940\u0930\u094d\u0937\u0915 ( set_title ) \u0914\u0930 \u0932\u0947\u0916\u0915 ( set_author ). \u0917\u0941\u0923\u094b\u0902 \u0915\u094b \u0926\u094b \u0924\u0930\u0940\u0915\u094b\u0902 \u0938\u0947 \u0926\u0947\u0916\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u094b \u0938\u0940\u0927\u0947 \u090f\u0915\u094d\u0930\u094b\u092c\u0947\u091f \u0930\u0940\u0921\u0930 \u0915\u0947 \u0938\u093e\u0925 \u0916\u094b\u0932\u0928\u093e \u0939\u0948, \u092b\u093c\u093e\u0907\u0932 \u092e\u0947\u0928\u0942 \u092a\u0930 \u091c\u093e\u090f\u0901 \u0914\u0930 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0917\u0941\u0923 \u0935\u093f\u0915\u0932\u094d\u092a \u091a\u0941\u0928\u0947\u0902\u0964 \u0926\u0942\u0938\u0930\u093e, \u092a\u094d\u0932\u0917-\u0907\u0928 \u0938\u0947 \u092d\u0940 \u0909\u092a\u0932\u092c\u094d\u0927 \u0939\u0948, \u0930\u093e\u0907\u091f-\u0915\u094d\u0932\u093f\u0915 \u0915\u0930\u0928\u093e \u0914\u0930 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0917\u0941\u0923 \u091a\u0941\u0928\u0928\u093e \u0939\u0948\u0964 Tuto 4 - \u092e\u0932\u094d\u091f\u0940 \u0915\u0949\u0932\u092e \u092f\u0939 \u0909\u0926\u093e\u0939\u0930\u0923 \u092a\u093f\u091b\u0932\u0947 \u090f\u0915 \u0915\u093e \u090f\u0915 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0926\u093f\u0916\u093e\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0915\u0908 \u0915\u0949\u0932\u092e \u092e\u0947\u0902 \u0915\u0948\u0938\u0947 \u0930\u0916\u093e \u091c\u093e\u090f\u0964 from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Resulting PDF Jules Verne text \u092a\u093f\u091b\u0932\u0947 \u091f\u094d\u092f\u0942\u091f\u094b\u0930\u093f\u092f\u0932 \u0938\u0947 \u092e\u0941\u0916\u094d\u092f \u0905\u0902\u0924\u0930 accept_page_break \u0914\u0930 set_col \u0935\u093f\u0927\u093f\u092f\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0939\u0948\u0964 accept_page_break \u0935\u093f\u0927\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u0947 \u0939\u0941\u090f, \u090f\u0915 \u092c\u093e\u0930 \u091c\u092c \u0938\u0947\u0932 \u092a\u0943\u0937\u094d\u0920 \u0915\u0940 \u0928\u093f\u091a\u0932\u0940 \u0938\u0940\u092e\u093e \u0915\u094b \u092a\u093e\u0930 \u0915\u0930 \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0915\u0949\u0932\u092e \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u0940 \u091c\u093e\u0902\u091a \u0915\u0930\u0947\u0917\u093e\u0964 \u092f\u0926\u093f \u092f\u0939 2 \u0938\u0947 \u0915\u092e \u0939\u0948 (\u0939\u092e\u0928\u0947 \u092a\u0943\u0937\u094d\u0920 \u0915\u094b \u0924\u0940\u0928 \u0938\u094d\u0924\u0902\u092d\u094b\u0902 \u092e\u0947\u0902 \u0935\u093f\u092d\u093e\u091c\u093f\u0924 \u0915\u0930\u0928\u093e \u091a\u0941\u0928\u093e \u0939\u0948) \u0924\u094b \u092f\u0939 set_col \u0935\u093f\u0927\u093f \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0947\u0917\u093e, \u0915\u0949\u0932\u092e \u0938\u0902\u0916\u094d\u092f\u093e \u092c\u0922\u093c\u093e\u0928\u093e \u0914\u0930 \u0905\u0917\u0932\u0947 \u0915\u0949\u0932\u092e \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f \u092c\u0926\u0932\u0928\u093e \u0924\u093e\u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0935\u0939\u093e\u0902 \u091c\u093e\u0930\u0940 \u0930\u0939 \u0938\u0915\u0947\u0964 \u090f\u0915 \u092c\u093e\u0930 \u0924\u0940\u0938\u0930\u0947 \u0915\u0949\u0932\u092e \u0915\u0940 \u0928\u093f\u091a\u0932\u0940 \u0938\u0940\u092e\u093e \u0924\u0915 \u092a\u0939\u0941\u0901\u091a \u091c\u093e\u0928\u0947 \u092a\u0930, accept_page_break \u0935\u093f\u0927\u093f \u0930\u0940\u0938\u0947\u091f \u0939\u094b \u091c\u093e\u090f\u0917\u0940 \u0914\u0930 \u092a\u0939\u0932\u0947 \u0915\u0949\u0932\u092e \u092a\u0930 \u0935\u093e\u092a\u0938 \u091c\u093e\u090f\u0917\u0940 \u0914\u0930 \u090f\u0915 \u092a\u0947\u091c \u092c\u094d\u0930\u0947\u0915 \u0915\u094b \u091f\u094d\u0930\u093f\u0917\u0930 \u0915\u0930\u0947\u0917\u0940\u0964 Tuto 5 - \u091f\u0947\u092c\u0932 \u092c\u0928\u093e\u0928\u093e \u092f\u0939 \u091f\u094d\u092f\u0942\u091f\u094b\u0930\u093f\u092f\u0932 \u0938\u092e\u091d\u093e\u090f\u0917\u093e \u0915\u093f \u091f\u0947\u092c\u0932 \u0915\u094b \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u0915\u0948\u0938\u0947 \u092c\u0928\u093e\u092f\u093e \u091c\u093e\u090f\u0964 \u0915\u0941\u091b \u0938\u0930\u0932 \u0938\u092e\u093e\u092f\u094b\u091c\u0928\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0915\u094d\u092f\u093e \u0939\u093e\u0938\u093f\u0932 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948, \u092f\u0939 \u0938\u092e\u091d\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u094b\u0921 \u0924\u0940\u0928 \u0905\u0932\u0917-\u0905\u0932\u0917 \u091f\u0947\u092c\u0932 \u092c\u0928\u093e\u090f\u0917\u093e\u0964 import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Resulting PDF - Countries text \u091a\u0942\u0902\u0915\u093f \u0924\u093e\u0932\u093f\u0915\u093e (Table) \u0915\u0947\u0935\u0932 \u0915\u094b\u0936\u093f\u0915\u093e\u0913\u0902 (Cells) \u0915\u093e \u090f\u0915 \u0938\u0902\u0917\u094d\u0930\u0939 (Collection) \u0939\u0948, \u0907\u0938\u0932\u093f\u090f \u0909\u0928\u092e\u0947\u0902 \u0938\u0947 \u090f\u0915 \u0915\u093e \u0928\u093f\u0930\u094d\u092e\u093e\u0923 \u0915\u0930\u0928\u093e \u0938\u094d\u0935\u093e\u092d\u093e\u0935\u093f\u0915 \u0939\u0948\u0964 \u092a\u0939\u0932\u093e \u0909\u0926\u093e\u0939\u0930\u0923 \u0938\u092c\u0938\u0947 \u092c\u0941\u0928\u093f\u092f\u093e\u0926\u0940 \u0938\u0902\u092d\u0935 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0939\u093e\u0938\u093f\u0932 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948: \u0938\u0930\u0932 \u092b\u093c\u094d\u0930\u0947\u092e\u092f\u0941\u0915\u094d\u0924 \u0915\u094b\u0936\u093f\u0915\u093e\u090f\u0902 (simple framed cells, \u0938\u092d\u0940 \u0938\u092e\u093e\u0928 \u0906\u0915\u093e\u0930 \u0915\u094b\u0936\u093f\u0915\u093e\u090f\u0902 (same sized cells) \u0914\u0930 \u092c\u093e\u090f\u0902 \u0938\u0902\u0930\u0947\u0916\u093f\u0924 \u0915\u094b\u0936\u093f\u0915\u093e\u090f\u0902 (left aligned cells)\u0964 \u092a\u0930\u093f\u0923\u093e\u092e \u0905\u0932\u094d\u092a\u0935\u093f\u0915\u0938\u093f\u0924 \u0939\u0948 \u0932\u0947\u0915\u093f\u0928 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092c\u0939\u0941\u0924 \u091c\u0932\u094d\u0926\u0940 \u0939\u0948\u0964 \u0926\u0942\u0938\u0930\u0940 \u0924\u093e\u0932\u093f\u0915\u093e \u0915\u0941\u091b \u0938\u0941\u0927\u093e\u0930 \u0932\u093e\u0924\u0940 \u0939\u0948: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0915\u0949\u0932\u092e \u0915\u0940 \u0905\u092a\u0928\u0940 \u091a\u094c\u0921\u093c\u093e\u0908 \u0939\u094b\u0924\u0940 \u0939\u0948, \u0936\u0940\u0930\u094d\u0937\u0915 \u0915\u0947\u0902\u0926\u094d\u0930\u093f\u0924 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902 \u0914\u0930 \u0906\u0902\u0915\u0921\u093c\u0947 \u0938\u0939\u0940 \u0938\u0902\u0930\u0947\u0916\u093f\u0924 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964 \u0907\u0938\u0915\u0947 \u0905\u0932\u093e\u0935\u093e, \u0915\u094d\u0937\u0948\u0924\u093f\u091c \u0930\u0947\u0916\u093e\u0913\u0902 \u0915\u094b \u0939\u091f\u093e \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948\u0964 \u092f\u0939 Cell() \u0935\u093f\u0927\u093f \u0915\u0947 \u092c\u0949\u0930\u094d\u0921\u0930 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0938\u0947\u0932 \u0915\u0947 \u0915\u093f\u0928 \u092a\u0915\u094d\u0937\u094b\u0902 \u0915\u094b \u0916\u0940\u0902\u091a\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964 \u092f\u0939\u093e\u0902 \u0939\u092e \u092c\u093e\u090f\u0902 (L) \u0914\u0930 \u0926\u093e\u090f\u0902 (R) \u0935\u093e\u0932\u0947 \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964 \u0905\u092c \u0915\u0947\u0935\u0932 \u0915\u094d\u0937\u0948\u0924\u093f\u091c \u0930\u0947\u0916\u093e \u0915\u0940 \u0924\u093e\u0932\u093f\u0915\u093e (Table) \u0915\u094b Finish \u0915\u0930\u0928\u0947 \u0915\u0940 \u0938\u092e\u0938\u094d\u092f\u093e \u092c\u0928\u0940 \u0939\u0941\u0908 \u0939\u0948\u0964 \u0907\u0938\u0947 \u0939\u0932 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0926\u094b \u0938\u0902\u092d\u093e\u0935\u0928\u093e\u090f\u0902 \u0939\u0948\u0902: \u0932\u0942\u092a \u092e\u0947\u0902 \u0905\u0902\u0924\u093f\u092e \u092a\u0902\u0915\u094d\u0924\u093f \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902, \u091c\u093f\u0938 \u0938\u094d\u0925\u093f\u0924\u093f \u092e\u0947\u0902 \u0939\u092e \u0938\u0940\u092e\u093e \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947 \u0932\u093f\u090f LRB \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902; \u092f\u093e \u091c\u0948\u0938\u093e \u0915\u093f \u092f\u0939\u093e\u0902 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0932\u0942\u092a \u0916\u0924\u094d\u092e \u0939\u094b\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926 \u0932\u093e\u0907\u0928 \u091c\u094b\u0921\u093c\u0947\u0902\u0964 \u0924\u0940\u0938\u0930\u0940 \u0924\u093e\u0932\u093f\u0915\u093e \u0926\u0942\u0938\u0930\u0947 \u0915\u0947 \u0938\u092e\u093e\u0928 \u0939\u0948 \u0932\u0947\u0915\u093f\u0928 \u0930\u0902\u0917\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u0940 \u0939\u0948\u0964 Fill, \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0914\u0930 \u0932\u093e\u0907\u0928 \u0930\u0902\u0917 \u092c\u0938 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0939\u0948\u0902\u0964 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915(Alternate) \u0930\u0942\u092a \u0938\u0947 \u092a\u093e\u0930\u0926\u0930\u094d\u0936\u0940 \u0914\u0930 \u092d\u0930\u0940 \u0939\u0941\u0908 \u0915\u094b\u0936\u093f\u0915\u093e\u0913\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092a\u0902\u0915\u094d\u0924\u093f\u092f\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0930\u0902\u0917 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 Tuto 6 - \u0932\u093f\u0902\u0915 \u092c\u0928\u093e\u0928\u093e \u0914\u0930 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0936\u0948\u0932\u093f\u092f\u094b\u0902 \u0915\u094b \u092e\u093f\u0932\u093e\u0928\u093e \u092f\u0939 \u091f\u094d\u092f\u0942\u091f\u094b\u0930\u093f\u092f\u0932 \u092a\u0940\u0921\u0940\u090f\u092b \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0947 \u0905\u0902\u0926\u0930 \u0932\u093f\u0902\u0915 \u0921\u093e\u0932\u0928\u0947 \u0915\u0947 \u0938\u093e\u0925-\u0938\u093e\u0925 \u092c\u093e\u0939\u0930\u0940 \u0938\u094d\u0930\u094b\u0924\u094b\u0902 \u0915\u0947 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0915\u0908 \u0924\u0930\u0940\u0915\u094b\u0902 \u0915\u0940 \u0935\u094d\u092f\u093e\u0916\u094d\u092f\u093e \u0915\u0930\u0947\u0917\u093e\u0964 \u092f\u0939 \u0915\u0908 \u0924\u0930\u0940\u0915\u0947 \u092d\u0940 \u0926\u093f\u0916\u093e\u090f\u0917\u093e \u091c\u093f\u0938\u0938\u0947 \u0939\u092e \u090f\u0915 \u0939\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0947 \u092d\u0940\u0924\u0930 \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0936\u0948\u0932\u093f\u092f\u094b\u0902, (\u092c\u094b\u0932\u094d\u0921, \u0907\u091f\u0948\u0932\u093f\u0915, \u0905\u0902\u0921\u0930\u0932\u093e\u0907\u0928) \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Resulting PDF - fpdf2-logo \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092f\u0939\u093e\u0902 \u0926\u093f\u0916\u093e\u092f\u093e \u0917\u092f\u093e \u0928\u092f\u093e \u0924\u0930\u0940\u0915\u093e write() \u0939\u0948\u0964 \u092f\u0939 \u092c\u0939\u0941\u0924 \u0939\u0926 \u0924\u0915 multi_cell() \u0915\u0947 \u0938\u092e\u093e\u0928 \u0939\u0948, \u092e\u0941\u0916\u094d\u092f \u0905\u0902\u0924\u0930 \u092f\u0939 \u0939\u0948: - \u092a\u0902\u0915\u094d\u0924\u093f \u0915\u093e \u0905\u0902\u0924 \u0926\u093e\u090f\u0902 \u0939\u093e\u0936\u093f\u092f\u0947 \u092a\u0930 \u0939\u0948 \u0914\u0930 \u0905\u0917\u0932\u0940 \u092a\u0902\u0915\u094d\u0924\u093f \u092c\u093e\u090f\u0902 \u0939\u093e\u0936\u093f\u092f\u0947 \u092a\u0930 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u0940 \u0939\u0948\u0964 - \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u092a\u093e\u0920 \u0915\u0947 \u0905\u0902\u0924 \u092e\u0947\u0902 \u091a\u0932\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u0907\u0938\u0932\u093f\u090f \u0935\u093f\u0927\u093f \u0939\u092e\u0947\u0902 \u092a\u093e\u0920 \u0915\u093e \u090f\u0915 \u0939\u093f\u0938\u094d\u0938\u093e \u0932\u093f\u0916\u0928\u0947, \u092b\u093c\u0949\u0928\u094d\u091f \u0936\u0948\u0932\u0940 \u0915\u094b \u092c\u0926\u0932\u0928\u0947 \u0914\u0930 \u0920\u0940\u0915 \u0909\u0938\u0940 \u0938\u094d\u0925\u093e\u0928 \u0938\u0947 \u091c\u093e\u0930\u0940 \u0930\u0916\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u0940 \u0939\u0948 \u091c\u0939\u093e\u0902 \u0938\u0947 \u0939\u092e\u0928\u0947 \u091b\u094b\u0921\u093c\u093e \u0925\u093e\u0964 \u0926\u0942\u0938\u0930\u0940 \u0913\u0930, \u0907\u0938\u0915\u093e \u092e\u0941\u0916\u094d\u092f \u0926\u094b\u0937 \u092f\u0939 \u0939\u0948 \u0915\u093f \u0939\u092e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u091c\u0938\u094d\u091f\u093f\u092b\u093e\u0908 \u0928\u0939\u0940\u0902 \u0915\u0930 \u0938\u0915\u0924\u0947 \u091c\u0948\u0938\u0947 \u0939\u092e multi_cell() \u092e\u0947\u0925\u0921 \u0915\u0947 \u0938\u093e\u0925 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u092a\u0939\u0932\u0947 \u092a\u0943\u0937\u094d\u0920 \u092e\u0947\u0902, \u0939\u092e\u0928\u0947 \u0907\u0938 \u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f \u0915\u0947 \u0932\u093f\u090f write() \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e\u0964 \u0935\u093e\u0915\u094d\u092f \u0915\u0940 \u0936\u0941\u0930\u0941\u0906\u0924 \u0928\u093f\u092f\u092e\u093f\u0924 \u0936\u0948\u0932\u0940 \u0915\u0947 \u092a\u093e\u0920 \u092e\u0947\u0902 \u0932\u093f\u0916\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948, \u092b\u093f\u0930 set_font() \u0935\u093f\u0927\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947, \u0939\u092e\u0928\u0947 \u0930\u0947\u0916\u093e\u0902\u0915\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0938\u094d\u0935\u093f\u091a \u0915\u093f\u092f\u093e \u0914\u0930 \u0935\u093e\u0915\u094d\u092f \u0915\u094b \u0938\u092e\u093e\u092a\u094d\u0924 \u0915\u093f\u092f\u093e\u0964 \u0926\u0942\u0938\u0930\u0947 \u092a\u0943\u0937\u094d\u0920 \u0915\u0940 \u0913\u0930 \u0907\u0936\u093e\u0930\u093e \u0915\u0930\u0924\u0947 \u0939\u0941\u090f \u090f\u0915 \u0906\u0902\u0924\u0930\u093f\u0915 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e\u0928\u0947 add_link() \u0935\u093f\u0927\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e, \u091c\u094b \u090f\u0915 \u0915\u094d\u0932\u093f\u0915 \u0915\u0930\u0928\u0947 \u092f\u094b\u0917\u094d\u092f \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u092c\u0928\u093e\u0924\u093e \u0939\u0948 \u091c\u093f\u0938\u0947 \u0939\u092e\u0928\u0947 \"Link\" \u0928\u093e\u092e \u0926\u093f\u092f\u093e \u0939\u0948 \u091c\u094b \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0947 \u092d\u0940\u0924\u0930 \u0915\u093f\u0938\u0940 \u0905\u0928\u094d\u092f \u0938\u094d\u0925\u093e\u0928 \u092a\u0930 \u0928\u093f\u0930\u094d\u0926\u0947\u0936\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0926\u0942\u0938\u0930\u0947 \u092a\u0943\u0937\u094d\u0920 \u092a\u0930, \u0939\u092e\u0928\u0947 \u0905\u092d\u0940-\u0905\u092d\u0940 \u092c\u0928\u093e\u090f \u0917\u090f \u0932\u093f\u0902\u0915 \u0915\u0947 \u0932\u093f\u090f \u0917\u0902\u0924\u0935\u094d\u092f \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f set_link() \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e\u0964 Image \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092c\u093e\u0939\u0930\u0940 \u0932\u093f\u0902\u0915 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e\u0928\u0947 image() \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e\u0964 \u0935\u093f\u0927\u093f \u092e\u0947\u0902 \u090f\u0915 \u0932\u093f\u0902\u0915 \u0915\u094b \u0907\u0938\u0915\u0947 \u0924\u0930\u094d\u0915\u094b\u0902 \u092e\u0947\u0902 \u0938\u0947 \u090f\u0915 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u093e\u0930\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u093e \u0935\u093f\u0915\u0932\u094d\u092a \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u0932\u093f\u0902\u0915 \u0906\u0902\u0924\u0930\u093f\u0915 \u092f\u093e \u092c\u093e\u0939\u0930\u0940 \u0926\u094b\u0928\u094b\u0902 \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u090f\u0915 \u0935\u093f\u0915\u0932\u094d\u092a \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902, \u092b\u093c\u0949\u0928\u094d\u091f \u0936\u0948\u0932\u0940 \u092c\u0926\u0932\u0928\u0947 \u0914\u0930 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0926\u0942\u0938\u0930\u093e \u0935\u093f\u0915\u0932\u094d\u092a write_html() \u092a\u0926\u094d\u0927\u0924\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e \u0939\u0948\u0964 \u092f\u0939 \u090f\u0915 HTML \u092a\u093e\u0930\u094d\u0938\u0930 \u0939\u0948, \u091c\u094b \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u091c\u094b\u0921\u093c\u0928\u0947, \u092b\u093c\u0949\u0928\u094d\u091f \u0936\u0948\u0932\u0940 \u092c\u0926\u0932\u0928\u0947 \u0914\u0930 html \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948\u0964","title":"\u0939\u093f\u0902\u0926\u0940 \u092e\u0947\u0902 \u091f\u094d\u092f\u0942\u091f\u094b\u0930\u093f\u092f\u0932"},{"location":"Tutorial-%E0%A4%B9%E0%A4%BF%E0%A4%82%E0%A4%A6%E0%A5%80.html#tuto-1-","text":"\u0906\u0907\u090f \u0915\u094d\u0932\u093e\u0938\u093f\u0915 \u0909\u0926\u093e\u0939\u0930\u0923 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0915\u0930\u0947\u0902: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Resulting PDF \u0932\u093e\u0907\u092c\u094d\u0930\u0947\u0930\u0940 \u092b\u093c\u093e\u0907\u0932 \u0915\u094b \u0936\u093e\u092e\u093f\u0932 \u0915\u0930\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926, \u0939\u092e \u090f\u0915 FPDF \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u092c\u0928\u093e\u0924\u0947 \u0939\u0948\u0902\u0964 FPDF \u0915\u0902\u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091f\u0930 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u092f\u0939\u093e\u0902 \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u092e\u093e\u0928\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948: \u092a\u0943\u0937\u094d\u0920 A4 \u092a\u094b\u0930\u094d\u091f\u094d\u0930\u0947\u091f \u092e\u0947\u0902 \u0939\u0948\u0902 \u0914\u0930 \u092e\u093e\u092a \u0907\u0915\u093e\u0908 \u092e\u093f\u0932\u0940\u092e\u0940\u091f\u0930 \u0939\u0948\u0964 \u0907\u0938\u0915\u0947 \u0938\u093e\u0925 \u0938\u094d\u092a\u0937\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0928\u093f\u092e\u094d\u0928\u0932\u093f\u0916\u093f\u0924 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u093f\u092f\u0947 \u091c\u093e \u0938\u0915\u0924\u0947 \u0939\u0948: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) \u092a\u0940\u0921\u0940\u090f\u092b \u0915\u094b \u0932\u0948\u0902\u0921\u0938\u094d\u0915\u0947\u092a \u092e\u094b\u0921 \u092e\u0947\u0902 \u0938\u0947\u091f \u0915\u0930\u0928\u093e \u0938\u0902\u092d\u0935 \u0939\u0948 ( L ) \u092f\u093e \u0905\u0928\u094d\u092f \u092a\u0947\u091c \u092a\u094d\u0930\u093e\u0930\u0942\u092a\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f (\u091c\u0948\u0938\u0947 \u0915\u093f Letter \u0924\u0925\u093e Legal ) \u0914\u0930 \u0907\u0915\u093e\u0907\u092f\u094b\u0902 \u0915\u094b \u092e\u093e\u092a\u0947\u0902 ( pt , cm , in )\u0964 \u092b\u093f\u0932\u0939\u093e\u0932 \u0915\u094b\u0908 \u092a\u0947\u091c \u0928\u0939\u0940\u0902 \u0939\u0948, \u0907\u0938\u0932\u093f\u090f \u0939\u092e\u0947\u0902 \u0907\u0938\u092e\u0947\u0902 \u090f\u0915 add_page \u091c\u094b\u0921\u093c\u0928\u093e \u0939\u094b\u0917\u093e \u0964 \u092e\u0942\u0932 \u090a\u092a\u0930\u0940-\u092c\u093e\u090f\u0901 \u0915\u094b\u0928\u0947 \u092e\u0947\u0902 \u0939\u0948 \u0914\u0930 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0938\u0940\u092e\u093e\u0913\u0902 \u0938\u0947 1 cm \u092a\u0930 \u0930\u0916\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948; \u092e\u093e\u0930\u094d\u091c\u093f\u0928 \u0915\u094b set_margins \u0915\u0947 \u0938\u093e\u0925 \u092c\u0926\u0932\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948 \u0964 \u0907\u0938\u0938\u0947 \u092a\u0939\u0932\u0947 \u0915\u093f \u0939\u092e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930 \u0938\u0915\u0947\u0902, \u0907\u0938\u0915\u0947 \u0938\u093e\u0925 \u090f\u0915 \u092b\u0949\u0928\u094d\u091f \u0915\u093e \u091a\u092f\u0928 set_font \u0938\u0947 \u0915\u0930\u0928\u093e \u0905\u0928\u093f\u0935\u093e\u0930\u094d\u092f \u0939\u0948, \u0905\u0928\u094d\u092f\u0925\u093e \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c (Document) \u0905\u092e\u093e\u0928\u094d\u092f \u0939\u094b\u0917\u093e\u0964 \u0939\u092e Helvetica bold 16 \u091a\u0941\u0928\u0924\u0947 \u0939\u0948\u0902: pdf . set_font ( 'helvetica' , 'B' , 16 ) \u0939\u092e I \u0915\u0947 \u0938\u093e\u0925 \u0907\u091f\u0948\u0932\u093f\u0915 (Italic) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902, U \u0915\u0947 \u0938\u093e\u0925 \u0930\u0947\u0916\u093e\u0902\u0915\u093f\u0924 (Underlined) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902 \u092f\u093e \u090f\u0915 \u0928\u093f\u092f\u092e\u093f\u0924 \u092b\u093c\u0949\u0928\u094d\u091f \u090f\u0915 \u0916\u093e\u0932\u0940 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0915\u0947 \u0938\u093e\u0925 (\u092f\u093e \u0915\u094b\u0908 \u0938\u0902\u092f\u094b\u091c\u0928) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u0927\u094d\u092f\u093e\u0928 \u0926\u0947\u0902 \u0915\u093f \u092b\u093c\u0949\u0928\u094d\u091f \u0915\u093e \u0906\u0915\u093e\u0930 \u0905\u0902\u0915\u094b\u0902 \u092e\u0947\u0902 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u092e\u093f\u0932\u0940\u092e\u0940\u091f\u0930 \u092e\u0947\u0902 \u0928\u0939\u0940\u0902 (\u092f\u093e \u0905\u0928\u094d\u092f \u0909\u092a\u092f\u094b\u0917\u0915\u0930\u094d\u0924\u093e \u0907\u0915\u093e\u0908); \u092f\u0939 \u090f\u0915\u092e\u093e\u0924\u094d\u0930 \u0905\u092a\u0935\u093e\u0926 \u0939\u0948\u0964 \u0905\u0928\u094d\u092f \u092c\u093f\u0932\u094d\u091f-\u0907\u0928 \u092b\u0949\u0928\u094d\u091f Times , Courier , Symbol \u0914\u0930 ZapfDingbats \u0939\u0948\u0902\u0964 \u0905\u092c \u0939\u092e cell \u0915\u0947 \u0938\u093e\u0925 cell print \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 \u090f\u0915 \u0938\u0947\u0932 (cell) \u090f\u0915 \u0906\u092f\u0924\u093e\u0915\u093e\u0930 \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u0939\u0948, \u0938\u0902\u092d\u0935\u0924\u0903 \u0924\u0948\u092f\u093e\u0930 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0915\u0941\u091b \u092a\u093e\u0920 \u0939\u0948\u0964 \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u092e\u0947\u0902 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0939\u092e \u0907\u0938\u0915\u0947 \u0906\u092f\u093e\u092e, \u0907\u0938\u0915\u0947 \u092a\u093e\u0920 (\u0915\u0947\u0902\u0926\u094d\u0930\u093f\u0924 \u092f\u093e \u0938\u0902\u0930\u0947\u0916\u093f\u0924) \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0905\u0917\u0930 \u0938\u0940\u092e\u093e\u090f\u0902 \u0916\u0940\u0902\u091a\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f,\u0914\u0930 \u091c\u0939\u093e\u0902 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u0907\u0938\u0915\u0947 \u092c\u093e\u0926 \u091a\u0932\u0924\u0940 \u0939\u0948 (\u0926\u093e\u0908\u0902 \u0913\u0930, \u0928\u0940\u091a\u0947 \u092f\u093e \u0905\u0917\u0932\u0940 \u092a\u0902\u0915\u094d\u0924\u093f \u0915\u0940 \u0936\u0941\u0930\u0941\u0906\u0924 \u092e\u0947\u0902)\u0964 \u090f\u0915 \u092b\u094d\u0930\u0947\u092e \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e \u092f\u0939 \u0915\u0930\u0947\u0902\u0917\u0947: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) \u0915\u0947\u0928\u094d\u0926\u094d\u0930\u093f\u0924 \u092a\u093e\u0920 (centered text) \u0915\u0947 \u0938\u093e\u0925 \u0907\u0938\u0915\u0947 \u0906\u0917\u0947 \u090f\u0915 \u0928\u092f\u093e \u0938\u0947\u0932 (cell) \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0914\u0930 \u0905\u0917\u0932\u0940 \u092a\u0902\u0915\u094d\u0924\u093f \u092a\u0930 \u091c\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e \u0915\u0930\u0947\u0902\u0917\u0947: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) \u091f\u093f\u092a\u094d\u092a\u0923\u0940 : \u0932\u093e\u0907\u0928 \u092c\u094d\u0930\u0947\u0915 ln \u0915\u0947 \u0938\u093e\u0925 \u092d\u0940 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0902\u0964 \u0907\u0938 \u0935\u093f\u0927\u093f \u092c\u094d\u0930\u0947\u0915 \u0915\u0940 \u090a\u0902\u091a\u093e\u0908 \u0915\u0947 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u0940 \u0939\u0948\u0964 \u0905\u0902\u0924 \u092e\u0947\u0902, \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u094b \u092c\u0902\u0926 \u0915\u0930 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0914\u0930 \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u093f\u090f \u0917\u090f \u092b\u093c\u093e\u0907\u0932 \u092a\u0925 \u0915\u0947 \u0924\u0939\u0924 \u0938\u0939\u0947\u091c\u093e \u0917\u092f\u093e \u0939\u0948 output .\u092c\u093f\u0928\u093e \u0915\u093f\u0938\u0940 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947, output() PDF bytearray \u092c\u092b\u093c\u0930 \u0932\u094c\u091f\u093e\u0924\u093e \u0939\u0948\u0964","title":"Tuto 1 - \u092e\u0942\u0932 \u0909\u0926\u093e\u0939\u0930\u0923"},{"location":"Tutorial-%E0%A4%B9%E0%A4%BF%E0%A4%82%E0%A4%A6%E0%A5%80.html#tuto-2-header-footer-page-break-image","text":"\u092f\u0939\u093e\u0901 \u0936\u0940\u0930\u094d\u0937 \u0932\u0947\u0916 (Header), \u092a\u093e\u0926\u0932\u0947\u0916 (Footer) \u0914\u0930 \u0932\u094b\u0917\u094b (Logo) \u0915\u0947 \u0938\u093e\u0925 \u0926\u094b \u092a\u0943\u0937\u094d\u0920 \u0915\u093e \u0909\u0926\u093e\u0939\u0930\u0923 \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Resulting PDF \u092f\u0939 \u0909\u0926\u093e\u0939\u0930\u0923 header \u0914\u0930 footer \u0915\u094b \u0938\u0902\u0938\u093e\u0927\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f header \u0914\u0930 footer \u0932\u0947\u0916 \u0935\u093f\u0927\u093f\u092f\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0909\u0928\u094d\u0939\u0947\u0902 \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 (automatically) \u092c\u0941\u0932\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0935\u0947 \u092a\u0939\u0932\u0947 \u0938\u0947 \u0939\u0940 FPDF \u0935\u0930\u094d\u0917 \u092e\u0947\u0902 \u092e\u094c\u091c\u0942\u0926 \u0939\u0948\u0902 \u0932\u0947\u0915\u093f\u0928 \u0915\u0941\u091b \u0928\u0939\u0940\u0902 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0907\u0938\u0932\u093f\u090f \u0939\u092e\u0947\u0902 class \u0915\u093e \u0935\u093f\u0938\u094d\u0924\u093e\u0930 \u0915\u0930\u0928\u093e \u0939\u094b\u0917\u093e \u0914\u0930 \u0909\u0928\u094d\u0939\u0947\u0902 override \u0915\u0930\u0928\u093e \u0939\u094b\u0917\u093e\u0964 Logo \u0915\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0915\u0947 image \u0935\u093f\u0927\u093f \u0938\u0947 \u0907\u0938\u0915\u093e \u090a\u092a\u0930\u0940-\u092c\u093e\u090f\u0901 \u0915\u094b\u0928\u093e \u0914\u0930 \u0907\u0938\u0915\u0940 \u091a\u094c\u0921\u093c\u093e\u0908 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0915\u0947 \u092e\u0941\u0926\u094d\u0930\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u091b\u0935\u093f \u0905\u0928\u0941\u092a\u093e\u0924 \u0915\u093e \u0938\u092e\u094d\u092e\u093e\u0928 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u090a\u0902\u091a\u093e\u0908 \u0915\u0940 \u0917\u0923\u0928\u093e \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u092a\u0943\u0937\u094d\u0920 \u0938\u0902\u0916\u094d\u092f\u093e (Page number) \u092e\u0941\u0926\u094d\u0930\u093f\u0924 (print) \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0938\u0947\u0932 \u091a\u094c\u0921\u093c\u093e\u0908 (cell width) \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u090f\u0915 \u0936\u0942\u0928\u094d\u092f \u092e\u093e\u0928(null value) \u092a\u093e\u0938 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0907\u0938\u0915\u093e \u092e\u0924\u0932\u092c \u0939\u0948 \u0915\u093f \u0938\u0947\u0932 \u0915\u094b \u092a\u0947\u091c \u0915\u0947 \u0926\u093e\u0939\u093f\u0928\u0947 \u0939\u093e\u0936\u093f\u092f\u0947 (right margin) \u0924\u0915 \u092c\u0922\u093c\u093e\u092f\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f; \u092f\u0939 \u092a\u093e\u0920 \u0915\u094b \u0915\u0947\u0902\u0926\u094d\u0930(center) \u092e\u0947\u0902 \u0930\u0916\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0906\u0938\u093e\u0928 \u0939\u0948\u0964 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092a\u0943\u0937\u094d\u0920 \u0938\u0902\u0916\u094d\u092f\u093e page_no \u0935\u093f\u0927\u093f \u0926\u094d\u0935\u093e\u0930\u093e \u0935\u093e\u092a\u0938 \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948; \u092a\u0943\u0937\u094d\u0920\u094b\u0902 \u0915\u0940 \u0915\u0941\u0932 \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u0947 \u0932\u093f\u090f, \u092f\u0939 \u0935\u093f\u0936\u0947\u0937 \u092e\u0942\u0932\u094d\u092f {nb} \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u093f\u0938\u0947 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u092c\u0902\u0926 \u0939\u094b\u0928\u0947 \u092a\u0930 \u092a\u094d\u0930\u0924\u093f\u0938\u094d\u0925\u093e\u092a\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u090f\u0917\u093e \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948)\u0964 set_y \u092a\u0926\u094d\u0927\u0924\u093f \u0915\u0947 \u0909\u092a\u092f\u094b\u0917 \u092a\u0930 \u0927\u094d\u092f\u093e\u0928 \u0926\u0947\u0902 \u091c\u094b \u092a\u0943\u0937\u094d\u0920 \u092e\u0947\u0902 \u090f\u0915 \u092a\u0942\u0930\u094d\u0923 \u0938\u094d\u0925\u093e\u0928 \u092a\u0930 \u0938\u094d\u0925\u093f\u0924\u093f \u0938\u0947\u091f \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948, \u090a\u092a\u0930 \u092f\u093e \u0928\u0940\u091a\u0947 \u0938\u0947 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092f\u0939\u093e\u0901 \u090f\u0915 \u0914\u0930 \u0926\u093f\u0932\u091a\u0938\u094d\u092a \u0935\u093f\u0936\u0947\u0937\u0924\u093e \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948: the automatic page breaking. \u091c\u0948\u0938\u0947 \u0939\u0940 \u0915\u094b\u0908 \u0938\u0947\u0932 \u092a\u0943\u0937\u094d\u0920 \u092e\u0947\u0902 \u090f\u0915 \u0938\u0940\u092e\u093e \u0915\u094b \u092a\u093e\u0930 \u0915\u0930\u0947\u0917\u093e (\u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 \u0928\u0940\u091a\u0947 \u0938\u0947 2 \u0938\u0947\u0902\u091f\u0940\u092e\u0940\u091f\u0930 \u092a\u0930), \u090f\u0915 \u092c\u094d\u0930\u0947\u0915 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 \u092b\u093c\u0949\u0928\u094d\u091f \u0915\u094b \u092a\u0941\u0928\u0930\u094d\u0938\u094d\u0925\u093e\u092a\u093f\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0939\u093e\u0932\u093e\u0902\u0915\u093f \u0936\u0940\u0930\u094d\u0937 \u0932\u0947\u0916 (Header) \u0914\u0930 \u092a\u093e\u0926 \u0932\u0947\u0916 (Footer) \u0905\u092a\u0928\u0947 \u0938\u094d\u0935\u092f\u0902 \u0915\u0947 \u092b\u093c\u0949\u0928\u094d\u091f ( Helvetica ) \u0915\u093e \u091a\u092f\u0928 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, body Times \u0915\u0947 \u0938\u093e\u0925 \u091c\u093e\u0930\u0940 \u0930\u0939\u0924\u093e \u0939\u0948\u0964 \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u092c\u0939\u093e\u0932\u0940 \u0915\u093e \u092f\u0939 \u0924\u0902\u0924\u094d\u0930 \u0930\u0902\u0917\u094b\u0902 \u0914\u0930 \u0930\u0947\u0916\u093e \u0915\u0940 \u091a\u094c\u0921\u093c\u093e\u0908 \u092a\u0930 \u092d\u0940 \u0932\u093e\u0917\u0942 \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u092a\u0943\u0937\u094d\u0920 \u0935\u093f\u0930\u093e\u092e \u0915\u094b \u091f\u094d\u0930\u093f\u0917\u0930 \u0915\u0930\u0928\u0947 \u0935\u093e\u0932\u0940 \u0938\u0940\u092e\u093e \u0915\u094b set_auto_page_break \u0915\u0947 \u0938\u093e\u0925 \u0938\u0947\u091f \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964","title":"Tuto 2 - \u0936\u0940\u0930\u094d\u0937\u0932\u0947\u0916 (Header), \u092a\u093e\u0926 \u0932\u0947\u0916 (Footer), \u092a\u0943\u0937\u094d\u0920 \u0935\u093f\u0930\u093e\u092e (Page Break) \u0914\u0930 \u091b\u0935\u093f (Image)"},{"location":"Tutorial-%E0%A4%B9%E0%A4%BF%E0%A4%82%E0%A4%A6%E0%A5%80.html#tuto-3-","text":"\u0906\u0907\u090f \u090f\u0915 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0938\u093e\u0925 \u091c\u093e\u0930\u0940 \u0930\u0916\u0947\u0902 \u091c\u094b Justified \u0905\u0928\u0941\u091a\u094d\u091b\u0947\u0926\u094b\u0902 \u0915\u094b \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u092f\u0939 \u0930\u0902\u0917\u094b\u0902 \u0915\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u094b \u092d\u0940 \u0926\u0930\u094d\u0936\u093e\u0924\u093e \u0939\u0948\u0964 from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Resulting PDF Jules Verne text get_string_width \u0935\u093f\u0927\u093f \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u092b\u093c\u0949\u0928\u094d\u091f \u092e\u0947\u0902 \u090f\u0915 \u0938\u094d\u091f\u094d\u0930\u093f\u0902\u0917 \u0915\u0940 \u0932\u0902\u092c\u093e\u0908 \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u0940 \u0939\u0948, \u091c\u093f\u0938\u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0936\u0940\u0930\u094d\u0937\u0915 \u0915\u0947 \u0906\u0938\u092a\u093e\u0938 \u0915\u0947 \u092b\u094d\u0930\u0947\u092e \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f \u0914\u0930 \u091a\u094c\u0921\u093c\u093e\u0908 \u0915\u0940 \u0917\u0923\u0928\u093e \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092f\u0939\u093e\u0902 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u092b\u093f\u0930 \u0930\u0902\u0917 \u0938\u0947\u091f \u0915\u093f\u090f \u091c\u093e\u0924\u0947 \u0939\u0948\u0902 ( set_draw_color , \u0938\u0947\u091f \u092b\u093f\u0932 \u0915\u0932\u0930 \u0914\u0930 \u0938\u0947\u091f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0932\u0930 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947) \u0914\u0930 \u0932\u093e\u0907\u0928 \u0915\u0940 \u092e\u094b\u091f\u093e\u0908 \u0938\u0947\u091f\u0932\u093e\u0907\u0928 \u091a\u094c\u0921\u093c\u093e\u0908 \u0915\u0947 \u0938\u093e\u0925 1 \u092e\u093f\u092e\u0940 (\u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 0.2 \u0915\u0947 \u0916\u093f\u0932\u093e\u092b) \u092a\u0930 \u0938\u0947\u091f \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u092b\u093f\u0930 \u0930\u0902\u0917 \u0938\u0947\u091f \u0915\u093f\u090f \u091c\u093e\u0924\u0947 \u0939\u0948\u0902 ( set_draw_color , set_fill_color \u0914\u0930 set_text_color \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947) \u0914\u0930 \u0932\u093e\u0907\u0928 \u0915\u0940 \u092e\u094b\u091f\u093e\u0908 set_line_width \u0915\u0947 \u0938\u093e\u0925 1 \u092e\u093f\u092e\u0940 (\u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 0.2 \u0915\u0947 \u0935\u093f\u0930\u0941\u0926\u094d\u0927) \u092a\u0930 \u0938\u0947\u091f \u0915\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u0905\u0902\u0924 \u092e\u0947\u0902, \u0939\u092e \u0938\u0947\u0932 \u0915\u094b \u0906\u0909\u091f\u092a\u0941\u091f \u0915\u0930\u0924\u0947 \u0939\u0948\u0902 (\u0905\u0902\u0924\u093f\u092e \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947 true \u0939\u094b\u0928\u0947 \u0938\u0947 \u0939\u092e\u0947 \u092a\u0924\u093e \u091a\u0932\u0924\u093e \u0939\u0948 \u0915\u093f \u092a\u0943\u0937\u094d\u0920\u092d\u0942\u092e\u093f \u0915\u094b \u092d\u0930\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f)\u0964 \u092a\u0948\u0930\u093e\u0917\u094d\u0930\u093e\u092b \u0915\u094b \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0907\u0938\u094d\u0924\u0947\u092e\u093e\u0932 \u0915\u0940 \u091c\u093e\u0928\u0947 \u0935\u093e\u0932\u0940 \u0935\u093f\u0927\u093f multi_cell \u0939\u0948\u0964 \u0939\u0930 \u092c\u093e\u0930 \u091c\u092c \u0915\u094b\u0908 \u0932\u093e\u0907\u0928 cell \u0915\u0947 \u0926\u093e\u0939\u093f\u0928\u0947 \u091b\u094b\u0930 \u0924\u0915 \u092a\u0939\u0941\u0901\u091a\u0924\u0940 \u0939\u0948 \u092f\u093e carriage return \u0915\u0948\u0930\u0947\u0915\u094d\u091f\u0930 \u092e\u093f\u0932\u0924\u093e \u0939\u0948, \u0924\u094b \u090f\u0915 \u0932\u093e\u0907\u0928 \u092c\u094d\u0930\u0947\u0915 \u091c\u093e\u0930\u0940 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0914\u0930 current cell \u0915\u0947 \u0924\u0939\u0924 \u090f\u0915 \u0928\u092f\u093e \u0938\u0947\u0932 \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0930\u0942\u092a \u0938\u0947 \u092c\u0928\u093e\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 Text \u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0930\u0942\u092a \u0938\u0947 Justified \u0939\u0948\u0964 \u0926\u094b \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0917\u0941\u0923 \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0939\u0948\u0902: \u0936\u0940\u0930\u094d\u0937\u0915 ( set_title ) \u0914\u0930 \u0932\u0947\u0916\u0915 ( set_author ). \u0917\u0941\u0923\u094b\u0902 \u0915\u094b \u0926\u094b \u0924\u0930\u0940\u0915\u094b\u0902 \u0938\u0947 \u0926\u0947\u0916\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u0938\u092c\u0938\u0947 \u092a\u0939\u0932\u0947 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u094b \u0938\u0940\u0927\u0947 \u090f\u0915\u094d\u0930\u094b\u092c\u0947\u091f \u0930\u0940\u0921\u0930 \u0915\u0947 \u0938\u093e\u0925 \u0916\u094b\u0932\u0928\u093e \u0939\u0948, \u092b\u093c\u093e\u0907\u0932 \u092e\u0947\u0928\u0942 \u092a\u0930 \u091c\u093e\u090f\u0901 \u0914\u0930 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0917\u0941\u0923 \u0935\u093f\u0915\u0932\u094d\u092a \u091a\u0941\u0928\u0947\u0902\u0964 \u0926\u0942\u0938\u0930\u093e, \u092a\u094d\u0932\u0917-\u0907\u0928 \u0938\u0947 \u092d\u0940 \u0909\u092a\u0932\u092c\u094d\u0927 \u0939\u0948, \u0930\u093e\u0907\u091f-\u0915\u094d\u0932\u093f\u0915 \u0915\u0930\u0928\u093e \u0914\u0930 \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0917\u0941\u0923 \u091a\u0941\u0928\u0928\u093e \u0939\u0948\u0964","title":"Tuto 3 - \u0932\u093e\u0907\u0928 \u092c\u094d\u0930\u0947\u0915 \u0914\u0930 \u0930\u0902\u0917"},{"location":"Tutorial-%E0%A4%B9%E0%A4%BF%E0%A4%82%E0%A4%A6%E0%A5%80.html#tuto-4-","text":"\u092f\u0939 \u0909\u0926\u093e\u0939\u0930\u0923 \u092a\u093f\u091b\u0932\u0947 \u090f\u0915 \u0915\u093e \u090f\u0915 \u092a\u094d\u0930\u0915\u093e\u0930 \u0939\u0948, \u091c\u093f\u0938\u092e\u0947\u0902 \u0926\u093f\u0916\u093e\u092f\u093e \u0917\u092f\u093e \u0939\u0948 \u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u0915\u0908 \u0915\u0949\u0932\u092e \u092e\u0947\u0902 \u0915\u0948\u0938\u0947 \u0930\u0916\u093e \u091c\u093e\u090f\u0964 from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Resulting PDF Jules Verne text \u092a\u093f\u091b\u0932\u0947 \u091f\u094d\u092f\u0942\u091f\u094b\u0930\u093f\u092f\u0932 \u0938\u0947 \u092e\u0941\u0916\u094d\u092f \u0905\u0902\u0924\u0930 accept_page_break \u0914\u0930 set_col \u0935\u093f\u0927\u093f\u092f\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0939\u0948\u0964 accept_page_break \u0935\u093f\u0927\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u0947 \u0939\u0941\u090f, \u090f\u0915 \u092c\u093e\u0930 \u091c\u092c \u0938\u0947\u0932 \u092a\u0943\u0937\u094d\u0920 \u0915\u0940 \u0928\u093f\u091a\u0932\u0940 \u0938\u0940\u092e\u093e \u0915\u094b \u092a\u093e\u0930 \u0915\u0930 \u091c\u093e\u0924\u093e \u0939\u0948, \u0924\u094b \u092f\u0939 \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0915\u0949\u0932\u092e \u0938\u0902\u0916\u094d\u092f\u093e \u0915\u0940 \u091c\u093e\u0902\u091a \u0915\u0930\u0947\u0917\u093e\u0964 \u092f\u0926\u093f \u092f\u0939 2 \u0938\u0947 \u0915\u092e \u0939\u0948 (\u0939\u092e\u0928\u0947 \u092a\u0943\u0937\u094d\u0920 \u0915\u094b \u0924\u0940\u0928 \u0938\u094d\u0924\u0902\u092d\u094b\u0902 \u092e\u0947\u0902 \u0935\u093f\u092d\u093e\u091c\u093f\u0924 \u0915\u0930\u0928\u093e \u091a\u0941\u0928\u093e \u0939\u0948) \u0924\u094b \u092f\u0939 set_col \u0935\u093f\u0927\u093f \u0915\u094b \u0915\u0949\u0932 \u0915\u0930\u0947\u0917\u093e, \u0915\u0949\u0932\u092e \u0938\u0902\u0916\u094d\u092f\u093e \u092c\u0922\u093c\u093e\u0928\u093e \u0914\u0930 \u0905\u0917\u0932\u0947 \u0915\u0949\u0932\u092e \u0915\u0940 \u0938\u094d\u0925\u093f\u0924\u093f \u092c\u0926\u0932\u0928\u093e \u0924\u093e\u0915\u093f \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0935\u0939\u093e\u0902 \u091c\u093e\u0930\u0940 \u0930\u0939 \u0938\u0915\u0947\u0964 \u090f\u0915 \u092c\u093e\u0930 \u0924\u0940\u0938\u0930\u0947 \u0915\u0949\u0932\u092e \u0915\u0940 \u0928\u093f\u091a\u0932\u0940 \u0938\u0940\u092e\u093e \u0924\u0915 \u092a\u0939\u0941\u0901\u091a \u091c\u093e\u0928\u0947 \u092a\u0930, accept_page_break \u0935\u093f\u0927\u093f \u0930\u0940\u0938\u0947\u091f \u0939\u094b \u091c\u093e\u090f\u0917\u0940 \u0914\u0930 \u092a\u0939\u0932\u0947 \u0915\u0949\u0932\u092e \u092a\u0930 \u0935\u093e\u092a\u0938 \u091c\u093e\u090f\u0917\u0940 \u0914\u0930 \u090f\u0915 \u092a\u0947\u091c \u092c\u094d\u0930\u0947\u0915 \u0915\u094b \u091f\u094d\u0930\u093f\u0917\u0930 \u0915\u0930\u0947\u0917\u0940\u0964","title":"Tuto 4 - \u092e\u0932\u094d\u091f\u0940 \u0915\u0949\u0932\u092e"},{"location":"Tutorial-%E0%A4%B9%E0%A4%BF%E0%A4%82%E0%A4%A6%E0%A5%80.html#tuto-5-","text":"\u092f\u0939 \u091f\u094d\u092f\u0942\u091f\u094b\u0930\u093f\u092f\u0932 \u0938\u092e\u091d\u093e\u090f\u0917\u093e \u0915\u093f \u091f\u0947\u092c\u0932 \u0915\u094b \u0906\u0938\u093e\u0928\u0940 \u0938\u0947 \u0915\u0948\u0938\u0947 \u092c\u0928\u093e\u092f\u093e \u091c\u093e\u090f\u0964 \u0915\u0941\u091b \u0938\u0930\u0932 \u0938\u092e\u093e\u092f\u094b\u091c\u0928\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0915\u094d\u092f\u093e \u0939\u093e\u0938\u093f\u0932 \u0915\u093f\u092f\u093e \u091c\u093e \u0938\u0915\u0924\u093e \u0939\u0948, \u092f\u0939 \u0938\u092e\u091d\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0915\u094b\u0921 \u0924\u0940\u0928 \u0905\u0932\u0917-\u0905\u0932\u0917 \u091f\u0947\u092c\u0932 \u092c\u0928\u093e\u090f\u0917\u093e\u0964 import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Resulting PDF - Countries text \u091a\u0942\u0902\u0915\u093f \u0924\u093e\u0932\u093f\u0915\u093e (Table) \u0915\u0947\u0935\u0932 \u0915\u094b\u0936\u093f\u0915\u093e\u0913\u0902 (Cells) \u0915\u093e \u090f\u0915 \u0938\u0902\u0917\u094d\u0930\u0939 (Collection) \u0939\u0948, \u0907\u0938\u0932\u093f\u090f \u0909\u0928\u092e\u0947\u0902 \u0938\u0947 \u090f\u0915 \u0915\u093e \u0928\u093f\u0930\u094d\u092e\u093e\u0923 \u0915\u0930\u0928\u093e \u0938\u094d\u0935\u093e\u092d\u093e\u0935\u093f\u0915 \u0939\u0948\u0964 \u092a\u0939\u0932\u093e \u0909\u0926\u093e\u0939\u0930\u0923 \u0938\u092c\u0938\u0947 \u092c\u0941\u0928\u093f\u092f\u093e\u0926\u0940 \u0938\u0902\u092d\u0935 \u0924\u0930\u0940\u0915\u0947 \u0938\u0947 \u0939\u093e\u0938\u093f\u0932 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948: \u0938\u0930\u0932 \u092b\u093c\u094d\u0930\u0947\u092e\u092f\u0941\u0915\u094d\u0924 \u0915\u094b\u0936\u093f\u0915\u093e\u090f\u0902 (simple framed cells, \u0938\u092d\u0940 \u0938\u092e\u093e\u0928 \u0906\u0915\u093e\u0930 \u0915\u094b\u0936\u093f\u0915\u093e\u090f\u0902 (same sized cells) \u0914\u0930 \u092c\u093e\u090f\u0902 \u0938\u0902\u0930\u0947\u0916\u093f\u0924 \u0915\u094b\u0936\u093f\u0915\u093e\u090f\u0902 (left aligned cells)\u0964 \u092a\u0930\u093f\u0923\u093e\u092e \u0905\u0932\u094d\u092a\u0935\u093f\u0915\u0938\u093f\u0924 \u0939\u0948 \u0932\u0947\u0915\u093f\u0928 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092c\u0939\u0941\u0924 \u091c\u0932\u094d\u0926\u0940 \u0939\u0948\u0964 \u0926\u0942\u0938\u0930\u0940 \u0924\u093e\u0932\u093f\u0915\u093e \u0915\u0941\u091b \u0938\u0941\u0927\u093e\u0930 \u0932\u093e\u0924\u0940 \u0939\u0948: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0915\u0949\u0932\u092e \u0915\u0940 \u0905\u092a\u0928\u0940 \u091a\u094c\u0921\u093c\u093e\u0908 \u0939\u094b\u0924\u0940 \u0939\u0948, \u0936\u0940\u0930\u094d\u0937\u0915 \u0915\u0947\u0902\u0926\u094d\u0930\u093f\u0924 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902 \u0914\u0930 \u0906\u0902\u0915\u0921\u093c\u0947 \u0938\u0939\u0940 \u0938\u0902\u0930\u0947\u0916\u093f\u0924 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902\u0964 \u0907\u0938\u0915\u0947 \u0905\u0932\u093e\u0935\u093e, \u0915\u094d\u0937\u0948\u0924\u093f\u091c \u0930\u0947\u0916\u093e\u0913\u0902 \u0915\u094b \u0939\u091f\u093e \u0926\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948\u0964 \u092f\u0939 Cell() \u0935\u093f\u0927\u093f \u0915\u0947 \u092c\u0949\u0930\u094d\u0921\u0930 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948, \u091c\u094b \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0915\u0930\u0924\u093e \u0939\u0948 \u0915\u093f \u0938\u0947\u0932 \u0915\u0947 \u0915\u093f\u0928 \u092a\u0915\u094d\u0937\u094b\u0902 \u0915\u094b \u0916\u0940\u0902\u091a\u093e \u091c\u093e\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964 \u092f\u0939\u093e\u0902 \u0939\u092e \u092c\u093e\u090f\u0902 (L) \u0914\u0930 \u0926\u093e\u090f\u0902 (R) \u0935\u093e\u0932\u0947 \u091a\u093e\u0939\u0924\u0947 \u0939\u0948\u0902\u0964 \u0905\u092c \u0915\u0947\u0935\u0932 \u0915\u094d\u0937\u0948\u0924\u093f\u091c \u0930\u0947\u0916\u093e \u0915\u0940 \u0924\u093e\u0932\u093f\u0915\u093e (Table) \u0915\u094b Finish \u0915\u0930\u0928\u0947 \u0915\u0940 \u0938\u092e\u0938\u094d\u092f\u093e \u092c\u0928\u0940 \u0939\u0941\u0908 \u0939\u0948\u0964 \u0907\u0938\u0947 \u0939\u0932 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0926\u094b \u0938\u0902\u092d\u093e\u0935\u0928\u093e\u090f\u0902 \u0939\u0948\u0902: \u0932\u0942\u092a \u092e\u0947\u0902 \u0905\u0902\u0924\u093f\u092e \u092a\u0902\u0915\u094d\u0924\u093f \u0915\u0940 \u091c\u093e\u0901\u091a \u0915\u0930\u0947\u0902, \u091c\u093f\u0938 \u0938\u094d\u0925\u093f\u0924\u093f \u092e\u0947\u0902 \u0939\u092e \u0938\u0940\u092e\u093e \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930 \u0915\u0947 \u0932\u093f\u090f LRB \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902; \u092f\u093e \u091c\u0948\u0938\u093e \u0915\u093f \u092f\u0939\u093e\u0902 \u0915\u093f\u092f\u093e \u0917\u092f\u093e \u0939\u0948, \u0932\u0942\u092a \u0916\u0924\u094d\u092e \u0939\u094b\u0928\u0947 \u0915\u0947 \u092c\u093e\u0926 \u0932\u093e\u0907\u0928 \u091c\u094b\u0921\u093c\u0947\u0902\u0964 \u0924\u0940\u0938\u0930\u0940 \u0924\u093e\u0932\u093f\u0915\u093e \u0926\u0942\u0938\u0930\u0947 \u0915\u0947 \u0938\u092e\u093e\u0928 \u0939\u0948 \u0932\u0947\u0915\u093f\u0928 \u0930\u0902\u0917\u094b\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0924\u0940 \u0939\u0948\u0964 Fill, \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0914\u0930 \u0932\u093e\u0907\u0928 \u0930\u0902\u0917 \u092c\u0938 \u0928\u093f\u0930\u094d\u0926\u093f\u0937\u094d\u091f \u0939\u0948\u0902\u0964 \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915(Alternate) \u0930\u0942\u092a \u0938\u0947 \u092a\u093e\u0930\u0926\u0930\u094d\u0936\u0940 \u0914\u0930 \u092d\u0930\u0940 \u0939\u0941\u0908 \u0915\u094b\u0936\u093f\u0915\u093e\u0913\u0902 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092a\u0902\u0915\u094d\u0924\u093f\u092f\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915 \u0930\u0902\u0917 \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0915\u093f\u092f\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964","title":"Tuto 5 - \u091f\u0947\u092c\u0932 \u092c\u0928\u093e\u0928\u093e"},{"location":"Tutorial-%E0%A4%B9%E0%A4%BF%E0%A4%82%E0%A4%A6%E0%A5%80.html#tuto-6-","text":"\u092f\u0939 \u091f\u094d\u092f\u0942\u091f\u094b\u0930\u093f\u092f\u0932 \u092a\u0940\u0921\u0940\u090f\u092b \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0947 \u0905\u0902\u0926\u0930 \u0932\u093f\u0902\u0915 \u0921\u093e\u0932\u0928\u0947 \u0915\u0947 \u0938\u093e\u0925-\u0938\u093e\u0925 \u092c\u093e\u0939\u0930\u0940 \u0938\u094d\u0930\u094b\u0924\u094b\u0902 \u0915\u0947 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0915\u0908 \u0924\u0930\u0940\u0915\u094b\u0902 \u0915\u0940 \u0935\u094d\u092f\u093e\u0916\u094d\u092f\u093e \u0915\u0930\u0947\u0917\u093e\u0964 \u092f\u0939 \u0915\u0908 \u0924\u0930\u0940\u0915\u0947 \u092d\u0940 \u0926\u093f\u0916\u093e\u090f\u0917\u093e \u091c\u093f\u0938\u0938\u0947 \u0939\u092e \u090f\u0915 \u0939\u0940 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u0947 \u092d\u0940\u0924\u0930 \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0936\u0948\u0932\u093f\u092f\u094b\u0902, (\u092c\u094b\u0932\u094d\u0921, \u0907\u091f\u0948\u0932\u093f\u0915, \u0905\u0902\u0921\u0930\u0932\u093e\u0907\u0928) \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930 \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964 from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Resulting PDF - fpdf2-logo \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u092a\u094d\u0930\u093f\u0902\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u092f\u0939\u093e\u0902 \u0926\u093f\u0916\u093e\u092f\u093e \u0917\u092f\u093e \u0928\u092f\u093e \u0924\u0930\u0940\u0915\u093e write() \u0939\u0948\u0964 \u092f\u0939 \u092c\u0939\u0941\u0924 \u0939\u0926 \u0924\u0915 multi_cell() \u0915\u0947 \u0938\u092e\u093e\u0928 \u0939\u0948, \u092e\u0941\u0916\u094d\u092f \u0905\u0902\u0924\u0930 \u092f\u0939 \u0939\u0948: - \u092a\u0902\u0915\u094d\u0924\u093f \u0915\u093e \u0905\u0902\u0924 \u0926\u093e\u090f\u0902 \u0939\u093e\u0936\u093f\u092f\u0947 \u092a\u0930 \u0939\u0948 \u0914\u0930 \u0905\u0917\u0932\u0940 \u092a\u0902\u0915\u094d\u0924\u093f \u092c\u093e\u090f\u0902 \u0939\u093e\u0936\u093f\u092f\u0947 \u092a\u0930 \u0936\u0941\u0930\u0942 \u0939\u094b\u0924\u0940 \u0939\u0948\u0964 - \u0935\u0930\u094d\u0924\u092e\u093e\u0928 \u0938\u094d\u0925\u093f\u0924\u093f \u092a\u093e\u0920 \u0915\u0947 \u0905\u0902\u0924 \u092e\u0947\u0902 \u091a\u0932\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948\u0964 \u0907\u0938\u0932\u093f\u090f \u0935\u093f\u0927\u093f \u0939\u092e\u0947\u0902 \u092a\u093e\u0920 \u0915\u093e \u090f\u0915 \u0939\u093f\u0938\u094d\u0938\u093e \u0932\u093f\u0916\u0928\u0947, \u092b\u093c\u0949\u0928\u094d\u091f \u0936\u0948\u0932\u0940 \u0915\u094b \u092c\u0926\u0932\u0928\u0947 \u0914\u0930 \u0920\u0940\u0915 \u0909\u0938\u0940 \u0938\u094d\u0925\u093e\u0928 \u0938\u0947 \u091c\u093e\u0930\u0940 \u0930\u0916\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u0940 \u0939\u0948 \u091c\u0939\u093e\u0902 \u0938\u0947 \u0939\u092e\u0928\u0947 \u091b\u094b\u0921\u093c\u093e \u0925\u093e\u0964 \u0926\u0942\u0938\u0930\u0940 \u0913\u0930, \u0907\u0938\u0915\u093e \u092e\u0941\u0916\u094d\u092f \u0926\u094b\u0937 \u092f\u0939 \u0939\u0948 \u0915\u093f \u0939\u092e \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0915\u094b \u091c\u0938\u094d\u091f\u093f\u092b\u093e\u0908 \u0928\u0939\u0940\u0902 \u0915\u0930 \u0938\u0915\u0924\u0947 \u091c\u0948\u0938\u0947 \u0939\u092e multi_cell() \u092e\u0947\u0925\u0921 \u0915\u0947 \u0938\u093e\u0925 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902\u0964 \u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u092a\u0939\u0932\u0947 \u092a\u0943\u0937\u094d\u0920 \u092e\u0947\u0902, \u0939\u092e\u0928\u0947 \u0907\u0938 \u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f \u0915\u0947 \u0932\u093f\u090f write() \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e\u0964 \u0935\u093e\u0915\u094d\u092f \u0915\u0940 \u0936\u0941\u0930\u0941\u0906\u0924 \u0928\u093f\u092f\u092e\u093f\u0924 \u0936\u0948\u0932\u0940 \u0915\u0947 \u092a\u093e\u0920 \u092e\u0947\u0902 \u0932\u093f\u0916\u0940 \u091c\u093e\u0924\u0940 \u0939\u0948, \u092b\u093f\u0930 set_font() \u0935\u093f\u0927\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947, \u0939\u092e\u0928\u0947 \u0930\u0947\u0916\u093e\u0902\u0915\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0938\u094d\u0935\u093f\u091a \u0915\u093f\u092f\u093e \u0914\u0930 \u0935\u093e\u0915\u094d\u092f \u0915\u094b \u0938\u092e\u093e\u092a\u094d\u0924 \u0915\u093f\u092f\u093e\u0964 \u0926\u0942\u0938\u0930\u0947 \u092a\u0943\u0937\u094d\u0920 \u0915\u0940 \u0913\u0930 \u0907\u0936\u093e\u0930\u093e \u0915\u0930\u0924\u0947 \u0939\u0941\u090f \u090f\u0915 \u0906\u0902\u0924\u0930\u093f\u0915 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e\u0928\u0947 add_link() \u0935\u093f\u0927\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e, \u091c\u094b \u090f\u0915 \u0915\u094d\u0932\u093f\u0915 \u0915\u0930\u0928\u0947 \u092f\u094b\u0917\u094d\u092f \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u092c\u0928\u093e\u0924\u093e \u0939\u0948 \u091c\u093f\u0938\u0947 \u0939\u092e\u0928\u0947 \"Link\" \u0928\u093e\u092e \u0926\u093f\u092f\u093e \u0939\u0948 \u091c\u094b \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c \u0915\u0947 \u092d\u0940\u0924\u0930 \u0915\u093f\u0938\u0940 \u0905\u0928\u094d\u092f \u0938\u094d\u0925\u093e\u0928 \u092a\u0930 \u0928\u093f\u0930\u094d\u0926\u0947\u0936\u093f\u0924 \u0915\u0930\u0924\u093e \u0939\u0948\u0964 \u0926\u0942\u0938\u0930\u0947 \u092a\u0943\u0937\u094d\u0920 \u092a\u0930, \u0939\u092e\u0928\u0947 \u0905\u092d\u0940-\u0905\u092d\u0940 \u092c\u0928\u093e\u090f \u0917\u090f \u0932\u093f\u0902\u0915 \u0915\u0947 \u0932\u093f\u090f \u0917\u0902\u0924\u0935\u094d\u092f \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u0915\u094b \u092a\u0930\u093f\u092d\u093e\u0937\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f set_link() \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e\u0964 Image \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u092c\u093e\u0939\u0930\u0940 \u0932\u093f\u0902\u0915 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f, \u0939\u092e\u0928\u0947 image() \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u093f\u092f\u093e\u0964 \u0935\u093f\u0927\u093f \u092e\u0947\u0902 \u090f\u0915 \u0932\u093f\u0902\u0915 \u0915\u094b \u0907\u0938\u0915\u0947 \u0924\u0930\u094d\u0915\u094b\u0902 \u092e\u0947\u0902 \u0938\u0947 \u090f\u0915 \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u093e\u0930\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u093e \u0935\u093f\u0915\u0932\u094d\u092a \u0939\u094b\u0924\u093e \u0939\u0948\u0964 \u0932\u093f\u0902\u0915 \u0906\u0902\u0924\u0930\u093f\u0915 \u092f\u093e \u092c\u093e\u0939\u0930\u0940 \u0926\u094b\u0928\u094b\u0902 \u0939\u094b \u0938\u0915\u0924\u093e \u0939\u0948\u0964 \u090f\u0915 \u0935\u093f\u0915\u0932\u094d\u092a \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902, \u092b\u093c\u0949\u0928\u094d\u091f \u0936\u0948\u0932\u0940 \u092c\u0926\u0932\u0928\u0947 \u0914\u0930 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u093e \u0926\u0942\u0938\u0930\u093e \u0935\u093f\u0915\u0932\u094d\u092a write_html() \u092a\u0926\u094d\u0927\u0924\u093f \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e \u0939\u0948\u0964 \u092f\u0939 \u090f\u0915 HTML \u092a\u093e\u0930\u094d\u0938\u0930 \u0939\u0948, \u091c\u094b \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u091c\u094b\u0921\u093c\u0928\u0947, \u092b\u093c\u0949\u0928\u094d\u091f \u0936\u0948\u0932\u0940 \u092c\u0926\u0932\u0928\u0947 \u0914\u0930 html \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 \u0932\u093f\u0902\u0915 \u091c\u094b\u0921\u093c\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0924\u093e \u0939\u0948\u0964","title":"Tuto 6 - \u0932\u093f\u0902\u0915 \u092c\u0928\u093e\u0928\u093e \u0914\u0930 \u091f\u0947\u0915\u094d\u0938\u094d\u091f \u0936\u0948\u0932\u093f\u092f\u094b\u0902 \u0915\u094b \u092e\u093f\u0932\u093e\u0928\u093e"},{"location":"Tutorial.html","text":"Tutorial Methods full documentation: fpdf.FPDF API doc Tutorial Tuto 1 - Minimal Example Tuto 2 - Header, footer, page break and image Tuto 3 - Line breaks and colors Tuto 4 - Multi Columns Tuto 5 - Creating Tables Tuto 6 - Creating links and mixing text styles Tuto 1 - Minimal Example Let's start with the classic example: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Resulting PDF After including the library file, we create an FPDF object. The FPDF constructor is used here with the default values: pages are in A4 portrait and the measure unit is millimeter. It could have been specified explicitly with: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) It is possible to set the PDF in landscape mode ( L ) or to use other page formats (such as Letter and Legal ) and measure units ( pt , cm , in ). There is no page for the moment, so we have to add one with add_page . The origin is at the upper-left corner and the current position is by default placed at 1 cm from the borders; the margins can be changed with set_margins . Before we can print text, it is mandatory to select a font with set_font , otherwise the document would be invalid. We choose Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) We could have specified italics with I , underlined with U or a regular font with an empty string (or any combination). Note that the font size is given in points, not millimeters (or another user unit); it is the only exception. The other built-in fonts are Times , Courier , Symbol and ZapfDingbats . We can now print a cell with cell . A cell is a rectangular area, possibly framed, which contains some text. It is rendered at the current position. We specify its dimensions, its text (centered or aligned), if borders should be drawn, and where the current position moves after it (to the right, below or to the beginning of the next line). To add a frame, we would do this: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) To add a new cell next to it with centered text and go to the next line, we would do: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Remark : the line break can also be done with ln . This method allows to specify in addition the height of the break. Finally, the document is closed and saved under the provided file path using output . Without any parameter provided, output() returns the PDF bytearray buffer. Tuto 2 - Header, footer, page break and image Here is a two page example with header, footer and logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Resulting PDF This example makes use of the header and footer methods to process page headers and footers. They are called automatically. They already exist in the FPDF class but do nothing, therefore we have to extend the class and override them. The logo is printed with the image method by specifying its upper-left corner and its width. The height is calculated automatically to respect the image proportions. To print the page number, a null value is passed as the cell width. It means that the cell should extend up to the right margin of the page; it is handy to center text. The current page number is returned by the page_no method; as for the total number of pages, it is obtained by means of the special value {nb} which will be substituted on document closure (this special value can changed by alias_nb_pages() ). Note the use of the set_y method which allows to set position at an absolute location in the page, starting from the top or the bottom. Another interesting feature is used here: the automatic page breaking. As soon as a cell would cross a limit in the page (at 2 centimeters from the bottom by default), a break is performed and the font restored. Although the header and footer select their own font ( helvetica ), the body continues with Times . This mechanism of automatic restoration also applies to colors and line width. The limit which triggers page breaks can be set with set_auto_page_break . Tuto 3 - Line breaks and colors Let's continue with an example which prints justified paragraphs. It also illustrates the use of colors. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Resulting PDF Jules Verne text The get_string_width method allows determining the length of a string in the current font, which is used here to calculate the position and the width of the frame surrounding the title. Then colors are set (via set_draw_color , set_fill_color and set_text_color ) and the thickness of the line is set to 1 mm (against 0.2 by default) with set_line_width . Finally, we output the cell (the last parameter to true indicates that the background must be filled). The method used to print the paragraphs is multi_cell . Text is justified by default. Each time a line reaches the right extremity of the cell or a carriage return character ( \\n ) is met, a line break is issued and a new cell automatically created under the current one. An automatic break is performed at the location of the nearest space or soft-hyphen ( \\u00ad ) character before the right limit. A soft-hyphen will be replaced by a normal hyphen when triggering a line break, and ignored otherwise. Two document properties are defined: the title ( set_title ) and the author ( set_author ). Properties can be viewed by two means. First is to open the document directly with Acrobat Reader, go to the File menu and choose the Document Properties option. The second, also available from the plug-in, is to right-click and select Document Properties. Tuto 4 - Multi Columns This example is a variant of the previous one, showing how to lay the text across multiple columns. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Resulting PDF Jules Verne text The key difference from the previous tutorial is the use of the accept_page_break and the set_col methods. Using the accept_page_break method, once the cell crosses the bottom limit of the page, it will check the current column number. If it is less than 2 (we chose to divide the page in three columns) it will call the set_col method, increasing the column number and altering the position of the next column so the text may continue there. Once the bottom limit of the third column is reached, the accept_page_break method will reset and go back to the first column and trigger a page break. Tuto 5 - Creating Tables This tutorial will explain how to create tables easily. The code will create three different tables to explain what can be achieved with some simple adjustments. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Resulting PDF - Countries text Since a table is just a collection of cells, it is natural to build one from them. The first example is achieved in the most basic way possible: simple framed cells, all of the same size and left aligned. The result is rudimentary but very quick to obtain. The second table brings some improvements: each column has its own width, titles are centered and figures right aligned. Moreover, horizontal lines have been removed. This is done by means of the border parameter of the Cell() method, which specifies which sides of the cell must be drawn. Here we want the left (L) and right (R) ones. Now only the problem of the horizontal line to finish the table remains. There are two possibilities to solv it: check for the last line in the loop, in which case we use LRB for the border parameter; or, as done here, add the line once the loop is over. The third table is similar to the second one but uses colors. Fill, text and line colors are simply specified. Alternate coloring for rows is obtained by using alternatively transparent and filled cells. Tuto 6 - Creating links and mixing text styles This tutorial will explain several ways to insert links inside a pdf document, as well as adding links to external sources. It will also show several ways we can use different text styles, (bold, italic, underline) within the same text. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Resulting PDF - fpdf2-logo The new method shown here to print text is write() . It is very similar to multi_cell() , the key differences being: The end of line is at the right margin and the next line begins at the left margin. The current position moves to the end of the text. The method therefore allows us to write a chunk of text, alter the font style, and continue from the exact place we left off. On the other hand, its main drawback is that we cannot justify the text like we do with the multi_cell() method. In the first page of the example, we used write() for this purpose. The beginning of the sentence is written in regular style text, then using the set_font() method, we switched to underline and finished the sentence. To add an internal link pointing to the second page, we used the add_link() method, which creates a clickable area which we named \"link\" that directs to another place within the document. On the second page, we used set_link() to define the destination area for the link we just created. To create the external link using an image, we used image() . The method has the option to pass a link as one of its arguments. The link can be both internal or external. As an alternative, another option to change the font style and add links is to use the write_html() method. It is an html parser, which allows adding text, changing font style and adding links using html.","title":"Tutorial in english"},{"location":"Tutorial.html#tutorial","text":"Methods full documentation: fpdf.FPDF API doc Tutorial Tuto 1 - Minimal Example Tuto 2 - Header, footer, page break and image Tuto 3 - Line breaks and colors Tuto 4 - Multi Columns Tuto 5 - Creating Tables Tuto 6 - Creating links and mixing text styles","title":"Tutorial"},{"location":"Tutorial.html#tuto-1-minimal-example","text":"Let's start with the classic example: from fpdf import FPDF pdf = FPDF () pdf . add_page () pdf . set_font ( \"helvetica\" , \"B\" , 16 ) pdf . cell ( 40 , 10 , \"Hello World!\" ) pdf . output ( \"tuto1.pdf\" ) Resulting PDF After including the library file, we create an FPDF object. The FPDF constructor is used here with the default values: pages are in A4 portrait and the measure unit is millimeter. It could have been specified explicitly with: pdf = FPDF ( orientation = \"P\" , unit = \"mm\" , format = \"A4\" ) It is possible to set the PDF in landscape mode ( L ) or to use other page formats (such as Letter and Legal ) and measure units ( pt , cm , in ). There is no page for the moment, so we have to add one with add_page . The origin is at the upper-left corner and the current position is by default placed at 1 cm from the borders; the margins can be changed with set_margins . Before we can print text, it is mandatory to select a font with set_font , otherwise the document would be invalid. We choose Helvetica bold 16: pdf . set_font ( 'helvetica' , 'B' , 16 ) We could have specified italics with I , underlined with U or a regular font with an empty string (or any combination). Note that the font size is given in points, not millimeters (or another user unit); it is the only exception. The other built-in fonts are Times , Courier , Symbol and ZapfDingbats . We can now print a cell with cell . A cell is a rectangular area, possibly framed, which contains some text. It is rendered at the current position. We specify its dimensions, its text (centered or aligned), if borders should be drawn, and where the current position moves after it (to the right, below or to the beginning of the next line). To add a frame, we would do this: pdf . cell ( 40 , 10 , 'Hello World!' , 1 ) To add a new cell next to it with centered text and go to the next line, we would do: pdf . cell ( 60 , 10 , 'Powered by FPDF.' , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = 'C' ) Remark : the line break can also be done with ln . This method allows to specify in addition the height of the break. Finally, the document is closed and saved under the provided file path using output . Without any parameter provided, output() returns the PDF bytearray buffer.","title":"Tuto 1 - Minimal Example"},{"location":"Tutorial.html#tuto-2-header-footer-page-break-and-image","text":"Here is a two page example with header, footer and logo: from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Rendering logo: self . image ( \"../docs/fpdf2-logo.png\" , 10 , 8 , 33 ) # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Moving cursor to the right: self . cell ( 80 ) # Printing title: self . cell ( 30 , 10 , \"Title\" , border = 1 , align = \"C\" ) # Performing a line break: self . ln ( 20 ) def footer ( self ): # Position cursor at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Printing page number: self . cell ( 0 , 10 , f \"Page { self . page_no () } / {{ nb }} \" , align = \"C\" ) # Instantiation of inherited class pdf = PDF () pdf . add_page () pdf . set_font ( \"Times\" , size = 12 ) for i in range ( 1 , 41 ): pdf . cell ( 0 , 10 , f \"Printing line number { i } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" ) pdf . output ( \"new-tuto2.pdf\" ) Resulting PDF This example makes use of the header and footer methods to process page headers and footers. They are called automatically. They already exist in the FPDF class but do nothing, therefore we have to extend the class and override them. The logo is printed with the image method by specifying its upper-left corner and its width. The height is calculated automatically to respect the image proportions. To print the page number, a null value is passed as the cell width. It means that the cell should extend up to the right margin of the page; it is handy to center text. The current page number is returned by the page_no method; as for the total number of pages, it is obtained by means of the special value {nb} which will be substituted on document closure (this special value can changed by alias_nb_pages() ). Note the use of the set_y method which allows to set position at an absolute location in the page, starting from the top or the bottom. Another interesting feature is used here: the automatic page breaking. As soon as a cell would cross a limit in the page (at 2 centimeters from the bottom by default), a break is performed and the font restored. Although the header and footer select their own font ( helvetica ), the body continues with Times . This mechanism of automatic restoration also applies to colors and line width. The limit which triggers page breaks can be set with set_auto_page_break .","title":"Tuto 2 - Header, footer, page break and image"},{"location":"Tutorial.html#tuto-3-line-breaks-and-colors","text":"Let's continue with an example which prints justified paragraphs. It also illustrates the use of colors. from fpdf import FPDF class PDF ( FPDF ): def header ( self ): # Setting font: helvetica bold 15 self . set_font ( \"helvetica\" , \"B\" , 15 ) # Calculating width of title and setting cursor position: width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) # Setting colors for frame, background and text: self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) # Setting thickness of the frame (1 mm) self . set_line_width ( 1 ) # Printing title: self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) # Performing a line break: self . ln ( 10 ) def footer ( self ): # Setting position at 1.5 cm from bottom: self . set_y ( - 15 ) # Setting font: helvetica italic 8 self . set_font ( \"helvetica\" , \"I\" , 8 ) # Setting text color to gray: self . set_text_color ( 128 ) # Printing page number self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def chapter_title ( self , num , label ): # Setting font: helvetica 12 self . set_font ( \"helvetica\" , \"\" , 12 ) # Setting background color self . set_fill_color ( 200 , 220 , 255 ) # Printing chapter name: self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"L\" , fill = True , ) # Performing a line break: self . ln ( 4 ) def chapter_body ( self , filepath ): # Reading text file: with open ( filepath , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing justified text: self . multi_cell ( 0 , 5 , txt ) # Performing a line break: self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) def print_chapter ( self , num , title , filepath ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( filepath ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto3.pdf\" ) Resulting PDF Jules Verne text The get_string_width method allows determining the length of a string in the current font, which is used here to calculate the position and the width of the frame surrounding the title. Then colors are set (via set_draw_color , set_fill_color and set_text_color ) and the thickness of the line is set to 1 mm (against 0.2 by default) with set_line_width . Finally, we output the cell (the last parameter to true indicates that the background must be filled). The method used to print the paragraphs is multi_cell . Text is justified by default. Each time a line reaches the right extremity of the cell or a carriage return character ( \\n ) is met, a line break is issued and a new cell automatically created under the current one. An automatic break is performed at the location of the nearest space or soft-hyphen ( \\u00ad ) character before the right limit. A soft-hyphen will be replaced by a normal hyphen when triggering a line break, and ignored otherwise. Two document properties are defined: the title ( set_title ) and the author ( set_author ). Properties can be viewed by two means. First is to open the document directly with Acrobat Reader, go to the File menu and choose the Document Properties option. The second, also available from the plug-in, is to right-click and select Document Properties.","title":"Tuto 3 - Line breaks and colors"},{"location":"Tutorial.html#tuto-4-multi-columns","text":"This example is a variant of the previous one, showing how to lay the text across multiple columns. from fpdf import FPDF class PDF ( FPDF ): def __init__ ( self ): super () . __init__ () self . col = 0 # Current column self . y0 = 0 # Ordinate of column start def header ( self ): self . set_font ( \"helvetica\" , \"B\" , 15 ) width = self . get_string_width ( self . title ) + 6 self . set_x (( 210 - width ) / 2 ) self . set_draw_color ( 0 , 80 , 180 ) self . set_fill_color ( 230 , 230 , 0 ) self . set_text_color ( 220 , 50 , 50 ) self . set_line_width ( 1 ) self . cell ( width , 9 , self . title , border = 1 , new_x = \"LMARGIN\" , new_y = \"NEXT\" , align = \"C\" , fill = True , ) self . ln ( 10 ) # Saving ordinate position: self . y0 = self . get_y () def footer ( self ): self . set_y ( - 15 ) self . set_font ( \"helvetica\" , \"I\" , 8 ) self . set_text_color ( 128 ) self . cell ( 0 , 10 , f \"Page { self . page_no () } \" , align = \"C\" ) def set_col ( self , col ): # Set column position: self . col = col x = 10 + col * 65 self . set_left_margin ( x ) self . set_x ( x ) @property def accept_page_break ( self ): if self . col < 2 : # Go to next column: self . set_col ( self . col + 1 ) # Set ordinate to top: self . set_y ( self . y0 ) # Stay on the same page: return False # Go back to first column: self . set_col ( 0 ) # Trigger a page break: return True def chapter_title ( self , num , label ): self . set_font ( \"helvetica\" , \"\" , 12 ) self . set_fill_color ( 200 , 220 , 255 ) self . cell ( 0 , 6 , f \"Chapter { num } : { label } \" , new_x = \"LMARGIN\" , new_y = \"NEXT\" , border = \"L\" , fill = True , ) self . ln ( 4 ) # Saving ordinate position: self . y0 = self . get_y () def chapter_body ( self , name ): # Reading text file: with open ( name , \"rb\" ) as fh : txt = fh . read () . decode ( \"latin-1\" ) # Setting font: Times 12 self . set_font ( \"Times\" , size = 12 ) # Printing text in a 6cm width column: self . multi_cell ( 60 , 5 , txt ) self . ln () # Final mention in italics: self . set_font ( style = \"I\" ) self . cell ( 0 , 5 , \"(end of excerpt)\" ) # Start back at first column: self . set_col ( 0 ) def print_chapter ( self , num , title , name ): self . add_page () self . chapter_title ( num , title ) self . chapter_body ( name ) pdf = PDF () pdf . set_title ( \"20000 Leagues Under the Seas\" ) pdf . set_author ( \"Jules Verne\" ) pdf . print_chapter ( 1 , \"A RUNAWAY REEF\" , \"20k_c1.txt\" ) pdf . print_chapter ( 2 , \"THE PROS AND CONS\" , \"20k_c1.txt\" ) pdf . output ( \"tuto4.pdf\" ) Resulting PDF Jules Verne text The key difference from the previous tutorial is the use of the accept_page_break and the set_col methods. Using the accept_page_break method, once the cell crosses the bottom limit of the page, it will check the current column number. If it is less than 2 (we chose to divide the page in three columns) it will call the set_col method, increasing the column number and altering the position of the next column so the text may continue there. Once the bottom limit of the third column is reached, the accept_page_break method will reset and go back to the first column and trigger a page break.","title":"Tuto 4 - Multi Columns"},{"location":"Tutorial.html#tuto-5-creating-tables","text":"This tutorial will explain how to create tables easily. The code will create three different tables to explain what can be achieved with some simple adjustments. import csv from fpdf import FPDF class PDF ( FPDF ): def basic_table ( self , headings , rows ): for heading in headings : self . cell ( 40 , 7 , heading , 1 ) self . ln () for row in rows : for col in row : self . cell ( 40 , 6 , col , 1 ) self . ln () def improved_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 40 )): for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" ) self . ln () for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" ) self . ln () # Closure line: self . cell ( sum ( col_widths ), 0 , \"\" , border = \"T\" ) def colored_table ( self , headings , rows , col_widths = ( 42 , 39 , 35 , 42 )): # Colors, line width and bold font: self . set_fill_color ( 255 , 100 , 0 ) self . set_text_color ( 255 ) self . set_draw_color ( 255 , 0 , 0 ) self . set_line_width ( 0.3 ) self . set_font ( style = \"B\" ) for col_width , heading in zip ( col_widths , headings ): self . cell ( col_width , 7 , heading , border = 1 , align = \"C\" , fill = True ) self . ln () # Color and font restoration: self . set_fill_color ( 224 , 235 , 255 ) self . set_text_color ( 0 ) self . set_font () fill = False for row in rows : self . cell ( col_widths [ 0 ], 6 , row [ 0 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 1 ], 6 , row [ 1 ], border = \"LR\" , align = \"L\" , fill = fill ) self . cell ( col_widths [ 2 ], 6 , row [ 2 ], border = \"LR\" , align = \"R\" , fill = fill ) self . cell ( col_widths [ 3 ], 6 , row [ 3 ], border = \"LR\" , align = \"R\" , fill = fill ) self . ln () fill = not fill self . cell ( sum ( col_widths ), 0 , \"\" , \"T\" ) def load_data_from_csv ( csv_filepath ): headings , rows = [], [] with open ( csv_filepath , encoding = \"utf8\" ) as csv_file : for row in csv . reader ( csv_file , delimiter = \",\" ): if not headings : # extracting column names from first row: headings = row else : rows . append ( row ) return headings , rows col_names , data = load_data_from_csv ( \"countries.txt\" ) pdf = PDF () pdf . set_font ( \"helvetica\" , size = 14 ) pdf . add_page () pdf . basic_table ( col_names , data ) pdf . add_page () pdf . improved_table ( col_names , data ) pdf . add_page () pdf . colored_table ( col_names , data ) pdf . output ( \"tuto5.pdf\" ) Resulting PDF - Countries text Since a table is just a collection of cells, it is natural to build one from them. The first example is achieved in the most basic way possible: simple framed cells, all of the same size and left aligned. The result is rudimentary but very quick to obtain. The second table brings some improvements: each column has its own width, titles are centered and figures right aligned. Moreover, horizontal lines have been removed. This is done by means of the border parameter of the Cell() method, which specifies which sides of the cell must be drawn. Here we want the left (L) and right (R) ones. Now only the problem of the horizontal line to finish the table remains. There are two possibilities to solv it: check for the last line in the loop, in which case we use LRB for the border parameter; or, as done here, add the line once the loop is over. The third table is similar to the second one but uses colors. Fill, text and line colors are simply specified. Alternate coloring for rows is obtained by using alternatively transparent and filled cells.","title":"Tuto 5 - Creating Tables"},{"location":"Tutorial.html#tuto-6-creating-links-and-mixing-text-styles","text":"This tutorial will explain several ways to insert links inside a pdf document, as well as adding links to external sources. It will also show several ways we can use different text styles, (bold, italic, underline) within the same text. from fpdf import FPDF , HTMLMixin class MyFPDF ( FPDF , HTMLMixin ): pass pdf = MyFPDF () # First page: pdf . add_page () pdf . set_font ( \"helvetica\" , size = 20 ) pdf . write ( 5 , \"To find out what's new in self tutorial, click \" ) pdf . set_font ( style = \"U\" ) link = pdf . add_link () pdf . write ( 5 , \"here\" , link ) pdf . set_font () # Second page: pdf . add_page () pdf . set_link ( link ) pdf . image ( \"../docs/fpdf2-logo.png\" , 10 , 10 , 50 , 0 , \"\" , \"https://pyfpdf.github.io/fpdf2/\" ) pdf . set_left_margin ( 60 ) pdf . set_font_size ( 18 ) pdf . write_html ( \"\"\"You can print text mixing different styles using HTML tags: <b>bold</b>, <i>italic</i>, <u>underlined</u>, or <b><i><u>all at once</u></i></b>! <br><br>You can also insert links on text, such as <a href=\"https://pyfpdf.github.io/fpdf2/\">https://pyfpdf.github.io/fpdf2/</a>, or on an image: the logo is clickable!\"\"\" ) pdf . output ( \"tuto6.pdf\" ) Resulting PDF - fpdf2-logo The new method shown here to print text is write() . It is very similar to multi_cell() , the key differences being: The end of line is at the right margin and the next line begins at the left margin. The current position moves to the end of the text. The method therefore allows us to write a chunk of text, alter the font style, and continue from the exact place we left off. On the other hand, its main drawback is that we cannot justify the text like we do with the multi_cell() method. In the first page of the example, we used write() for this purpose. The beginning of the sentence is written in regular style text, then using the set_font() method, we switched to underline and finished the sentence. To add an internal link pointing to the second page, we used the add_link() method, which creates a clickable area which we named \"link\" that directs to another place within the document. On the second page, we used set_link() to define the destination area for the link we just created. To create the external link using an image, we used image() . The method has the option to pass a link as one of its arguments. The link can be both internal or external. As an alternative, another option to change the font style and add links is to use the write_html() method. It is an html parser, which allows adding text, changing font style and adding links using html.","title":"Tuto 6 - Creating links and mixing text styles"},{"location":"Unicode.html","text":"Unicode Unicode Right-to-Left & Arabic Script workaround Example Free Font Pack and Copyright Restrictions The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back 's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into the font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts Debian and Ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports other east Asian languages) Alee (ttf-alee Arch Linux package): General purpose Hangul Truetype fonts that contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library's installers; see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of add_font . Notes on non-latin languages Some users may encounter a problem where some characters displayed incorrectly. For example, using Thai language in the picture below The solution is to find and use a font that covers the characters of your language. From the error in the image above, Thai characters can be fixed using fonts from Fonts-TLWG which can be downloaded from this link . The example shown below. Right-to-Left & Arabic Script workaround For Arabic and RTL scripts there is a temporary solution (using two additional libraries python-bidi and arabic-reshaper ) that works for most languages; only a few (rare) Arabic characters aren't supported. Using it on other scripts(eg. when the input is unknown or mixed scripts) does not affect them: from arabic_reshaper import reshape from bidi.algorithm import get_display some_text = '\u0627\u064e\u0644\u0652\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629\u064f\u05db\u05b7\u05bc\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea' fixed_text = get_display ( reshape ( some_text )) Example This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF () pdf . add_page () # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf . add_font ( 'DejaVu' , fname = 'DejaVuSansCondensed.ttf' ) pdf . set_font ( 'DejaVu' , size = 14 ) text = u \"\"\" English: Hello World Greek: \u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5 \u03ba\u03cc\u03c3\u03bc\u03bf\u03c2 Polish: Witaj \u015bwiecie Portuguese: Ol\u00e1 mundo Russian: \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u041c\u0438\u0440 Vietnamese: Xin ch\u00e0o th\u1ebf gi\u1edbi Arabic: \u0645\u0631\u062d\u0628\u0627 \u0627\u0644\u0639\u0627\u0644\u0645 Hebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd \"\"\" for txt in text . split ( ' \\n ' ): pdf . write ( 8 , txt ) pdf . ln ( 8 ) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf . add_font ( 'gargi' , fname = 'gargi.ttf' ) pdf . set_font ( 'gargi' , size = 14 ) pdf . write ( 8 , u 'Hindi: \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e' ) pdf . ln ( 20 ) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports other east Asian languages) pdf . add_font ( 'fireflysung' , fname = 'fireflysung.ttf' ) pdf . set_font ( 'fireflysung' , size = 14 ) pdf . write ( 8 , u 'Chinese: \u4f60\u597d\u4e16\u754c \\n ' ) pdf . write ( 8 , u 'Japanese: \u3053\u3093\u306b\u3061\u306f\u4e16\u754c \\n ' ) pdf . ln ( 10 ) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that contain Korean syllable # and Latin9 (iso8859-15) characters. pdf . add_font ( 'eunjin' , fname = 'Eunjin.ttf' ) pdf . set_font ( 'eunjin' , size = 14 ) pdf . write ( 8 , u 'Korean: \uc548\ub155\ud558\uc138\uc694' ) pdf . ln ( 20 ) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf . add_font ( 'waree' , fname = 'Waree.ttf' ) pdf . set_font ( 'waree' , size = 14 ) pdf . write ( 8 , u 'Thai: \u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e0a\u0e32\u0e27\u0e42\u0e25\u0e01' ) pdf . ln ( 20 ) # Select a standard font (uses windows-1252) pdf . set_font ( 'helvetica' , size = 14 ) pdf . ln ( 10 ) pdf . write ( 5 , 'This is standard built-in font' ) pdf . output ( \"unicode.pdf\" ) View the result here: unicode.pdf Free Font Pack and Copyright Restrictions For your convenience, this library collected 96 TTF files in an optional \"Free Unicode TrueType Font Pack for FPDF\" , with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the Windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: \"ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.\"","title":"Unicode"},{"location":"Unicode.html#unicode","text":"Unicode Right-to-Left & Arabic Script workaround Example Free Font Pack and Copyright Restrictions The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back 's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into the font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts Debian and Ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports other east Asian languages) Alee (ttf-alee Arch Linux package): General purpose Hangul Truetype fonts that contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library's installers; see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of add_font . Notes on non-latin languages Some users may encounter a problem where some characters displayed incorrectly. For example, using Thai language in the picture below The solution is to find and use a font that covers the characters of your language. From the error in the image above, Thai characters can be fixed using fonts from Fonts-TLWG which can be downloaded from this link . The example shown below.","title":"Unicode"},{"location":"Unicode.html#right-to-left-arabic-script-workaround","text":"For Arabic and RTL scripts there is a temporary solution (using two additional libraries python-bidi and arabic-reshaper ) that works for most languages; only a few (rare) Arabic characters aren't supported. Using it on other scripts(eg. when the input is unknown or mixed scripts) does not affect them: from arabic_reshaper import reshape from bidi.algorithm import get_display some_text = '\u0627\u064e\u0644\u0652\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629\u064f\u05db\u05b7\u05bc\u05e3 \u05e1\u05d5\u05b9\u05e4\u05b4\u05d9\u05ea' fixed_text = get_display ( reshape ( some_text ))","title":"Right-to-Left &amp; Arabic Script workaround"},{"location":"Unicode.html#example","text":"This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF () pdf . add_page () # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf . add_font ( 'DejaVu' , fname = 'DejaVuSansCondensed.ttf' ) pdf . set_font ( 'DejaVu' , size = 14 ) text = u \"\"\" English: Hello World Greek: \u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5 \u03ba\u03cc\u03c3\u03bc\u03bf\u03c2 Polish: Witaj \u015bwiecie Portuguese: Ol\u00e1 mundo Russian: \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u041c\u0438\u0440 Vietnamese: Xin ch\u00e0o th\u1ebf gi\u1edbi Arabic: \u0645\u0631\u062d\u0628\u0627 \u0627\u0644\u0639\u0627\u0644\u0645 Hebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd \"\"\" for txt in text . split ( ' \\n ' ): pdf . write ( 8 , txt ) pdf . ln ( 8 ) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf . add_font ( 'gargi' , fname = 'gargi.ttf' ) pdf . set_font ( 'gargi' , size = 14 ) pdf . write ( 8 , u 'Hindi: \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e' ) pdf . ln ( 20 ) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports other east Asian languages) pdf . add_font ( 'fireflysung' , fname = 'fireflysung.ttf' ) pdf . set_font ( 'fireflysung' , size = 14 ) pdf . write ( 8 , u 'Chinese: \u4f60\u597d\u4e16\u754c \\n ' ) pdf . write ( 8 , u 'Japanese: \u3053\u3093\u306b\u3061\u306f\u4e16\u754c \\n ' ) pdf . ln ( 10 ) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that contain Korean syllable # and Latin9 (iso8859-15) characters. pdf . add_font ( 'eunjin' , fname = 'Eunjin.ttf' ) pdf . set_font ( 'eunjin' , size = 14 ) pdf . write ( 8 , u 'Korean: \uc548\ub155\ud558\uc138\uc694' ) pdf . ln ( 20 ) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf . add_font ( 'waree' , fname = 'Waree.ttf' ) pdf . set_font ( 'waree' , size = 14 ) pdf . write ( 8 , u 'Thai: \u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e0a\u0e32\u0e27\u0e42\u0e25\u0e01' ) pdf . ln ( 20 ) # Select a standard font (uses windows-1252) pdf . set_font ( 'helvetica' , size = 14 ) pdf . ln ( 10 ) pdf . write ( 5 , 'This is standard built-in font' ) pdf . output ( \"unicode.pdf\" ) View the result here: unicode.pdf","title":"Example"},{"location":"Unicode.html#free-font-pack-and-copyright-restrictions","text":"For your convenience, this library collected 96 TTF files in an optional \"Free Unicode TrueType Font Pack for FPDF\" , with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the Windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: \"ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.\"","title":"Free Font Pack and Copyright Restrictions"},{"location":"UsageInWebAPI.html","text":"Usage in web APIs Note that FPDF instance objects are not designed to be reusable: content cannot be added once output() has been called. Hence, even if the FPDF class should be thread-safe, we recommend that you either create an instance for every request , or if you want to use a global / shared object, to only store the bytes returned from output() . Django Django is: a high-level Python web framework that encourages rapid development and clean, pragmatic design There is how you can return a PDF document from a Django view : from django.http import HttpResponse from fpdf import FPDF def report ( request ): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) return HttpResponse ( bytes ( pdf . output ()), content_type = \"application/pdf\" ) Flask Flask is a micro web framework written in Python. The following code can be placed in a app.py file and launched using flask run : from flask import Flask , make_response from fpdf import FPDF app = Flask ( __name__ ) @app . route ( \"/\" ) def hello_world (): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) response = make_response ( pdf . output ()) response . headers [ \"Content-Type\" ] = \"application/pdf\" return response AWS lambda The following code demonstrates some minimal AWS lambda handler function that returns a PDF file as binary output: from base64 import b64encode from fpdf import FPDF def handler ( event , context ): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) return { 'statusCode' : 200 , 'headers' : { 'Content-Type' : 'application/json' , }, 'body' : b64encode ( pdf . output ()) . decode ( 'utf-8' ), 'isBase64Encoded' : True } This AWS lambda function can then be linked to a HTTP endpoint using API Gateway , or simply exposed as a Lambda Function URL . More information on those pages: Tutorial: Creating a Lambda function with a function URL Return binary media from a Lambda For reference, the test lambda function was initiated using the following AWS CLI commands: Creating & uploading a lambda layer pyv = 3 .8 pip ${ pyv } install fpdf2 -t python/lib/python ${ pyv } /site-packages/ # We use a distinct layer for Pillow: rm -r python/lib/python ${ pyv } /site-packages/ { PIL,Pillow } * zip -r fpdf2-deps.zip python > /dev/null aws lambda publish-layer-version --layer-name fpdf2-deps \\ --description \"Dependencies for fpdf2 lambda\" \\ --zip-file fileb://fpdf2-deps.zip --compatible-runtimes python ${ pyv } Creating the lambda AWS_ACCOUNT_ID = ... AWS_REGION = eu-west-3 zip -r fpdf2-test.zip lambda.py aws lambda create-function --function-name fpdf2-test --runtime python ${ pyv } \\ --zip-file fileb://fpdf2-test.zip --handler lambda.handler \\ --role arn:aws:iam:: ${ AWS_ACCOUNT_ID } :role/lambda-fpdf2-role \\ --layers arn:aws:lambda: ${ AWS_REGION } :770693421928:layer:Klayers-python ${ pyv /./ } -Pillow:15 \\ arn:aws:lambda: ${ AWS_REGION } : ${ AWS_ACCOUNT_ID } :layer:fpdf2-deps:1 aws lambda create-function-url-config --function-name fpdf2-test --auth-type NONE Those commands do not cover the creation of the lambda-fpdf2-role role, nor configuring the lambda access permissions, for example with a FunctionURLAllowPublicAccess resource-based policy. streamlit streamlit is: a Python library that makes it easy to create and share custom web apps for data science The following code demonstrates how to display a PDF and add a button allowing to download it: from base64 import b64encode from fpdf import FPDF import streamlit as st st . title ( \"Demo of fpdf2 usage with streamlit\" ) @st . cache def gen_pdf (): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) return bytes ( pdf . output ()) # Embed PDF to display it: base64_pdf = b64encode ( gen_pdf ()) . decode ( \"utf-8\" ) pdf_display = f '<embed src=\"data:application/pdf;base64, { base64_pdf } \" width=\"700\" height=\"400\" type=\"application/pdf\">' st . markdown ( pdf_display , unsafe_allow_html = True ) # Add a download button: st . download_button ( label = \"Download PDF\" , data = gen_pdf (), file_name = \"file_name.pdf\" , mime = \"application/pdf\" , ) web2py Usage of the original PyFPDF lib with web2py is described here: https://github.com/reingart/pyfpdf/blob/master/docs/Web2Py.md v1.7.2 of PyFPDF is included in web2py since release 1.85.2 : https://github.com/web2py/web2py/tree/master/gluon/contrib/fpdf","title":"Usage in web APIs"},{"location":"UsageInWebAPI.html#usage-in-web-apis","text":"Note that FPDF instance objects are not designed to be reusable: content cannot be added once output() has been called. Hence, even if the FPDF class should be thread-safe, we recommend that you either create an instance for every request , or if you want to use a global / shared object, to only store the bytes returned from output() .","title":"Usage in web APIs"},{"location":"UsageInWebAPI.html#django","text":"Django is: a high-level Python web framework that encourages rapid development and clean, pragmatic design There is how you can return a PDF document from a Django view : from django.http import HttpResponse from fpdf import FPDF def report ( request ): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) return HttpResponse ( bytes ( pdf . output ()), content_type = \"application/pdf\" )","title":"Django"},{"location":"UsageInWebAPI.html#flask","text":"Flask is a micro web framework written in Python. The following code can be placed in a app.py file and launched using flask run : from flask import Flask , make_response from fpdf import FPDF app = Flask ( __name__ ) @app . route ( \"/\" ) def hello_world (): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) response = make_response ( pdf . output ()) response . headers [ \"Content-Type\" ] = \"application/pdf\" return response","title":"Flask"},{"location":"UsageInWebAPI.html#aws-lambda","text":"The following code demonstrates some minimal AWS lambda handler function that returns a PDF file as binary output: from base64 import b64encode from fpdf import FPDF def handler ( event , context ): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) return { 'statusCode' : 200 , 'headers' : { 'Content-Type' : 'application/json' , }, 'body' : b64encode ( pdf . output ()) . decode ( 'utf-8' ), 'isBase64Encoded' : True } This AWS lambda function can then be linked to a HTTP endpoint using API Gateway , or simply exposed as a Lambda Function URL . More information on those pages: Tutorial: Creating a Lambda function with a function URL Return binary media from a Lambda For reference, the test lambda function was initiated using the following AWS CLI commands: Creating & uploading a lambda layer pyv = 3 .8 pip ${ pyv } install fpdf2 -t python/lib/python ${ pyv } /site-packages/ # We use a distinct layer for Pillow: rm -r python/lib/python ${ pyv } /site-packages/ { PIL,Pillow } * zip -r fpdf2-deps.zip python > /dev/null aws lambda publish-layer-version --layer-name fpdf2-deps \\ --description \"Dependencies for fpdf2 lambda\" \\ --zip-file fileb://fpdf2-deps.zip --compatible-runtimes python ${ pyv } Creating the lambda AWS_ACCOUNT_ID = ... AWS_REGION = eu-west-3 zip -r fpdf2-test.zip lambda.py aws lambda create-function --function-name fpdf2-test --runtime python ${ pyv } \\ --zip-file fileb://fpdf2-test.zip --handler lambda.handler \\ --role arn:aws:iam:: ${ AWS_ACCOUNT_ID } :role/lambda-fpdf2-role \\ --layers arn:aws:lambda: ${ AWS_REGION } :770693421928:layer:Klayers-python ${ pyv /./ } -Pillow:15 \\ arn:aws:lambda: ${ AWS_REGION } : ${ AWS_ACCOUNT_ID } :layer:fpdf2-deps:1 aws lambda create-function-url-config --function-name fpdf2-test --auth-type NONE Those commands do not cover the creation of the lambda-fpdf2-role role, nor configuring the lambda access permissions, for example with a FunctionURLAllowPublicAccess resource-based policy.","title":"AWS lambda"},{"location":"UsageInWebAPI.html#streamlit","text":"streamlit is: a Python library that makes it easy to create and share custom web apps for data science The following code demonstrates how to display a PDF and add a button allowing to download it: from base64 import b64encode from fpdf import FPDF import streamlit as st st . title ( \"Demo of fpdf2 usage with streamlit\" ) @st . cache def gen_pdf (): pdf = FPDF () pdf . add_page () pdf . set_font ( \"Helvetica\" , size = 24 ) pdf . cell ( txt = \"hello world\" ) return bytes ( pdf . output ()) # Embed PDF to display it: base64_pdf = b64encode ( gen_pdf ()) . decode ( \"utf-8\" ) pdf_display = f '<embed src=\"data:application/pdf;base64, { base64_pdf } \" width=\"700\" height=\"400\" type=\"application/pdf\">' st . markdown ( pdf_display , unsafe_allow_html = True ) # Add a download button: st . download_button ( label = \"Download PDF\" , data = gen_pdf (), file_name = \"file_name.pdf\" , mime = \"application/pdf\" , )","title":"streamlit"},{"location":"UsageInWebAPI.html#web2py","text":"Usage of the original PyFPDF lib with web2py is described here: https://github.com/reingart/pyfpdf/blob/master/docs/Web2Py.md v1.7.2 of PyFPDF is included in web2py since release 1.85.2 : https://github.com/web2py/web2py/tree/master/gluon/contrib/fpdf","title":"web2py"},{"location":"borb.html","text":"borb Joris Schellekens made another excellent pure-Python library dedicated to reading & write PDF: borb . He even wrote a very detailed e-book about it, available publicly there: borb-examples . The maintainer of fpdf2 wrote an article comparing it with borb : borb vs fpdf2 . Creating a document with fpdf2 and transforming it into a borb.pdf.document.Document from io import BytesIO from borb.pdf.pdf import PDF from fpdf import FPDF pdf = FPDF () pdf . set_title ( 'Initiating a borb doc from a FPDF instance' ) pdf . set_font ( 'helvetica' , size = 12 ) pdf . add_page () pdf . cell ( txt = \"Hello world!\" ) doc = PDF . loads ( BytesIO ( pdf . output ())) print ( doc . get_document_info () . get_title ())","title":"borb"},{"location":"borb.html#borb","text":"Joris Schellekens made another excellent pure-Python library dedicated to reading & write PDF: borb . He even wrote a very detailed e-book about it, available publicly there: borb-examples . The maintainer of fpdf2 wrote an article comparing it with borb : borb vs fpdf2 .","title":"borb"},{"location":"borb.html#creating-a-document-with-fpdf2-and-transforming-it-into-a-borbpdfdocumentdocument","text":"from io import BytesIO from borb.pdf.pdf import PDF from fpdf import FPDF pdf = FPDF () pdf . set_title ( 'Initiating a borb doc from a FPDF instance' ) pdf . set_font ( 'helvetica' , size = 12 ) pdf . add_page () pdf . cell ( txt = \"Hello world!\" ) doc = PDF . loads ( BytesIO ( pdf . output ())) print ( doc . get_document_info () . get_title ())","title":"Creating a document with fpdf2 and transforming it into a borb.pdf.document.Document"},{"location":"overrides/index.html","text":"cf. https://squidfunk.github.io/mkdocs-material/customization/#overriding-blocks","title":"Index"}]}